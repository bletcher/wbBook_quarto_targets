# Production model - river 4 (IS)

Simple CJS model integrated with a growth in weight model to get phi, p, and growth estimates to develop a production model.

In all the models below, 1 = not observed and 2 = observed in the input *encounter data*.\
Encounter data are available [here](https://drive.google.com/drive/folders/1UmPv49xL-mzUBndqjRISylNO3q3Zs-cm) in the `eh.csv` file. Weight data are in `weight.csv`

```{r}
#| label: librariesModelsNimbleProduction
#| echo: false
library(getWBData)
library(lubridate)
library(kableExtra)
library(GGally)
library(nimble)
library(nimbleEcology)
library(MCMCvis)
library(tidyverse)
library(targets)

library(shiny)
library(tibble)
```

```{r}
#| label: globalModelsNimbleProduction
#| include: false
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
```

Using model #3 from `modelsCMR_Growth_NN_OB.qmd` as a staring point for the models, but adapting the model by\
Prob not 1) Extending AgeInSamples from 1-11 to 1-x to allow bigger fish to be present for the production estimates. Prob not 2) Loop over first\[i\]:lastAIS so fish have the chance to survive to large size.\
3) Add sample random effect structured by cohort to allow cohort effects on growth.

## By Cohort, modelNum 3: phi(i,t) \* g(i,t), p(i,t) model

Model with phi and p for each age-in-samples (t = column in the encounter history file) and individual (i)

Probability of survival (phi) model structure:

```         
      logit(phi[i,t]) <- 
        phiInt[i,t] + 
        phiBeta[1,i,t] * weight[i,t] + 
        phiBeta[2,i,t] * weight[i,t] * weight[i,t] +
        phiBetaCohort[cohort[i]] 
```

Probability of capture (p) model structure:

p(t,i) \<- pInt(t,i)

Growth rate (gr) model structure:

gr(t,i) \<- grInt(t) + cohort(i)

Survival/growth rate interaction:

Multiplicative

Model code is in `./models/production/modelProduction_OB_functionsToSource.R`\
Model is run 'by hand' in `./models/modelProduction_OB_makeFile.R`\
Functions for this qmd file in `./models/qmdProduction_OB_functionsToSource.R`\

Model runs:\

### How many ageInSamples to include?

```{r}
#| label: production

all <- tar_read(cdWB_electro_target)
table(all %>% filter(river == "wb obear")|> dplyr::select(ageInSamples))

cohorts <- 2002:2014

```

### Retrieve model results

```{r}
#| label: productionSource
#| cache: false
library(targets)
library(nimble)
# Following https://oliviergimenez.github.io/bayesian-cr-workshop/worksheets/4_demo.html
# 
# 

# To get the mMCMCSummaryRMNA funcion which I adapted to deal with NAs
source('./models/production/modelProduction_OB_functionsToSource.R')
source('./models/production/qmdProduction_OB_functionsToSource.R')

modelNum <- 3 # phi * growth
```

### Model code
```{r}

# all cohorts have the same code for a given model. show model code for one of them here
load('./models/production/runsOut/production_OB_model_3_2002_mostRecent.RData')
d$modelCode

```

```{r}
#| label: productionFunction

getSummaryByCohort <- function(cohort, modelNum = 3) {
  # Load the data
  load(paste0('./models/production/runsOut/production_OB_model', '_', modelNum, '_', cohort, '_mostRecent.RData')) 
  
  # Input data
  eh <- tar_read_raw(paste0('eh_OB_', cohort, '_target'))
  
  print(paste0('Run time = ', round(d$runTime, 3), ' ', attr(d$runTime, "units")))
  
  get_MCMCTrace_OB(d)
  
  MCMCplot(object = d$mcmc, params = c("phiIntTOut"), ref_ovl = TRUE)
  MCMCplot(object = d$mcmc, params = c("phiBetaT"), ref_ovl = TRUE)
  MCMCplot(object = d$mcmc, params = c("p"), ref_ovl = TRUE)
  MCMCplot(object = d$mcmc, params = c("grIntT"), ref_ovl = TRUE)
  MCMCplot(object = d$mcmc, params = c("sumWeightZ01"), ref_ovl = TRUE)
  MCMCplot(object = d$mcmc, params = c("sumZ01"), ref_ovl = TRUE)
  
  # Create the summary list
  summary_list <- list(
    eh = eh,
    stats = kable(as_tibble(d$runData), caption = "Run statistics"),
    runTime = paste0('Run time = ', round(d$runTime, 3), ' ', attr(d$runTime, "units")),
    #traces = get_MCMCTrace_OB(d),
    summaryMod3_tt_growth = MCMCsummary(object = d$mcmc, params = c(
        #"phiIntT", 
        "phiIntTOut", 
        "p", 
        "grIntT", 
        "phiBetaT",
        "sumWeightZ01",
        "sumZ01"
      ), round = 3) %>%
      rownames_to_column(var = "var"),
    summary_OB = get_summary_OB(d, eh)
  )
  
  return(summary_list)
}

#s=summary_OB[, order(summary_OB$ind, summary_OB$t)]
```


### Summaries by cohort

::: {.panel-tabset}
#### 2002
```{r}
#| label: s2002
#| cache: TRUE
s2002 = getSummaryByCohort(2002, modelNum)
```

#### 2003
```{r}
#| label: s2003
#| cache: TRUE
s2003 = getSummaryByCohort(2003, modelNum)
```

#### 2004
```{r}
#| label: s2004
#| cache: TRUE
s2004 = getSummaryByCohort(2004, modelNum)
```

#### 2005
```{r}
#| label: s2005
#| cache: TRUE
s2005 = getSummaryByCohort(2005, modelNum)
```

#### 2006
```{r}
#| label: s2006
#| cache: TRUE
s2006 = getSummaryByCohort(2006, modelNum)
```

#### 2007
```{r}
#| label: s2007
#| cache: TRUE
s2007 = getSummaryByCohort(2007, modelNum)
```

#### 2008
```{r}
#| label: s2008
#| cache: TRUE
s2008 = getSummaryByCohort(2008, modelNum)
```

#### 2009
```{r}
#| label: s2009
#| cache: TRUE
s2009 = getSummaryByCohort(2009, modelNum)
```

#### 2010
```{r}
#| label: s2010
#| cache: TRUE
s2010 = getSummaryByCohort(2010, modelNum)
```

#### 2011
```{r}
#| label: s2011
#| cache: TRUE
s2011 = getSummaryByCohort(2011, modelNum)
```

#### 2012
```{r}
#| label: s2012
#| cache: TRUE
s2012 = getSummaryByCohort(2012, modelNum)
```

#### 2013
```{r}
#| label: s2013
#| cache: TRUE
s2013 = getSummaryByCohort(2013, modelNum)
```

#### 2014
```{r}
#| label: s2014
#| cache: TRUE
s2014 = getSummaryByCohort(2014, modelNum)
```
:::

### Combine cohort summaries
```{r}
#| label: bindSummaries

sAll <- tibble(.rows = 0) |>
  add_column(!!!s2002$summary_OB[0,])

# Fill tibble
for (cohort in cohorts) {
  summary_obj <- get(paste0("s", cohort))$summary_OB
  summary_obj$cohort <- cohort
  sAll <- bind_rows(sAll, summary_obj)
}

sAll$cohort_ind <- paste0(sAll$cohort, "_", sAll$ind)

```



```{r}
#| label: ojsDefine
#| cache: FALSE

#ojs_define(numTags_OJS_mod3 = dim(s2002$eh$tags)[1]) # all cohorts have the same eh
ojs_define(summary_OB_OJS_all = sAll)
#ojs_define(summary_tt_z_OJS = (summary_tt_z_mod3))
```

#### Select cohort(s):

```{ojs}
//| label: summary_OB_OJS_all_T
summary_OB_OJS_all_T = transpose(summary_OB_OJS_all)
```

```{ojs}
//| label: selectCohort
//| 
import { range } from "d3";

viewof selected_cohort = Inputs.select(d3.range(2002, 2015), {
  label: "Which cohort?",
  value: 2002,
  step: 1,
  multiple: true
})
```

```{ojs}
//| label: filterCohort
summary_OB_OJS_all_T_selected_cohort = summary_OB_OJS_all_T.filter((d) =>
  (selected_cohort.includes(d.cohort))
)
```

#### Select one or more individuals:

```{ojs}
//| label: selectInd
uniqueInds = [...new Set(summary_OB_OJS_all_T_selected_cohort.map(d => d.cohort_ind))].sort();

viewof selectInd_mod3 = Inputs.select(uniqueInds, {
  label: "Which fish?",
  value: 1,
  step: 1,
  multiple: true
})


summary_OB_OJS_all_T_selected_cohort_ind = summary_OB_OJS_all_T_selected_cohort.filter((d) =>
  (selectInd_mod3.includes(d.cohort_ind))
)

```

Black dots/line is estimated mass and orange dots are observed masses. The green line is the first observation and the red line is the last observation. The number in the upper right corner of each panel is the fish's cohort.


#### Plot survival

Black dots/line is estimated probability of survival and orange dots are encountered yes (y = 0.8)/no (y = 0). The green line is the first observation and the red line is the last observation. The number in the upper right corner of each panel is the fish's cohort.

```{ojs}
//| label: plotZ

 Plot.plot({
    width: width,
    height: 350,
    inset: 10,
    color: {
      scheme: "greys"
    },
    x: { label: "Age/season combination" },
    y: { label: "Probability of survival" },
    marks: [
      Plot.frame(),
      Plot.dot(summary_OB_OJS_all_T_selected_cohort_ind, {
        x: "t",
        y: "pSurv"
      }),
      Plot.dot(summary_OB_OJS_all_T_selected_cohort_ind, {
        x: "t",
        y: "enc8",
        fill: "orange"
      }),
      Plot.line(summary_OB_OJS_all_T_selected_cohort_ind, {
        x: "t",
        y: "pSurv"
      }),
      Plot.ruleX(summary_OB_OJS_all_T_selected_cohort_ind, {
        x: "first",
        y: 1,
        "stroke": "green"
      }),
      Plot.ruleX(summary_OB_OJS_all_T_selected_cohort_ind, {
        x: "last",
        y: 1,
        "stroke": "red"
      })
      ,
      Plot.text(summary_OB_OJS_all_T_selected_cohort_ind, 
                Plot.selectFirst({
                  x: 11,
                  y: 1,
                  text: d => d.cohort
                })
      )
    ],
    facet: {
      data: summary_OB_OJS_all_T_selected_cohort_ind,
      x: "ind"
    }
  })

```


```{ojs}
//| label: plotWeight
Plot.plot({
    width: width,
    height: 350,
    inset: 10,
    color: {
      scheme: "greys"
    },
    x: { label: "Age/season combination" },
    y: { label: "Standardized body mass (mg)" },
    marks: [
      Plot.frame(),
      Plot.dot(summary_OB_OJS_all_T_selected_cohort_ind, {
        x: "t",
        y: "mean_weight"
      }),
      Plot.line(summary_OB_OJS_all_T_selected_cohort_ind, {
        x: "t",
        y: "mean_weight"
      }),
      <!-- Plot.dot(d, { -->
          <!--   x: "t", -->
          <!--   y: "mean_gr", -->
          <!--   fill: "green" -->
          <!-- }), -->
        Plot.dot(summary_OB_OJS_all_T_selected_cohort_ind, {
          x: "t",
          y: "weightDATA_std",
          fill: "orange"
        }),
      Plot.ruleX(summary_OB_OJS_all_T_selected_cohort_ind, {
        x: "first",
        y: 3,
        "stroke": "green"
      }),
      Plot.ruleX(summary_OB_OJS_all_T_selected_cohort_ind, {
        x: "last",
        y: 3,
        "stroke": "red"
      }),
      Plot.text(summary_OB_OJS_all_T_selected_cohort_ind,
                Plot.selectFirst({
                  x: 1,
                  y: 4,
                  frameAnchor: "top-left",
                  text: (d) => "Cohort = " + d.cohort
                })
      ),
      Plot.text(summary_OB_OJS_all_T_selected_cohort_ind,
                Plot.selectFirst({
                  x: 1,
                  y: 3.5,
                  frameAnchor: "top-left",
                  text: (d) => "Residual = " + d.meanResid
                })
      )
    ],
    facet: {
      data: summary_OB_OJS_all_T_selected_cohort_ind,
      x: "ind"
    }
  })
```
  
### Compare cohorts
Combine s`cohort`$summaryMod3_tt_growth data into one data frame
```{r}
#| label: cobmineCohortsSummaryGrowth

sParamsAll0 <- tibble(.rows = 0) |>
  add_column(!!!s2002$summaryMod3_tt_growth[0,])

# Fill tibble
for (cohort in cohorts) {
  summary_obj <- get(paste0("s", cohort))$summaryMod3_tt_growth
  summary_obj$cohort <- cohort
  sParamsAll0 <- bind_rows(sParamsAll0, summary_obj)
}

# remove brackets for filtering
sParamsAll0$varNoIndex <- sParamsAll0$var |>
  str_remove("\\[.*\\]")

# for numeric ordering
sParamsAll1 <- sParamsAll0 |> filter(varNoIndex != "phiBetaT") |>
  mutate(
    varNumeric1 = var |>
      str_extract("\\[(\\d+)\\]") %>%
      str_remove_all("\\[|\\]") %>%
      as.numeric()
  )

sParamsAll2 <- sParamsAll0 |> filter(varNoIndex == "phiBetaT") |>
  mutate(
    varNumeric1 = var |>
      str_extract("\\[(\\d+),") %>%           # Changed to match number before comma
      str_remove_all("\\[|,") %>%             # Remove [ and comma
      as.numeric(),
    varNumeric2 = var |>
      str_extract(",\\s*(\\d+)\\]") %>%
      str_remove_all(",|\\s|\\]") %>%
      as.numeric()
  )

sParamsAll = bind_rows(sParamsAll1, sParamsAll2)

```

#### Combined cohorts

#### p
```{r}
#| label: cobmineCohortsGraphsP

ggplot(sParamsAll |> filter(varNoIndex == "p"), aes(varNumeric1, mean, group = cohort, color = cohort)) +
  geom_point() + 
  geom_line() +
  xlab("AgeInSamples")
```

#### phi
```{r}
#| label: cobmineCohortsGraphsphiIntTOut

ggplot(sParamsAll |> filter(varNoIndex == "phiIntTOut"), aes(varNumeric1, mean, group = cohort, color = cohort)) +
  geom_point() + 
  geom_line() +
  xlab("AgeInSamples")
```

#### grIntT
```{r}
#| label: cobmineCohortsGraphsgrIntT

ggplot(sParamsAll |> filter(varNoIndex == "grIntT"), aes(varNumeric1, mean, group = cohort, color = cohort)) +
  geom_point() + 
  geom_line() +
  xlab("AgeInSamples")
```


#### grIntT, filtered
```{r}
#| label: cobmineCohortsGraphsgrIntTFiltered

ggplot(sParamsAll |> filter(varNoIndex == "grIntT", mean > -5, mean < 5), aes(varNumeric1, mean, group = cohort, color = cohort)) +
  geom_point() + 
  geom_line() +
  xlab("AgeInSamples")
```

#### phiBetaT
```{r}
#| label: cobmineCohortsGraphsphiBetaT

ggplot(sParamsAll |> filter(varNoIndex == "phiBetaT", mean > -5, mean < 5), aes(varNumeric2, mean, group = cohort, color = cohort)) +
  geom_point() + 
  geom_line() +
  xlab("AgeInSamples") +
  facet_wrap((~varNumeric1))
```

#### sumWeightZ01
```{r}
#| label: cobmineCohortsGraphssumWeightZ01

ggplot(sParamsAll |> filter(varNoIndex == "sumWeightZ01"), aes(varNumeric1, mean, group = cohort, color = cohort)) +
  geom_point() + 
  geom_line() +
  xlab("AgeInSamples")
```

#### sumZ01
```{r}
#| label: cobmineCohortsGraphssumZ01

ggplot(sParamsAll |> filter(varNoIndex == "sumZ01"), aes(varNumeric1, mean, group = cohort, color = cohort)) +
  geom_point() + 
  geom_line() +
  xlab("AgeInSamples")
```



### Size-dependent survival

```{r}
#| label: sizeDepSurv


phiInt <- sParamsAll |> filter(varNoIndex == "phiIntTOut") |>
  dplyr::select(mean, varNumeric1, cohort) |>
  rename(phiIntOut = mean, ais = varNumeric1)

phiBetas <- sParamsAll |> filter(varNoIndex == "phiBetaT", mean > -5, mean < 5) |>
  dplyr::select(mean, varNumeric1, varNumeric2, cohort) |>
  pivot_wider(names_from = varNumeric1, values_from = mean, names_prefix = "beta") |>
  rename(ais = varNumeric2)

phiSize = expand.grid(weight = seq(-2,2,0.25), ais = 1:11, cohort = cohorts) |> 
   left_join(phiInt) |> 
   left_join(phiBetas) |>
   mutate(pSurv = ilogit(phiIntOut + beta1*weight + beta2*weight^2))# + beta_2*weight^2))

ggplot(phiSize, aes(weight, pSurv, color = cohort, group = cohort)) +
  geom_line() +
  geom_point() +
  facet_wrap(~ais)


```

