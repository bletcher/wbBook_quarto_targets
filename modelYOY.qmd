# Young-of-year size model

```{r}
#| label: dataModelYOYOptions
#| include: false
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
```

```{r}
#| label: librariesModelYOY
#| echo: false
library(getWBData)
library(tidyverse)
library(lubridate)
library(kableExtra)
library(targets)
```

The question here is what is driving *body size variation* across years in brook trout and brown trout in the WB?

We focus on ageInSamples == 1 (age-0 fish in the fall sample) fish for growth model. This is the first sampling occasion that most fish are big enough to tag. Not all fish are big enough, however, and there is a number of untagged fish each year. We need to include both tagged and untagged fish in our age-0 size model.

Factors to include in the model are\
1. Sample date\
2. Cumulative temperature prior to sampling\
3. Cumulative flow prior to sampling\
4. Extreme flow events?? Floods, droughts?\
5. Fish density, age-0 counts across all three salmonids

## Raw data for YOY model

1.  Environmental data (flow, temperature) are from 1, 3, or 5 months prior to date of individual capture. Also can used fixed dates: assumed spawning dates, assumed emergence dates and actual observation (sample) dates.
2.  All fish data are from age-0 in autumn.
3.  Abundance data.

## Get data from targets

West Brook environmental data (flow and temperature) and electrofishing data

```{r}
#| label: dataWB
#| cache: false
library(targets)
envDataWB <- tar_read(envDataWB_target)
cdWB_electro <- tar_read(cdWB_electro_target)

```

## Get first observations

1.  Filter cdWB_electro for first observations in the autumn for age-0 fish (ageInsamples == 1). Including both tagged and untagged fish.

```{r}
#| label: dataWB1Obs
#| cache: false
firstObs_noTag <- tar_read(firstObs_noTag_target)
firstObs_tag <- tar_read(firstObs_tag_target)
firstObs0 <- tar_read(firstObs0_target)

```

For each date in firstObs0 that at least one fish was captured, calculate summary stats for flow and temperature for different time periods:\
1. Assumed spawning to capture\
2. Assumed spawning to assumed emergence\
3. Assumed emergence to capture\
4. One month preceding capture\
5. Three months preceding capture\
5. Five months preceding capture

Then merge results with firstObs0 to create firstObs.

```{r}
#| label: firstObs
#| cache: false
firstObsDates <- tar_read(firstObsDates_target) 
    
firstObs_Env <- tar_read(firstObs_Env_target)
# merge env data into firstObs0
firstObs <- tar_read(firstObs_target)

```

Unnest firstObs so environmental summary stats are available as data frame with the name of the time interval as the prefix to the statisticVariable name

```{r}
#| label: firstObsUnnested
#| cache: false
firstObsUnnested <- tar_read(firstObsUnnested_target)
```

```{r}
#| label: plot1stobsUnnested
ggplot(firstObsUnnested, aes(oneMonth_sumTScaled, fiveMonth_sumTScaled)) +
 geom_point() +
 facet_wrap(~river)
```

### Counts of captured fish

Min and max years (inclusive) for standardizing counts This is in targets, not sure if needed here

```{r}
#| label: minMaxYear
minYear <- 2000
maxYear <- 2015
```

Counts by river and species

```{r}
#| label: rawCounts
#| cache: false
countsRSY <- tar_read(countsRSY_target)
```

```{r}
#| label: plotRawcounts
ggplot(countsRSY, aes(year, countRS_Scaled, color = species)) +
  geom_point() +
  geom_line() +
  facet_wrap(~ river)
```

Counts by river

```{r}
#| label: countsRY
#| cache: false
countsRY <- tar_read(countsRY_target)
```

```{r}
#| label: plotCountsRY
ggplot(countsRY, aes(year, countR_Scaled, color = river)) +
  geom_point() +
  geom_line()
```

Counts for the metaPopulation (WB, Jimmy, Mitchell)\
Use these for modelling.

```{r}
#| label: countsMeta
countsMetaY <- tar_read(countsMetaY_target)
```

```{r}
#| label: plotCountsMeta

ggplot(countsMetaY, aes(year, count_Scaled)) +
  geom_point() +
  geom_line()
```

Merge metapopulation scaled counts into firstObsUnnested

```{r}
#| label: mergeMeta
#| cache: false

firstObsUnnested <- tar_read(firstObsUnnested_target)
firstObsUnnestedWB <- tar_read(firstObsUnnestedWB_target)
```

## Raw data plots

### Frequency plots by species and river

### Brook Trout, West brook

```{r}
#| label: raw data plots1
  #cd1 <- cdWB_electro %>% filter(ageInSamples == 1, species != 'ats')

  plotSppRiv = function(s, r) { 
    ggplot(firstObs %>% filter(species == s, river == r), aes(observedLength, color = is.na(tag))) +
      geom_freqpoly() +
      geom_vline(xintercept = 60) +
      ggtitle(paste(s, r, sep = ', ')) +
      xlim(c(30,125)) +
      facet_wrap(~ year, scales = "free_y")
  }
  
  species = 'bkt'
  riverOrdered = "west brook"

  plotSppRiv(species, riverOrdered)
```

### Brook Trout, wb jimmy

```{r}
#| label: raw data plots2
#| echo: false
  species = 'bkt'
  riverOrdered = "wb jimmy"

  plotSppRiv(species, riverOrdered)
```

### Brook Trout, wb mitchell

```{r}
#| label: raw data plots3
#| echo: false
  species = 'bkt'
  riverOrdered = "wb mitchell"

  plotSppRiv(species, riverOrdered)
```

### Brook Trout, wb obear

```{r}
#| label: raw data plots4
#| echo: false
  species = 'bkt'
  riverOrdered = "wb obear"

  plotSppRiv(species, riverOrdered)
```

### Brown Trout, West brook

```{r}
#| label: raw data plots5
#| echo: false
  species = 'bnt'
  riverOrdered = "west brook"

  plotSppRiv(species, riverOrdered)
```

### Brown Trout, wb jimmy

```{r}
#| label: raw data plots6
#| echo: false
  species = 'bnt'
  riverOrdered = "wb jimmy"

  plotSppRiv(species, riverOrdered)
```

### Brown Trout, wb mitchell

```{r}
#| label: raw data plots7
#| echo: false
  species = 'bnt'
  riverOrdered = "wb mitchell"

  plotSppRiv(species, riverOrdered)
```

### Brown Trout, wb obear - there are no Brown trout in O'Bear

### Trout, in the WB mainstem only

```{r}
#| label: troutWB
  
  ggplot(firstObs %>% filter(species != "ats"), aes(observedLength)) +
    geom_freqpoly() +
    geom_vline(xintercept = 60, color = 'orange') +
    facet_grid(species ~ year)
  
  ggplot(firstObs %>% filter(species != "ats"), aes(observedLength, color = is.na(tag))) +
    geom_freqpoly() +
    geom_vline(xintercept = 60, color = 'orange') +
    facet_grid(species ~ year)
```

### Why are there untagged fish bigger than 60mm?

Check 2002/bkt/WB, as an example Answer: because they are outside the study area (area = 'above' or 'below') or were tagging mortalities

```{r}
#| label: 2002 untagged

  firstObs2002BKT <- firstObs %>% filter(year == 2002, species == "bkt")
  table(is.na(firstObs2002BKT$tag))
  
  ggplot(firstObs2002BKT, aes(observedLength, color = is.na(tag))) +
    geom_freqpoly() +
    geom_vline(xintercept = 60)
  
  # looks like untagged area=inside fish wee morts, the rest were above or below
  ggplot(firstObs2002BKT, aes(observedLength, color = is.na(tag))) +
    geom_freqpoly() +
    geom_vline(xintercept = 60) +
    facet_grid(~area)
  
  # check 2003
  ggplot(firstObs %>% filter(year == 2003, species == "bkt"), aes(observedLength, color = is.na(tag))) +
    geom_freqpoly() +
    geom_vline(xintercept = 60) +
    facet_grid(~area)
  # same story as 2002
```

## Models based on yearly means

Filter firstObsUnnestedWB for bkt, bnt and min/maxYear

```{r}
#| label: filter firstObsUnnestedWB
d_WB_BKT_BNT <- firstObsUnnestedWB %>% filter(species != "ats", year %in% minYear:maxYear) %>%
  mutate(species01 = ifelse(species == "bkt", 1, 0))

hist(d_WB_BKT_BNT$detectionDate, breaks = 250)

d_BKT_BNT <- firstObsUnnested %>% filter(species != "ats", year %in% minYear:maxYear) %>%
  mutate(species01 = ifelse(species == "bkt", 1, 0))

```

Mean model functions
d_WB_BKT_BNT, "oneMonth_sumTScaled", "oneMonth_sumFScaled"
means1R <- getMeansDataByRiver(d_BKT_BNT, "oneMonth_sumTScaled", "oneMonth_sumFScaled")
```{r}
#| label: meanModelFunctions

getMeansData <- function(d, t, f) {
  means <- d %>% 
    group_by(species, year) %>% 
    summarize(
      meanLength = mean(observedLength, na.rm = TRUE), 
      meanEmerge_detect_sumTScaled = mean(emerge_detect_sumTScaled, na.rm = TRUE),
      meanEmerge_detect_sumFScaled = mean(emerge_detect_sumTScaled, na.rm = TRUE),
      meanTTime_sumTScaled = mean(get(t), na.rm = TRUE),
      meanFTime_sumFScaled = mean(get(f), na.rm = TRUE),
      meanYdayScaled = mean(ydayScaled, na.rm = TRUE),
      meanCount_Scaled = mean(count_Scaled, na.rm = TRUE)
    )
  return(means)
}

getMeansDataByRiver <- function(d, t, f) {
  means <- d %>% 
    group_by(species, year, river) %>% 
    summarize(meanLength = mean(observedLength, na.rm = TRUE), 
              meanEmerge_detect_sumTScaled = mean(emerge_detect_sumTScaled, na.rm = TRUE),
              meanEmerge_detect_sumFScaled = mean(emerge_detect_sumTScaled, na.rm = TRUE),
              meanTTime_sumTScaled = mean(get(t), na.rm = TRUE),
              meanFTime_sumFScaled = mean(get(f), na.rm = TRUE),
              meanYdayScaled = mean(ydayScaled, na.rm = TRUE),
              meanCount_Scaled = mean(count_Scaled, na.rm = TRUE)
              )
  return(means)
}

plotMeans <- function(means){
  out <- list()
  out[[1]] <- ggplot(means, aes(meanTTime_sumTScaled, meanLength, color = species)) +
    geom_point() + 
    geom_smooth(method = "lm", se = FALSE)
  
  out[[2]] <- ggplot(means, aes(meanFTime_sumFScaled, meanLength, color = species)) +
    geom_point() + 
    geom_smooth(method = "lm", se = FALSE)
  
  out[[3]] <- ggplot(means, aes(meanTTime_sumTScaled, meanFTime_sumFScaled, color = species)) +
    geom_point() + 
    geom_smooth(method = "lm", se = FALSE)
  return(out)
}

runMeanModels <- function(means) {
  modLMMeans1 <- lm(meanLength ~ (factor(species) + meanFTime_sumFScaled + meanTTime_sumTScaled + meanYdayScaled + meanCount_Scaled), data = means)
  modLMMeans2 <- lm(meanLength ~ (factor(species) + meanFTime_sumFScaled + meanTTime_sumTScaled + meanYdayScaled + meanCount_Scaled)^2, data = means)
  modLMMeans3 <- lm(meanLength ~ (factor(species) + meanFTime_sumFScaled + meanTTime_sumTScaled + meanYdayScaled + meanCount_Scaled)^3, data = means)
  return(list(modLMMeans1, modLMMeans2, modLMMeans3))
}
```

Mean lengths by river. This is information only. Using the WB data only shown here and in the next graph for the models.

```{r}
#| label: meanLengthsR
#| echo: false
means1R <- getMeansDataByRiver(d_BKT_BNT, "oneMonth_sumTScaled", "oneMonth_sumFScaled")

ggplot(means1R, aes(year, meanLength, shape = species, color = species)) + 
  geom_point() +
  geom_line() +
  facet_wrap(~river)
```

Mean lengths for the mean length model.

```{r}
#| label: meanLengths
#| echo: false
means1 <- getMeansData(d_WB_BKT_BNT, "oneMonth_sumTScaled", "oneMonth_sumFScaled")

ggplot(means1, aes(year, meanLength, color = species)) + 
  geom_point() +
  geom_line()
```

Graphs for variables that do not depend on number of months

```{r}
#| label: staticGraphs
#| echo: false
  ggplot(means1, aes(meanYdayScaled, meanLength, color = species)) +
    geom_point() + 
    geom_smooth(method = "lm", se = FALSE)
  
  ggplot(means1, aes(meanCount_Scaled, meanLength, color = species)) +
    geom_point() + 
    geom_smooth(method = "lm", se = FALSE)
  
```

#### Models with flow and temperature from previous *one* month
These models don't run now (Jan 2024) because there is no vaiability in these variables `meanFTime_sumFScaled` + `meanTTime_sumTScaled`. Tried to track this down in `modelYOY.R`, but couldn't
find the reason - needs more digging.
```{r}
#| label: means1Month
#| echo: false
#means1 calculated above
plotMeans(means1)
mod1 <- runMeanModels(means1)

AIC(mod1[[1]], mod1[[2]], mod1[[3]]) %>% arrange(AIC)

summary(mod1[[1]])
#rI1 <- relaimpo::calc.relimp(mod1[[1]])

#save(means1, mod1, file = "models/YOY/mod1LMMeans.Rdata")
```

Relative importance for main effects model

```{r}
#| label: rI1
#| echo: false
#rI1$lmg
```

#### Models with flow and temperature from previous *three* months

```{r}
#| label: means3Month
#| echo: false
means3 <- getMeansData(d_WB_BKT_BNT, "threeMonth_sumTScaled", "threeMonth_sumFScaled")
plotMeans(means3)
mod3 <- runMeanModels(means3)

AIC(mod3[[1]], mod3[[2]], mod3[[3]]) %>% arrange(AIC)

summary(mod3[[1]])

#rI3 <- relaimpo::calc.relimp(mod3[[1]])

#save(means3, mod3, file = "models/mod3LMMeans.Rdata")
```

Relative importance for main effects model

```{r}
#| label: rI3
#| echo: false
#rI3$lmg
```

#### Models with flow and temperature from previous *five* months

```{r}
#| label: means5Month
#| echo: false
means5 <- getMeansData(d_WB_BKT_BNT, "fiveMonth_sumTScaled", "fiveMonth_sumFScaled")
plotMeans(means5)
mod5 <- runMeanModels(means5)

AIC(mod5[[1]], mod5[[2]], mod5[[3]]) %>% arrange(AIC)

summary(mod5[[1]])

#rI5 <- relaimpo::calc.relimp(mod5[[1]])

#save(means5, mod5, file = "models/mod5LMMeans.Rdata")
```

Relative importance for main effects model

```{r}
#| label: rI5
#| echo: false
#rI5$lmg
```

r-squared values and AICs for 1st, 2nd (2-way interactions) and 3rd (3-way interactions) order models

```{r}
#| label: r2
#| echo: false
# knitr::kable(
#  tibble(Order = c(1,2,3),r2 = c(summary(mod1[[1]])$r.squared, summary(mod1[[2]])$r.squared, summary(mod1[[3]])$r.squared)) %>% add_column(numMonths = 1),
#  digits = 3
# ) %>%
#   kable_styling(full_width = FALSE)
# 
# knitr::kable(
#  tibble(Order = c(1,2,3),r2 = c(summary(mod3[[1]])$r.squared, summary(mod3[[2]])$r.squared, summary(mod3[[3]])$r.squared)) %>% add_column(numMonths = 3),
#  digits = 3
# ) %>%
#   kable_styling(full_width = FALSE)
# 
# knitr::kable(
#  tibble(Order = c(1,2,3),r2 = c(summary(mod5[[1]])$r.squared, summary(mod5[[2]])$r.squared, summary(mod5[[3]])$r.squared)) %>% add_column(numMonths = 5),
#  digits = 3
# ) %>%
#   kable_styling(full_width = FALSE)
# 
# # AIC
# knitr::kable(
#   format = 'html',
#   AIC(mod1[[1]], mod1[[2]], mod1[[3]]) %>% arrange(AIC) %>% add_column(numMonths = 1),
#   digits = 3
# ) %>%
#   kable_styling(full_width = FALSE)
# 
# knitr::kable(
#   AIC(mod3[[1]], mod3[[2]], mod3[[3]]) %>% arrange(AIC) %>% add_column(numMonths = 3),
#   digits = 3
# ) %>%
#   kable_styling(full_width = FALSE)
# 
# knitr::kable(
#   AIC(mod5[[1]], mod5[[2]], mod5[[3]]) %>% arrange(AIC) %>% add_column(numMonths = 5),
#   digits = 3
# ) %>%
#   kable_styling(full_width = FALSE)

```

Relative importance of main effects models (repeat of above, but all in one place here)

```{r}
#| label: rIKable
#| echo: false
library("kableExtra")

# Relative Importance
# knitr::kable(
#  tibble(var = names(rI1$lmg), relImp = rI1$lmg) %>% add_column(numMonths = 1),
#  digits = 3
# ) %>%
#   kable_styling(full_width = FALSE)
# 
# knitr::kable(
#  tibble(var = names(rI3$lmg), relImp = rI3$lmg) %>% add_column(numMonths = 3),
#  digits = 3
# ) %>%
#   kable_styling(full_width = FALSE)
# 
# knitr::kable(
#  tibble(var = names(rI5$lmg), relImp = rI5$lmg) %>% add_column(numMonths = 5),
#  digits = 3
# ) %>%
#   kable_styling(full_width = FALSE)
```

### Models with extreme flow events (droughts)

We get negative cumulFlows because we have some negative flows from the flow extension model

```{r}
#| label: drought
#| cache: false
# put some of these calculations into envDataWB
envDataWBFlow = tar_read(envDataWBFlow_target)

```

```{r}
#| label: firstObsYears
firstObsYears <- firstObs %>%
    filter(year %in% minYear:maxYear, 
           yday > 100, yday < 300)
```

```{r}
#| label: plotDrought
ggplot(envDataWBFlow, aes(yday, flow)) +
  geom_point(aes(yday, observedLength/20), size = 0.75, alpha = 0.2, color = 'lightblue', data = firstObsYears) +
  geom_point(size = 0.5) +
  scale_x_continuous(breaks = seq(0,300, 30)) +
  facet_wrap(~year)

ggplot(envDataWBFlow, aes(yday, cumulFlow / 10)) +
  geom_point(aes(yday, observedLength / 20), size = 0.75, alpha = 0.2, color = 'lightblue', data = firstObsYears) +
  geom_point(size = 0.5, color = 'darkgrey') +
  geom_point(aes(yday, cumulTemp / 800), size = 0.5, color = "orange", data = envDataWBFlow) +
  geom_point(aes(yday, flow), size = 0.5, data = envDataWBFlow) +
  scale_x_continuous(breaks = seq(0, 300, 30)) +
  #theme_publication() +
  facet_wrap(~year)

ggplot(envDataWBFlow, aes(yday, cumulFlow, color = (year))) +
  geom_point() +
  scale_x_continuous(breaks = seq(0, 300, 30)) 

ggplot(envDataWBFlow, aes(yday, cumulTemp, color = (year))) +
  geom_point() +
  #geom_point(aes(yday, cumulTemp / 800, color = factor(year)), data = tmp) +
  scale_x_continuous(breaks = seq(0, 300, 30))

```

Is there a sampling section effect?

Note: there are fish in sections \> 50 for years 2002 and 2003, need to filter out early

```{r}
ggplot(d_WB_BKT_BNT %>% filter( section <= 47), aes(factor(section), observedLength)) +
  geom_boxplot() +
  geom_smooth() +
  facet_wrap(~year)

ggplot(d_WB_BKT_BNT %>% filter( section <= 47), aes(factor(year), observedLength)) +
  geom_boxplot() +
  geom_smooth() +
  facet_wrap(~section)
```

```{r}

```
