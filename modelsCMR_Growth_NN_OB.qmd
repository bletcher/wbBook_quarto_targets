# CJS [t,t] - growth model

Simple CJS model integrated with a growth in weight model to get phi, p, and growth estimates to compare with Neural Network CMR/growth model

In all the models below, 1 = not observed and 2 = observed in the input *encounter data*.  
Encounter data are available [here](https://drive.google.com/drive/folders/1UmPv49xL-mzUBndqjRISylNO3q3Zs-cm) in the `eh.csv` file. Weight data are in `weight.csv` 

```{r}
#| label: librariesModelsNimbleRiverNN_growth
#| echo: false
library(getWBData)
library(lubridate)
library(kableExtra)
library(GGally)
library(nimble)
library(nimbleEcology)
library(MCMCvis)
library(tidyverse)
library(targets)
```

```{r}
#| label: globalModelsNimbleRiverCohortNN_growth
#| include: false
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
```

### \[t,t\] model

Model with phi and p for each age-in-samples (column in the encounter history file)

Probability of survival (phi) model structure:
  
  phi\[t\] \<- betaInt\[t\]

Probability of capture (p) model structure:
  
  p\[t\] \<- betaP\[t\]



Model code is in `./models/cmrNN_OB/tt_growth/modelCMR_tt_growth_NN_OB_functionsToSource.R`\
Model is run 'by hand' in `./models/cmrNN_OB/tt_growth/modelCMR_tt_growth_NN_OB_makeFile.R`\
*Not* using this: Targets are loaded in `R/modelCMR_tt_growth_NN_OB.R` and saved as `modelCMR_tt_growth_NN_OB_target`

Model runs:\


#### Retrieve model results

```{r}
#| label: OB_tt_growth_NN
# Following https://oliviergimenez.github.io/bayesian-cr-workshop/worksheets/4_demo.html
# 

load('./models/cmrNN_OB/tt_growth/runsOut/tt_growth_NN_OB_mostRecent.RData')
out_NN_OB <- d

#Input data
eh <- tar_read(eh_OB_2002_2014_target)
```

#### Model code

In the model code, a value of `1` for `z` or in *gamma* or *omega* signifies the individual is alive and a value of `2` signifies the individual is dead. `y[i,j]` is the observed data (encounter history file).

```{r}
#| label: OB_tt_growth_NN_code

out_NN_OB$modelCode

```

#### Model statistics

```{r, echo=FALSE, results='asis'}
#| label: OB_tt_growth_NN_statsTable

kable(as_tibble(out_NN_OB$runData), caption = "Run statistics")

paste0('Run time = ', round(out_NN_OB$runTime, 3), ' ',  attr(out_NN_OB$runTime, "units"))
```

#### Plot traces

```{r}
#| label: OB_tt_growth_NN_plotTraces

  priors <- runif(out_NN_OB$runData$nIter * out_NN_OB$runData$nChains, 0, 1)
  MCMCtrace(object = out_NN_OB$mcmc,
            #ISB = FALSE,
            #exact = TRUE, 
            params = c("gr"),
            pdf = FALSE, 
            priors = priors)

```

#### Summary data

```{r}
#| label: OB_tt_growth_NN_plot
#|   
  MCMCplot(object = out_NN_OB$mcmc, params = c("phi"))
  MCMCplot(object = out_NN_OB$mcmc, params = c("p"))
  MCMCplot(object = out_NN_OB$mcmc, params = c("gr"))
```  

Summary values  
```{r}
#| label: OB_tt_growth_NN_SummaryZ
#|
  (summary_tt_growth <- MCMCsummary(object = out_NN_OB$mcmc, params = c("phi", "p", "gr"), round = 3) %>%
    rownames_to_column(var = "var"))
  
  # To get the mMCMCSummaryRMNA funcion which I adapted to deal with NAs
  source('./models/cmrNN_OB/tt_growth/modelCMR_tt_growth_NN_OB_functionsToSource.R')
  
  summary_tt_growth_z0 <- MCMCSummaryRMNA(object = out_NN_OB$mcmc, params = c("weight"), round = 3) %>%
    rownames_to_column(var = "var") |> 
    mutate(
      ind0 = str_match(var, "([0-9]+), ([0-9]+)")[,2],
      t0 =   str_match(var, "([0-9]+), ([0-9]+)")[,3],
      ind = as.numeric(ind0),
      t = as.numeric(t0)
    ) |> 
    dplyr::select(-c(t0, ind0))
```

Add other variables to summary values  
```{r}
#| label: OB_tt_growth_NN_Summary2
#|  
  ehLong <- 
    eh$eh |>
    as.data.frame() |> 
    rownames_to_column("ind0") |> 
    pivot_longer(starts_with("ais")) |> 
    mutate(
      t = as.numeric(str_match(name, "([0-9]+)")[,1]),
      enc = value,
      ind = as.numeric(ind0)
    ) |> 
    dplyr::select(-c(name, value, ind0))
  
  firstLong <- eh$first |> 
    as_tibble() |> 
    rownames_to_column("ind") |> 
    mutate(ind = as.numeric(ind)) |> 
    rename(first = value)
  
  lastLong <- eh$last |> 
    as_tibble() |> 
    rownames_to_column("ind") |> 
    mutate(ind = as.numeric(ind)) |> 
    rename(last = value)
    
  cohortLong <- eh$cohort |> 
    as_tibble() |> 
    rownames_to_column("ind") |> 
    mutate(ind = as.numeric(ind)) 
  
  weightLong <- 
    eh$weight |>
    as.data.frame() |> 
    rownames_to_column("ind0") |> 
    pivot_longer(starts_with("ais")) |> 
    mutate(
      t = as.numeric(str_match(name, "([0-9]+)")[,1]),
      weight = value,
      ind = as.numeric(ind0)
    ) |> 
    dplyr::select(-c(name, value, ind0))
  
  
  
  summary_tt_growth_z <- summary_tt_growth_z0 |> 
    left_join(ehLong) |> 
    mutate(
      # meanM1 = mean - 1,
      # pSurv = ifelse(meanM1 == 0, 1, 1 - meanM1),
      enc8 = ifelse(enc == 1, 0.8, 0)
    ) |> 
    left_join(firstLong) |> 
    left_join(lastLong) |> 
    left_join(cohortLong) |> 
    left_join(weightLong)
```

```{r}
#| cache: FALSE
ojs_define(numTags_OJS = dim(eh$tags)[1])
ojs_define(summary_tt_growth_z_OJS = (summary_tt_growth_z))
```

#### Plot the probability of survival (z) for selected individuals  
Select one or more individuals :  
```{ojs}

viewof selectInd = Inputs.select([...Array(numTags_OJS).keys()], {
  label: "Which fish?",
  value: 1,
  step: 1,
  multiple: true
})

summary_tt_z_OJS_T = transpose(summary_tt_growth_z_OJS)
summary_tt_growth_z_OJS_T_selected = summary_tt_growth_z_OJS_T.filter((d) =>
  selectInd.includes(d.ind)
)
```

Black dots/line is estimated probability of survival and orange dots are encountered yes (y = 0.8)/no (y = 0). The green line is the first observation and the red line is the last observation. The number in the upper right corner of each panel is the fish's cohort. 
```{ojs}
Plot.plot({
  width: width,
  height: 350,
  inset: 10,
  color: {
    scheme: "greys"
  },
  x: { label: "Age/season combination" },
  y: { label: "Body mass (mg)" },
  marks: [
    Plot.frame(),
    Plot.dot(summary_tt_growth_z_OJS_T_selected, {
      x: "t",
      y: "mean"
    }),
    Plot.dot(summary_tt_growth_z_OJS_T_selected, {
      x: "t",
      y: "weight",
      fill: "orange"
    }),
    Plot.line(summary_tt_growth_z_OJS_T_selected, {
      x: "t",
      y: "mean"
    }),
    Plot.ruleX(summary_tt_growth_z_OJS_T_selected, {
      x: "first",
      y: 1,
      "stroke": "green"
    }),
    Plot.ruleX(summary_tt_growth_z_OJS_T_selected, {
      x: "last",
      y: 1,
      "stroke": "red"
    })
    ,
    Plot.text(summary_tt_growth_z_OJS_T_selected, 
      Plot.selectFirst({
        x: 11,
        y: 1,
        text: d => d.cohort
      })
    )
  ],
  facet: {
    data: summary_tt_growth_z_OJS_T_selected,
    x: "ind"
  }
})
```






#### Output model summary data for Xiaowei

```{r}
#| label: OB_tt_NN_xioawei

  #write.csv(summary_tt, './models/cmrNN_OB/tt/dataOut/xiaowei/summary_tt.csv')
  
  #write.csv(summary_tt_z, './models/cmrNN_OB/tt/dataOut/xiaowei/summary_tt_z.csv')
  


```
