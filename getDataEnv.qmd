## Get environmental data

```{r getEnvDataOptions, include=FALSE}
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
```

```{r librariesGetData, echo = FALSE}
#library(devtools)
#options(download.file.method = "wininet") or turn off VPN
#devtools::install_github('Conte-Ecology/westBrookData/getWBData')
library(getWBData)
library(tidyverse)
library(lubridate)
library(validate)
library(targets)
```

Data are generated in `R/getDataEnv-targets.R` [file](https://github.com/bletcher/wbBook_quarto_targets/blob/main/R/getDataEnv_targets.R)  

## Get environmental data target and show data frame structure

```{r getEnvData}
envDataWB <- tar_read(envDataWB_Target)
str(envDataWB)
```

## Plot flow over time for the West Brook by year

```{r envDataFlowGraph}
#| label: fig-envFlow
#| fig-cap: "Stream flow (m3/s) for the West Brook"

ggplot(envDataWB, aes(yday, flow)) +
  geom_point(size = 0.1) + 
  #geom_line() +
  scale_x_continuous("Day of year") +
  scale_y_continuous("Stream flow (m^3/s)") +
  facet_wrap(~year(date))


```

Test: referring to @fig-envFlow.

## Plot temperature over time for each tributary

```{r envDataTemperatureGraph}
#| label: fig-envTemp
#| fig-cap: "Stream temperature (C) by river"

ggplot(envDataWB, aes(date, temperature)) +
  geom_point(size = 0.2) +
  scale_x_continuous("Date") +
  scale_y_continuous("Stream temperature (C)") +
  facet_wrap(~river)
```


## Plot air and water temperature over time for each tributary

```{r envDataAirWaterTemperatureGraph}
#| label: fig-envAirTemp
#| fig-cap: "Stream and air temperature (C) by river"

getTempYear <- function(d, yearIn){
  d %>% filter(year == yearIn)
}

tempYear <- getTempYear(envDataWB, 2002)
#write.csv(tempYear, "./data/tempYear.csv")
ojs_define(tempYearOJS0 = tempYear)

ggplot(tempYear, aes(date, temperature)) +
  geom_point(size = 0.2) +
  geom_point(aes(date, airTempMedian), color = "blue", size = 0.2) +
  scale_x_continuous("Date") +
  scale_y_continuous("Stream temperature (C)") +
  facet_wrap(~river)

ggplot(tempYear, aes(airTempMedian, temperature)) +
  geom_point(size = 0.2) +
  scale_x_continuous("Air Temperature") +
  scale_y_continuous("Stream temperature (C)") +
  facet_wrap(~river)
```






Will move this to its own chapter
```{ojs}
tempYearOJS = tempYearOJS0

dataChunks
```


```{ojs}
dateChunks = {
  let daysCount = rangeWindowWidth;
  let days = [
    {
      daysCount0: 0,
      start: tempYearOJS[0].dateDate,
      end: tempYearOJS[rangeWindowWidth].dateDate,
      daysCount: rangeWindowWidth,
      data: tempYearOJS.filter(
        (d) => d.yday >= 0 && d.yday <= 0 + rangeWindowWidth
      )
    }
  ];

  do {
    if (daysCount < 365) {
      // dont push if the whole year is seleceted, array will be empty
      days.push({
        daysCount0: daysCount,
        start: tempYearOJS[daysCount].dateDate,
        end: tempYearOJS[daysCount + rangeWindowWidth].dateDate,
        daysCount: daysCount,
        data: tempYearOJS.filter(
          (d) =>
            d.yday >= daysCount + 1 && d.yday <= daysCount + rangeWindowWidth
        )
      });
    }
    daysCount = daysCount + rangeWindowWidth;
  } while (daysCount <= 365);
  return days;
}
```


```{ojs}
viewof rangeWindowWidth = Inputs.range([1, 365 - 0], {
  label: "Window Width",
  value: 14,
  step: 1
})
```

```{ojs}
viewof rangeWhichWindow = Inputs.range([0, dateChunks.length - 1], {
  label: "Which window?",
  step: 1,
  value: 0
})
```

```{ojs}
Plot.plot({
  width: width,
  marks: [
    Plot.dot(dateChunks[rangeWhichWindow].data, {
      x: "airTempMedian",
      y: "temperature"
    }),
    Plot.linearRegressionY(dateChunks[rangeWhichWindow].data, {
      x: "airTempMedian",
      y: "temperature"
    })
  ],
  facet: {
    data: dateChunks[rangeWhichWindow].data,
    x: "river"
  }
})
```

