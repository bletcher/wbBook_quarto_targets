## Get environmental data

```{r}
#| label: getEnvDataOptions
#| include: false
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
```

```{r}
#| label: librariesGetData
#| echo: false
#| cache: false

#library(devtools)
#options(download.file.method = "wininet") or turn off VPN
#devtools::install_github('Conte-Ecology/westBrookData/getWBData')
library(getWBData)
library(tidyverse)
library(lubridate)
library(validate)
library(targets)

```

Data are generated in `R/getDataEnv-targets.R` [file](https://github.com/bletcher/wbBook_quarto_targets/blob/main/R/getDataEnv_targets.R)  

## Get environmental data target and show data frame structure

Flow data in envDataWB:  
  flow = flow extension estimates (WB only)  
  flowByArea = flow extension estimates scaled by watershed area  
  flowByRiver = Jenn's hindcasted flow based on tributary-specific flow estimates


```{r}
#| label: getEnvData
#| cache: false

envDataWB <- tar_read(envDataWB_Target)
str(envDataWB)

ojs_define(envDataWB_OJS = transpose(envDataWB))
```

## Plot flow over time for the West Brook by year

Flow estimates from flow extension model for the West Brook
```{r}
#| label: fig-envFlow
#| fig-cap: "Stream flow (m3/s) for the West Brook"

# ggplot(envDataWB %>% filter(riverOrdered == "West Brook"), aes(yday, flow)) +
#   geom_point(size = 0.1) +
#   #geom_point(size = 0.1, color = "blue", aes(yday, flowByRiver)) +
#   #geom_line() +
#   scale_x_continuous("Day of year") +
#   scale_y_continuous("Stream flow (m^3/s)") +
#   facet_wrap(~year(date))

table(envDataWB$river, is.na(envDataWB$flow))

ggplot(envDataWB, aes(yday, flow)) +
  geom_point(size = 0.1) +
  #geom_point(size = 0.1, color = "blue", aes(yday, flowByRiver)) +
  #geom_line() +
  scale_x_continuous("Day of year") +
  scale_y_continuous("Stream flow (m^3/s)") +
  facet_wrap(~year(date))

```

```{r}
#| label: fig-envFlowByArea
#| fig-cap: "Stream flow (m3/s) scaled by watershed area"

table(envDataWB$river, is.na(envDataWB$flowByArea))

ggplot(envDataWB, aes(yday, flowByArea, color = river)) +
  geom_point(size = 0.1) +
  #geom_point(size = 0.1, color = "blue", aes(yday, flowByRiver)) +
  #geom_line() +
  scale_x_continuous("Day of year") +
  scale_y_continuous("Stream flow (m^3/s) scaled by watershed area") +
  facet_wrap(~year(date))

```

```{r}
#| label: fig-envFlowByRiver
#| fig-cap: "Hindcasted stream flow (m3/s) for the West Brook and tributaries"
table(envDataWB$river, is.na(envDataWB$flowByRiver))

ggplot(envDataWB, aes(yday, flowByRiver, color = river)) +
  geom_point(size = 0.1) +
  #geom_point(size = 0.1, color = "blue", aes(yday, flowByRiver)) +
  #geom_line() +
  scale_x_continuous("Day of year") +
  scale_y_continuous("Stream flow (m^3/s) hindcasted by river-specific flows") +
  facet_wrap(~year(date))

```



```{r}
#| label: fig-envFlowByRiver_byRiver
#| fig-cap: "Stream flow (m3/s) for the West Brook with Jenn's model predictions"
ggplot(envDataWB %>% filter(riverOrdered == "West Brook", year %in% (1998:2021)), aes(flow, flowByRiver, color = yday)) +
  geom_point(size = 0.1) +
  geom_abline(slope = 1) +
  scale_y_continuous("Stream flow (m^3/s) by river") +
  scale_x_continuous("Stream flow (m^3/s) from flow extension") +
  facet_wrap(~year(date))

ggplot(envDataWB %>% filter(year %in% (1998:2021)), aes(flow, flowByRiver, color = river)) +
  geom_point(size = 0.1) +
  geom_abline(slope = 1) +
  scale_y_continuous("Stream flow (m^3/s) by river") +
  scale_x_continuous("Stream flow (m^3/s) from flow extension") +
  facet_wrap(~river)
```

```{r}
#| label: fig-envFlowByRiver_byArea
#| fig-cap: "Stream flow (m3/s) for the West Brook with Jenn's model predictions"
ggplot(envDataWB %>% filter(year %in% (1998:2021)), aes(flowByArea, flowByRiver, color = river)) +
  geom_point(size = 0.1) +
  geom_abline(slope = 1) +
  scale_x_continuous("Stream flow (m^3/s) by area") +
  scale_y_continuous("Stream flow (m^3/s) by river") +
  facet_wrap(~year(date))

ggplot(envDataWB %>% filter(year %in% (1998:2021)), aes(flowByArea, flowByRiver, color = river)) +
  geom_point(size = 0.1) +
  #geom_abline(slope = 1) +
  scale_x_continuous("Stream flow (m^3/s) by area") +
  scale_y_continuous("Stream flow (m^3/s) by river") +
  facet_wrap(~river)
```



```{ojs}
viewof rangeYear = Inputs.range([1997, 2022], {
  label: "Which year?",
  value: 2002,
  step: 1
})

envDataWB_OJSplot = envDataWB_OJS.filter(d => d.year === rangeYear)
```

```{ojs}

Plot.plot({
    width: width,
    height: 350,
    inset: 10,
    color: {
      scheme: "greys"
    },
    x: { label: "Stream flow (m3/s)" },
    y: { label: "Stream flow (m3/s) from Jenn's model" },
    marks: [
      Plot.frame(),
      Plot.dot(envDataWB_OJSplot, {
        x: "flow",
        y: "flowByRiver"
      })
    ],
    facet: {
      data: envDataWB_OJSplot,
      x: "riverOrdered"
    }
  });

```

```{ojs}

Plot.plot({
    width: width,
    height: 350,
    inset: 10,
    color: {
      type: "categorical"
    },
    x: { label: "Day of year" },
    y: { label: "Stream flow (m3/s)" },
    marks: [
      Plot.frame(),
      Plot.dot(envDataWB_OJSplot, {
        x: "dateDate",
        y: "flowByRiver"
      })
    ],
    marks: [
      Plot.frame(),
      Plot.dot(envDataWB_OJSplot, {
        x: "dateDate",
        y: "flow"
      })
    ],
    facet: {
      data: envDataWB_OJSplot,
      x: "riverOrdered"
    }
  });

```


Test: referring to @fig-envFlow.

## Plot temperature over time for each tributary

```{r}
#| label: fig-envTemp
#| fig-cap: "Stream temperature (C) by river"

ggplot(envDataWB, aes(date, temperature)) +
  geom_point(size = 0.2) +
  scale_x_continuous("Date") +
  scale_y_continuous("Stream temperature (C)") +
  facet_wrap(~river)
```


## Plot air and water temperature over time for each tributary

```{r}
#| cache: false
#| label: fig-envAirTemp
#| fig-cap: "Stream and air temperature (C) by river"

getTempYear <- function(d, yearIn){
  d %>% filter(year == yearIn)
}

tempYear <- getTempYear(envDataWB, 2002)
#write.csv(tempYear, "./data/tempYear.csv")
ojs_define(tempYearOJS0 = tempYear)

ggplot(tempYear, aes(date, temperature)) +
  geom_point(size = 0.2) +
  geom_point(aes(date, airTempMedian), color = "blue", size = 0.2) +
  scale_x_continuous("Date") +
  scale_y_continuous("Stream temperature (C)") +
  facet_wrap(~river)

ggplot(tempYear, aes(airTempMedian, temperature, color = yday)) +
  geom_point(size = 0.2) +
  scale_x_continuous("Air Temperature") +
  scale_y_continuous("Stream temperature (C)") +
  facet_wrap(~river)
```






Will move this to its own chapter
```{ojs}
tempYearOJS = transpose(tempYearOJS0)

//tempYearOJS0
//tempYearOJS
dateChunks
```


```{ojs}
dateChunks = {
  let daysCount = rangeWindowWidth;
  let days = [
    {
      daysCount0: 0,
      start: tempYearOJS[0].dateDate,
      end: tempYearOJS[rangeWindowWidth].dateDate,
      daysCount: rangeWindowWidth,
      data: tempYearOJS.filter(
        (d) => d.yday >= 0 && d.yday <= 0 + rangeWindowWidth
      )
    }
  ];

  do {
    if (daysCount < 365) {
      // dont push if the whole year is seleceted, array will be empty
      days.push({
        daysCount0: daysCount,
        start: tempYearOJS[daysCount].dateDate,
        end: tempYearOJS[daysCount + rangeWindowWidth].dateDate,
        daysCount: daysCount,
        data: tempYearOJS.filter(
          (d) =>
            d.yday >= daysCount + 1 && d.yday <= daysCount + rangeWindowWidth
        )
      });
    }
    daysCount = daysCount + rangeWindowWidth;
  } while (daysCount <= 365);
  return days;
}
```

Use the slider below to set the length (# of days) of each data chunk.  
Number of data chunks: ${dateChunks.length}  
Start date = ${dateChunks[rangeWhichWindow].data[0].date}  
end date = ${dateChunks[rangeWhichWindow].data[dateChunks.length - 1].date}  

```{ojs}
viewof rangeWindowWidth = Inputs.range([1, 365 - 0], {
  label: "Data chunk length",
  value: 14,
  step: 1
})
```



Of the data chunks defined above which one should we graph. 0 is the first one and you won't be able to go past the last one (range updates automatically) but you might get as few as one observation in the last chunk.

```{ojs}
viewof rangeWhichWindow = Inputs.range([0, dateChunks.length - 1], {
  label: "Which data chunk?",
  step: 1,
  value: 0
})
```

```{ojs}
Plot.plot({
  width: width,
  height: 350,
  inset: 10,
  color: {
    scheme: "greys"
  },
  x: { label: "Air temperature (C)" },
  y: { label: "Water temperature (C)" },
  marks: [
    Plot.frame(),
    Plot.dot(dateChunks[rangeWhichWindow].data, {
      x: "airTempMedian",
      y: "temperature",
      stroke: "yday"
    })//,
 //   Plot.linearRegressionY(dateChunks[rangeWhichWindow].data, {
//      x: "airTempMedian",
 //     y: "temperature"
 //   })
  ],
  facet: {
    data: dateChunks[rangeWhichWindow].data,
    x: "river"
  }
})
```



=======================================================  
some integration alternatives - most are not so slick and are independent from  the ojs code blocks above  
Seems like it is best to devleop in observable and copy/paste code blocks in here.


import chunk from 'Playground'
```{ojs}
import { plotChunk } from "@bletcher/Playground"
plotChunk
```

iframe in html block
```{=html}
<iframe width="100%" height="510" frameborder="0"
  src="https://observablehq.com/embed/@bletcher/playground?cells=viewof+rangeWindowWidth%2Cviewof+rangeWhichWindow%2CplotChunk"></iframe>
```

runtime with javascript in html block
```{=html}
<div id="observablehq-viewof-rangeWindowWidth-7d7c4d0d"></div>
<div id="observablehq-viewof-rangeWhichWindow-7d7c4d0d"></div>
<div id="observablehq-plotChunk-7d7c4d0d"></div>
<p>Credit: <a href="https://observablehq.com/@bletcher/playground">Playground by Ben Letcher</a></p>

<link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/@observablehq/inspector@5/dist/inspector.css">
<script type="module">
import {Runtime, Inspector} from "https://cdn.jsdelivr.net/npm/@observablehq/runtime@5/dist/runtime.js";
import define from "https://api.observablehq.com/@bletcher/playground@190.js?v=3";
new Runtime().module(define, name => {
  if (name === "viewof rangeWindowWidth") return new Inspector(document.querySelector("#observablehq-viewof-rangeWindowWidth-7d7c4d0d"));
  if (name === "viewof rangeWhichWindow") return new Inspector(document.querySelector("#observablehq-viewof-rangeWhichWindow-7d7c4d0d"));
  if (name === "plotChunk") return new Inspector(document.querySelector("#observablehq-plotChunk-7d7c4d0d"));
  return ["dateChunks"].includes(name);
});
</script>
```
