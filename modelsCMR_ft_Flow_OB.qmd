# Flow effects on survival (phi) models - O'Bear only

logit(phi[t,i]) <- 
  betaInt[   isYOY[i,t],season[t]] +
  betaFlow[1,isYOY[i,t],season[t]] * flow[i,t] +
  betaFlow[2,isYOY[i,t],season[t]] * temp[i,t] +
  betaFlow[3,isYOY[i,t],season[t]] * temp[i,t] * flow[i,t]

The goal of this modelling exercise is to evaluate the effect of new tributary-specific stream flow estimates on survival of brook trout and brown trout. We will compare survival across the WB and tributaries with flow input data as 1) single flow estimate for all locations (historical approach) and 2) hindcasted flows for each tributary based on new tributary-specific flows which are available since 2000.

The goal is to find the best structure for the survival model, then compare survival estimates with tributary-specific flow to estimates with common flow across locations.

Structure options include
[species, cohort, season, isYOY, flow, flow^2]


```{r globalModelsNimbleRiver, include=FALSE}
knitr::opts_chunk$set(warning = FALSE, message = FALSE)
```


```{r librariesModelsNimbleRiver, echo = FALSE}
library(getWBData)
library(lubridate)
library(kableExtra)
library(GGally)
library(nimble)
library(nimbleEcology)
library(MCMCvis)
library(tidyverse)
library(targets)
```

### Model phiT_pT (tt)
Single estimates of phi and p (across, cohorts, flow)  

#### Retrieve model results
Model is run using targets in R/modelCMR_tt_OB.R
```{r OB_tt}
# Following https://oliviergimenez.github.io/bayesian-cr-workshop/worksheets/4_demo.html
# 
  out <- tar_read(tt_modelOut_OB)

  MCMCplot(object = out$mcmc)
  MCMCsummary(object = out$mcmc, round = 3)
  
  priors <- runif(out$runData$nIter * out$runData$nChains, 0, 1)
  MCMCtrace(object = out$mcmc,
            #ISB = FALSE,
            #exact = TRUE, 
            params = c("phi", "p"),
            pdf = FALSE, 
            priors = priors)

```

### Model phiT_pT flow (tt_OB_flow)
Cohort-dependent estimates of phi and p with flow and temperature hierarchical effects  

#### Retrieve model results
Model is run using targets in R/modelCMR_tt_OB.R
```{r OB_tt_flow}
# Following https://oliviergimenez.github.io/bayesian-cr-workshop/worksheets/4_demo.html
# 
  out_flow <- tar_read(tt_modelOut_ft_OB_flow )

  MCMCplot(object = out_flow$mcmc)
  summary_flow <- MCMCsummary(object = out_flow$mcmc, round = 3) %>%
    mutate(flowData = "flow") %>%
    rownames_to_column(var = "var")
  
  priors <- runif(out_flow$runData$nIter * out_flow$runData$nChains, 0, 1)
  MCMCtrace(object = out_flow$mcmc,
            #ISB = FALSE,
            #exact = TRUE, 
            params = c(
              "betaIntTop", "betaPhiTop","betaFlowTop","betaPTop"  
            #  "betaInt", "betaPhi","betaFlow","betaP",
            #  "betaIntOut", "betaPhiOut","betaFlowOut","betaPOut"
            ),
            pdf = FALSE, 
            priors = priors)
  
    MCMCtrace(object = out_flow$mcmc,
            #ISB = FALSE,
            #exact = TRUE, 
            params = c(
              "betaIntYOY", "betaPhiYOY","betaFlowYOY","betaPYOY"  
            #  "betaInt", "betaPhi","betaFlow","betaP",
            #  "betaIntOut", "betaPhiOut","betaFlowOut","betaPOut"
            ),
            pdf = FALSE, 
            priors = priors)

```


### Model phiT_pT flow ByRiver (tt_OB_flowByRiver)
Cohort-dependent estimates of phi and p with flowByRiver and flowByRiver^2 hierarchical effects  

#### Retrieve model results
Model is run using targets in R/modelCMR_tt_OB.R
```{r OB_tt_flowByRiver}
# Following https://oliviergimenez.github.io/bayesian-cr-workshop/worksheets/4_demo.html
# 
  out_flowByRiver <- tar_read(tt_modelOut_ft_OB_flowByRiver)

  MCMCplot(object = out_flowByRiver$mcmc)
  summary_flowByRiver <- MCMCsummary(object = out_flowByRiver$mcmc, round = 3) %>%
    mutate(flowData = "flowByRiver") %>%
    rownames_to_column(var = "var")
  
  priors <- runif(out_flowByRiver$runData$nIter * out_flowByRiver$runData$nChains, 0, 1)
  MCMCtrace(object = out_flowByRiver$mcmc,
            #ISB = FALSE,
            #exact = TRUE, 
            params = c(  "betaIntYOY", "betaPhiYOY","betaFlowYOY","betaPYOY"    ),
            pdf = FALSE, 
            priors = priors)


```

#### Compare parameter estimates of models with flow and flowByRiver
```{r}
both <- bind_rows(summary_flow, summary_flowByRiver) %>%
  rename(lo = '2.5%', hi = '97.5%')

ggplot(both %>% filter(grepl("betaFlowTop", var)), aes(color = flowData)) +
  geom_point(aes(var, mean), size = 2, position = position_dodge(width = 0.5)) +
  geom_errorbar( aes(var, ymin = lo, ymax = hi), width = 0.4, position = position_dodge(width = 0.5)) 

ggplot(both %>% filter(grepl("betaPhiTop", var)), aes(color = flowData)) +
  geom_point(aes(var, mean), size = 2, position = position_dodge(width = 0.5)) +
  geom_errorbar( aes(var, ymin = lo, ymax = hi), width = 0.4, position = position_dodge(width = 0.5)) +
  theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1))

ggplot(both %>% filter(grepl("betaFlowYOY", var)), aes(color = flowData)) +
  geom_point(aes(var, mean), size = 2, position = position_dodge(width = 0.5)) +
  geom_errorbar( aes(var, ymin = lo, ymax = hi), width = 0.4, position = position_dodge(width = 0.5)) +
  theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1))

ggplot(both %>% filter(grepl("betaPhiYOY", var)), aes(color = flowData)) +
  geom_point(aes(var, mean), size = 2, position = position_dodge(width = 0.5)) +
  geom_errorbar( aes(var, ymin = lo, ymax = hi), width = 0.4, position = position_dodge(width = 0.5)) +
  theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1))

ggplot(both %>% filter(grepl("betaPYOY", var)), aes(color = flowData)) +
  geom_point(aes(var, mean), size = 2, position = position_dodge(width = 0.5)) +
  geom_errorbar( aes(var, ymin = lo, ymax = hi), width = 0.4, position = position_dodge(width = 0.5)) +
  theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1))

# ggplot(both %>% filter(grepl("betaPOut", var)), aes(color = flowData)) +
#   geom_point(aes(var, mean), size = 2, position = position_dodge(width = 0.5)) +
#   geom_errorbar( aes(var, ymin = lo, ymax = hi), width = 0.4, position = position_dodge(width = 0.5)) +
#   theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1))
```


```{r}
getPredictions_FlowYOYSeason <- function(toSave, everyNIters = 10, flowStep = 0.5){
  
  mcmc <- toSave$mcmc
  ## betaInt
  predictorsBetaInt <- expand.grid(
    iter = seq(1, dim(mcmc$chain1)[1], everyNIters),
    isYOY = 1:2,
    season = 1:toSave$myConstants$nSeasons
 #   cohort = 1:toSave$myConstants$nCohorts
  )
  
  for(i in 1:nrow(predictorsBetaInt)){
    predictorsBetaInt$betaInt[i] <- mcmc$chain1[[predictorsBetaInt[i, "iter"], 
                                                 paste0("betaInt[", predictorsBetaInt[i, "isYOY"],
                                                        ", ",       predictorsBetaInt[i, "season"],
                                                    #    ", ",       predictorsBetaInt[i, "cohort"],
                                                        "]")
    ]]
  }
  
  # betaPhi
    ## betaPhi
  predictorsBetaPhi <- expand.grid(
    iter = seq(1, dim(mcmc$chain1)[1], everyNIters),
    isYOY = 1:2,
    season = 1:toSave$myConstants$nSeasons
  #  cohort = 1:toSave$myConstants$nCohorts
  )
  
  for(i in 1:nrow(predictorsBetaPhi)){
    predictorsBetaPhi$betaPhi[i] <- mcmc$chain1[[predictorsBetaPhi[i, "iter"], 
                                                 paste0("betaPhi[", predictorsBetaPhi[i, "isYOY"],
                                                        ", ",       predictorsBetaPhi[i, "season"],
                                                     #   ", ",       predictorsBetaPhi[i, "cohort"],
                                                        "]")
    ]]
  }
  
  ## betaFlow
  predictorsBetaFlow <- expand.grid(
    iter = seq(1, dim(mcmc$chain1)[1], everyNIters),
    isYOY = 1:2,
    season = 1:toSave$myConstants$nSeasons
  #  cohort = 1:toSave$myConstants$nCohorts
  )
  
  for(i in 1:nrow(predictorsBetaFlow)){
    predictorsBetaFlow$betaFlow1[i] <- mcmc$chain1[[predictorsBetaFlow[i, "iter"], 
                                                    paste0("betaFlow[1, ", predictorsBetaFlow[i, "isYOY"],
                                                           ", ",           predictorsBetaFlow[i, "season"],
                                                      #     ", ",           predictorsBetaFlow[i, "cohort"],
                                                           "]")
    ]]
    predictorsBetaFlow$betaFlow2[i] <- mcmc$chain1[[predictorsBetaFlow[i, "iter"], 
                                                    paste0("betaFlow[2, ", predictorsBetaFlow[i, "isYOY"],
                                                           ", ",           predictorsBetaFlow[i, "season"],
                                                  #         ", ",           predictorsBetaFlow[i, "cohort"],
                                                           "]")
    ]]
    
    predictorsBetaFlow$betaFlow3[i] <- mcmc$chain1[[predictorsBetaFlow[i, "iter"], 
                                                    paste0("betaFlow[3, ", predictorsBetaFlow[i, "isYOY"],
                                                           ", ",           predictorsBetaFlow[i, "season"],
                                                  #         ", ",           predictorsBetaFlow[i, "cohort"],
                                                           "]")
    ]]
  }
  

  predictorsAll <- expand.grid(
    iter = seq(1, dim(mcmc$chain1)[1], everyNIters),
    isYOY = 1:2,
  #  cohort = 1:toSave$myConstants$nCohorts,
    season = 1:toSave$myConstants$nSeasons,
    flow = seq(-1.5, 1.5, flowStep),
    temp = seq(-1.5, 1.5, flowStep)
  )
  
  preds <- predictorsAll %>%
    left_join(predictorsBetaInt) %>%
    left_join(predictorsBetaFlow) %>%
    left_join(predictorsBetaPhi) %>%
    mutate(predPhi = plogis(betaInt + betaPhi + betaFlow1 * flow + betaFlow2 * temp + betaFlow3 * flow * temp))
  
  return(preds)
}


```



Flow_YOYSeason predictions
```{r}
predFlowCohort <- getPredictions_FlowYOYSeason(out_flow, everyNIters = 5) %>%
    mutate(flowData = "flow") 

predFlowByRiverCohort <- getPredictions_FlowYOYSeason(out_flowByRiver, everyNIters = 5) %>%
    mutate(flowData = "flowByRiver")

predBoth <- bind_rows(predFlowCohort, predFlowByRiverCohort)
```

#### Graph flow predictions  
Predictions based on flow from the flow extension curve - original approach
```{r}
colors <- c("blue", "green", "red")

ggplot(predFlowCohort %>% filter(temp %in% c(-1,0,1)), aes(flow, predPhi, group = ((paste0(iter,temp, sep = "_"))))) +
  geom_line(aes(color = factor(temp)), alpha = 0.05) +
  scale_color_manual(values = colors) +
  facet_grid(season ~ isYOY)
```

Predictions based on flow from flowByRiver
```{r}
ggplot(predFlowByRiverCohort %>% filter(temp %in% c(-1,0,1)), aes(flow, predPhi, group = ((paste0(iter,temp, sep = "_"))))) +
  geom_line(aes(color = factor(temp)), alpha = 0.05) +
  scale_color_manual(values = colors) +
  facet_grid(season ~ isYOY)
```

Similar format to to the 2015 paper
```{r}
ggplot(predFlowCohort %>% filter(flow %in% c(-1,0,1)), aes(temp, predPhi, group = ((paste0(iter,flow, sep = "_"))))) +
  geom_line(aes(color = factor(flow)), alpha = 0.05) +
  scale_color_manual(values = colors) +
  facet_grid(season ~ isYOY)
```




FlowTop predictions
```{r}
# predFlowTop <- getPredictionsFlowTop(out_flow, everyNIters = 5) %>%
#     mutate(flowData = "flow") 
# 
# predFlowByRiverTop <- getPredictionsFlowTop(out_flowByRiver, everyNIters = 5) %>%
#     mutate(flowData = "flowByRiver")
# 
# predTopBoth <- bind_rows(predFlowTop, predFlowByRiverTop)
```

```{r}
# ggplot(predTopBoth, aes(flow, predPhi, group = iter)) +
#   geom_line() +
#   facet_wrap(~flowData)
# 
# ggplot(predTopBoth %>% filter(iter < 100), aes(flow, predPhi, group = iter)) +
#   geom_line() +
#   facet_grid(flowData ~ iter)
```


```{r}
getPredictionsFlowTop <- function(toSave, everyNIters = 10, flowStep = 0.5){

  mcmc <- toSave$mcmc
  
  ## betaFlow
  predictorsBetaFlowTop <- expand.grid(
    iter = seq(1, dim(mcmc$chain1)[1], everyNIters),
    var = 1:2,
    flow = seq(-1.5, 1.5, flowStep),
    temp = seq(-1.5, 1.5, flowStep)
  )
  
  for(i in 1:nrow(predictorsBetaFlowTop)){
    predictorsBetaFlowTop$betaFlowTop1[i] <- mcmc$chain1[[predictorsBetaFlowTop[i, "iter"], 
                                                         1
                                                        ]]
    predictorsBetaFlowTop$betaFlowTop2[i] <- mcmc$chain1[[predictorsBetaFlowTop[i, "iter"], 
                                                         2
                                                        ]]
    predictorsBetaFlowTop$betaFlowTop3[i] <- mcmc$chain1[[predictorsBetaFlowTop[i, "iter"], 
                                                         3
                                                        ]]
  }

  preds <- predictorsBetaFlowTop %>%
    mutate(predPhi = plogis(betaFlow1 * flow + betaFlow2 * temp + betaFlow3 * flow * temp))
  
  return(preds)
}

```

