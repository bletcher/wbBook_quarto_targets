## Get wanding data

```{r}
#| label: dataWandingOptions
#| include: false
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
```

```{r}
#| label: librariesdataWanding
#| echo: false
library(tidyverse)
library(lubridate)
library(getWBData)
library(targets)
library(kableExtra)

library(lme4)
library(merTools)
```

Data are generated in `R/getDataWanding-targets.R` [file](https://github.com/bletcher/wbBook_quarto_targets/blob/main/R/getDataWanding_targets.R)

Thinking about using the wanding data to evaluate whether we can use the seasonal shocking data to talk about patterns of movement. If there is a lot of movement in the wanding data, may be difficult to justify using the 4 seasonal samples to describe movemenmts. If not much movement, may be ok.  
Also, just interesting to see movement patterns from the wanding data.  


## Get wanding data targets

```{r}
#| label: dataWanding
#| cache: false

library(targets)

cdWB_wanding <- tar_read(cdWB_wanding_target)
str(cdWB_wanding)

cdWB_wandingTribs3 <- tar_read(cdWB_wandingTribs3_target)

cdWB_wandingWB2 <- tar_read(cdWB_wandingWB2_target)
cdWB_wandingWB3 <- tar_read(cdWB_wandingWB3_target)

# Save csv for downloading
#write.csv(cdWB_wanding, file = "C:/Users/bletcher/OneDrive - DOI/projects/wbBook_quarto_targets/data/outForDownload/cdWB_wanding.csv")
# Save rData file for downloading
# save(cdWB_wanding, file = "C:/Users/bletcher/OneDrive - DOI/projects/wbBook_quarto_targets/data/outForDownload/cdWB_wanding.RData")
```

```{r}
#| label: tbl-wandAll
#| tbl-cap: "Count of wanding data by river"

cdWB_wanding %>% 
  group_by(riverOrdered, cohort) %>% 
  summarize(n = n()) %>%
  pivot_wider(values_from = "n", names_from = "riverOrdered") %>%
  arrange(cohort) %>%
  kable() %>%
  kable_styling(full_width = T)

```

::: panel-tabset
#### West Brook

```{r}
#| label: wandWB


cdWB_wanding %>% 
  filter(riverOrdered == "West Brook") |> 
  group_by(riverOrdered, cohort, date(detectionDate)) %>% 
  summarize(n = n()) %>%
  pivot_wider(values_from = "n", names_from = "riverOrdered") %>%
  arrange(cohort) %>%
  kable() %>%
  kable_styling(full_width = T)
```

#### Jimmy (OL)

```{r}
#| label: wandJimmy


cdWB_wanding %>% 
  filter(riverOrdered == "WB Jimmy") |> 
  group_by(riverOrdered, cohort, date(detectionDate)) %>% 
  summarize(n = n()) %>%
  pivot_wider(values_from = "n", names_from = "riverOrdered") %>%
  arrange(cohort) %>%
  kable() %>%
  kable_styling(full_width = T)
```

#### Mitchell (OS)

```{r}
#| label: wandOS


cdWB_wanding %>% 
  filter(riverOrdered == "WB Mitchell") |> 
  group_by(riverOrdered, cohort, date(detectionDate)) %>% 
  summarize(n = n()) %>%
  pivot_wider(values_from = "n", names_from = "riverOrdered") %>%
  arrange(cohort) %>%
  kable() %>%
  kable_styling(full_width = T)
```


#### O'Bear (IS)

```{r}
#| label: wandOB

cdWB_wanding %>% 
  filter(riverOrdered == "WB OBear") |> 
  group_by(riverOrdered, cohort, date(detectionDate)) %>% 
  summarize(n = n()) %>%
  pivot_wider(values_from = "n", names_from = "riverOrdered") %>%
  arrange(cohort) %>%
  kable() %>%
  kable_styling(full_width = T)
```
:::



```{r}
#| label: fig-wanding
#| fig-cap: "graph"


```
## All wanding data  
Based on the following, looks like best data for analysis are trout in the tribs in 2009 2010. Need to decide what to do for salmon
```{r}
#| label: rawWandingDataGraphs
#| cache: true

#everything
ggplot(cdWB_wanding, aes(j, sectionWQuarter, color = tag) )+
  geom_point()+
  geom_line() +
  scale_y_continuous(limits = c(0,50))+
  theme(legend.position = "none")+
  ggtitle("Everything") +
  facet_grid(riverOrdered ~ year)

#everything
ggplot(filter(cdWB_wanding, aliveOrDead != 'dead'), aes(j, sectionWQuarter, color = tag) )+
  geom_point()+
  geom_line() +
  scale_y_continuous(limits = c(0, 50))+
  theme(legend.position = "none")+
  ggtitle("Not dead") +
  facet_grid(river~year)

```


## Tributaries
```{r}
#| cache: true
# Tribs
# Loop over species
for (s in c("bkt","bnt") ) {
  tmp2 <-
    ggplot(filter(cdWB_wanding, river!="west brook" & species == s & aliveOrDead != 'dead'), 
           aes(detectionDate,sectionWQuarter, group = tag))+
    geom_point(aes(shape = aliveOrDead), size = 2)+
    geom_line() +
    scale_y_continuous(limits = c(-2, 15))+
    #  theme(legend.position="none")+
    ggtitle(paste("Tribs", s, "not dead")) +
    facet_grid(river ~ year, scales = 'free')
  print(tmp2)
}

```

### Which species_year_tributary?  
Raw data graphs for the 4 sets of data to focus on
```{r}
#| label: wanding_yearByYear
#| cache: true

# Tribs - focus on a year
for (s in c("bkt", "bnt") ) {
  for (y in c(2009, 2010) ) {
    for (r in c("wb mitchell", "wb jimmy", "wb obear")) {

      tmp <-
        ggplot(filter(cdWB_wanding, river == r & species == s & year == y & aliveOrDead != 'dead'), 
               aes(detectionDate,sectionWQuarter, color = tag))+
        geom_point(aes(shape=aliveOrDead),size=2)+
        geom_line() +
        #  scale_y_continuous(limits=c(0,15))+
        theme(legend.position="none")+
        ggtitle(paste("Tribs", s, y, r, "not dead"))
      #  facet_grid(species~year,scales='free')

      print(tmp)
    }
  }
}

```

### Movement  
Counts of observations by month, river, year
```{r}
table(cdWB_wandingTribs3$month, cdWB_wandingTribs3$river, cdWB_wandingTribs3$year)

 ggplot(cdWB_wandingTribs3, aes(moveRate, color = species)) +
   geom_freqpoly() +
   facet_grid(river ~ year)
```
Frequency distribution of movement rates
```{r}
ggplot(cdWB_wandingTribs3, aes(moveRate, linetype = species)) +
  geom_freqpoly(binwidth=5, boundary = min(cdWB_wandingTribs3$moveRate)) +
  scale_x_continuous("Movement rate (m/week)") +
  scale_y_continuous("Frequency") +
  theme_bw(base_size=25)+
  theme( strip.background = element_blank()
         #strip.text = element_blank()
         #legend.position = "none"
         ) +
  facet_grid(~ river)

```
### Intervals
```{r}
# #Cut moveTime into intervals to make sure patterns look same for recaptures of different intervals

# ggplot(cdWB_wandingTribs4_target, aes( moveRate, color=interval ) ) +
#   geom_freqpoly() +
#   facet_grid(river~year+species)

 #Try a boxplot
 ggplot( cdWB_wandingTribs3 %>% filter(month %in% 9:11), 
         aes( factor(month),moveRate, color = species ) ) +
   geom_boxplot() +
   facet_grid(river~year)

```

### Random effect models
```{r}
# RE model for individual movement variation
# 
 mod0 <- lmer(abs(moveRate) ~ (1|tag), data = cdWB_wandingTribs3)
# ####
 mod1 <- lmer(abs(moveRate) ~ factor(species) + (1|tag), data = cdWB_wandingTribs3)
# ####
 mod2 <- lmer(abs(moveRate) ~ factor(species) * factor(month) + (1|tag), data = cdWB_wandingTribs3)
# ####
 mod3 <- lmer(abs(moveRate) ~ factor(species) + factor(month) + factor(year) + (1|tag), data = cdWB_wandingTribs3)
# ####
 mod4 <- lmer(abs(moveRate) ~ factor(species) * factor(month) * factor(year) + (1|tag), data = cdWB_wandingTribs3)
# 
 AIC(mod0,mod1,mod2,mod3,mod4) %>% arrange(AIC)
# 
 summary(mod4)
# 
 randoms <- REsim( mod4, n.sims = 1000 )
 plotREsim(randoms)
# 

 ggplot(randoms, aes(mean)) + 
   geom_histogram(binwidth = 0.75, boundary = min(randoms$mean)) +
   scale_x_continuous("Indivdual random effect for movement rate (m/week)") +
   scale_y_continuous("Frequency") +
   theme_bw(base_size = 25)

# # % of fish with CI that don't overlap 0
 randoms$lCI <- randoms$mean - randoms$sd * 1.96
 randoms$uCI <- randoms$mean + randoms$sd * 1.96
 randoms$sig <- (randoms$uCI < 0 | randoms$lCI > 0)
# 
 count(randoms, sig)$n/nrow(randoms)

```

### Young-of-year fish
```{r}
ggplot(cdWB_wandingTribs3, aes(moveRate, linetype = species)) +
  geom_freqpoly() +
  scale_x_continuous("Movement rate (m/week)") +
  scale_y_continuous("Frequency") +
  #theme_bw(base_size=25)+
  facet_grid(month ~ yoy + river)

```

## West Brook
  
Did not filter by moveTime > 1 because there were within-day samples in the WB (in contrast to the tribs)

### West brook wanding data  
Calculate and plot movement
```{r}
#| cache: true
# Loop over species
for (s in unique(cdWB_wanding$species)) {
  tmp <-
    ggplot(filter(cdWB_wanding, river == "west brook" & species==s & aliveOrDead != 'dead'), 
           aes(detectionDate,sectionWQuarter, color = tag))+
    geom_point(size=2)+
    geom_line() +
    scale_y_continuous(limits = c(30,35))+
    theme(legend.position = "none")+
    ggtitle(paste("WB", s, "not dead")) +
    facet_wrap(~ year, scales = 'free')
  print(tmp)
}
```

### Movement
```{r}
#| label: wb
#| cache: true

table(cdWB_wandingWB3$species, cdWB_wandingWB3$month, cdWB_wandingWB3$river, cdWB_wandingWB3$year)
# 
# # raw
 ggplot(cdWB_wandingWB3, aes(j, sectionWQuarter, color = tag)) +
   geom_point()+
   geom_line() +
   #  scale_y_continuous(limits=c(0,50))+
   theme(legend.position="none")+
   ggtitle("Not dead") +
   facet_grid(river~year)

 ggplot(cdWB_wandingWB3, aes(moveRate, color = species)) +
   geom_freqpoly() +
   facet_grid(river ~ year)

 ggplot(cdWB_wandingWB3, aes(moveRate, linetype=species)) +
   geom_freqpoly(binwidth = 5, boundary = min(cdWB_wandingWB3$moveRate, na.rm=T)) +
   scale_x_continuous("Movement rate (m/week)") +
   scale_y_continuous("Frequency") +
   theme_bw(base_size=25)+
   theme( strip.background = element_blank()
          #strip.text = element_blank(),
          #legend.position = "none"
          ) 
# #ats is solid line

# 
```

### Random effects models
```{r}
#| label: RE model for individual movement variation WB
 
  mod0WB <- lmer( abs(moveRate) ~ (1|tag), data=cdWB_wandingWB3 )
  ####
  mod1WB <- lmer( abs(moveRate) ~ factor(species) + (1|tag), data=cdWB_wandingWB3 )
  ####
  mod2WB <- lmer( abs(moveRate) ~ factor(species) * factor(month) + (1|tag), data=cdWB_wandingWB3 )
  ####
  mod3WB <- lmer( abs(moveRate) ~ factor(species) + factor(month) + factor(year) + (1|tag), data=cdWB_wandingWB3 )
 
 
  AIC(mod0WB,mod1WB,mod2WB,mod3WB) %>% arrange(AIC)
 
  summary(mod2WB)
 
  randomsWB <- REsim(mod2WB, n.sims = 1000)
  plotREsim(randomsWB)
  

  ggplot(randomsWB, aes(mean)) +
    geom_histogram(binwidth = 4.75, boundary = min(randomsWB$mean)) +
    scale_x_continuous("Indivdual random effect for movement rate (m/week)") +
    scale_y_continuous("Frequency") +
    theme_bw(base_size = 25)

  # % of fish with CI that don't overlap 0
  randomsWB$lCI <- randomsWB$mean - randomsWB$sd * 1.96
  randomsWB$uCI <- randomsWB$mean + randomsWB$sd * 1.96
  randomsWB$sig <- (randomsWB$uCI < 0 | randomsWB$lCI > 0)
  
  count(randomsWB,sig)$n/nrow(randomsWB)

```

