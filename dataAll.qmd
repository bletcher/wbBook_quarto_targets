---
title: "All fish data"
format:
  html:
    toc: false
    echo: false
    keep-hidden: false
    code-tools: true
---

Note: need to do a full book render to get OJS functionality.

## Merge All data

```{r}
#| label: dataAllOptions
#| include: false
knitr::opts_chunk$set(message = FALSE, warning = FALSE)
```

```{r}
#| label: librariesdataAll
#| echo: false
#| cache: false

#library(devtools)
#options(download.file.method = "wininet") or turn off VPN
#devtools::install_github('Conte-Ecology/westBrookData/getWBData')
library(tidyverse)
library(lubridate)
library(validate)
library(targets)


# devtools::install_github('bletcher/getPrepareWBData')
# use this if command above doesn't work: options(download.file.method = "wininet")
#library(getPrepareWBData)
```

### Read merged data target
Variables in the `all data` dataset
```{r}
#| label: dataAll
#| cache: false

all <- tar_read(cdWB_all)
  
str(all)
#ojs_define(allOJS0 = all) can't use whole dataset, html file gets too big

# Save rData file for downloading
# save(all, file = "C:/Users/bletcher/OneDrive - DOI/projects/wbBook_quarto_targets/data/outForDownload/cdWB_all.RData")

```

```{r}
#| cache: false

tags <- all %>%
  group_by(tag) %>%
  summarize(n = n()) %>%
  #arrange(desc(n)) %>%
  filter(!is.na(tag))

all <- all %>% 
  left_join(tags)

allGT1500 <- all %>%
  filter(n > 1500, n < 15000)


ojs_define(allOJS0 = allGT1500)
```

```{r}

# allTop10 <- all %>%
#   filter(tag %in% tags10$tag) %>%
#   select(tag, detectionDate, river, section, observedLength)
#   
#   
# ojs_define(allOJS = allTop10)
```

```{ojs}
allOJS = transpose(allOJS0)

tags = tidy(allOJS, groupBy("tag", [summarize({ n: n() })]), arrange([desc("n")]))
```

```{ojs}
//| panel: input

viewof selectTag = Inputs.select(
  tags.map((d) => d.tag),
  {
    //value: "1bf20ebcae",
    label: "Tags:",
    multiple: true
  }
)

```

Facet by river, symbol identifies survey type
```{ojs}

tagsToPlot = allOJS.filter((d) => selectTag.includes(d.tag))


tagsOverTime = Plot.plot({
  marks: [
    Plot.dot(tagsToPlot, { x: "detectionDate", y: "section", stroke: "tag", symbol: "survey" }),
    Plot.line(tagsToPlot, { x: "detectionDate", y: "section", stroke: "tag" })
  ],
  facet: {
    data: tagsToPlot, x: "river"
  },
  // Include a legend for the color channel 
  color: {
    legend: true,
  },
  symbol: {
    legend: true
  }
})
```

One panel, symbol identifies river
```{ojs}
tagsOverTimeRiver = Plot.plot({
  marks: [
    Plot.dot(tagsToPlot, {
      x: "detectionDate",
      y: "section",
      stroke: "tag",
      symbol: "river"
    }),
    Plot.line(tagsToPlot, { x: "detectionDate", y: "section", stroke: "tag" })
  ],
  // Include a legend for the color channel
  color: {
    legend: true
  },
    symbol: {
    legend: true
  }
})
```


```{ojs}
selectTag
tagsToPlot
allOJS
```


```{ojs}
import {tidy, max, nDistinct, groupBy, mutate, filter, summarize, first, last, distinct, count, n, arrange, mutateWithSummary, desc, debug, sum, slice, mean, deviation, variance, meanRate, median, min, total, sliceMax, innerJoin, leftJoin, pivotLonger, pivotWider, select, rename, complete, contains, when} from "@pbeshai/tidyjs"

```

