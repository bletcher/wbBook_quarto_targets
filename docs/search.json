[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The West Brook story",
    "section": "",
    "text": "The Ecology Section at the USGS Conte Laboratory has studied fish in the West Brook (MA, USA) since 1997. The goal is to understand the strength and direction of drivers on fish growth, movement, reproduction and survival in a small stream network. We hope to provide a comprehensive understanding of fish population dynamics and ultimately individual fitness (natural selection and evolution) in the study area.\nSee below or here for interactive applications to explore the raw data.\n\n\n\n\nData extraction and manipulation and models are run using targets from the R package targets. Run the following code to rebuild all the targets.\nlibrary(targets) library(quarto)\ntar_make()\nRun this code to rebuild the book.\nquarto::quarto_render(output_format = \"html\")\n\n\n\nThere are four locations within the study area. Here are the primary names and aliases:\n\n\nTable 1: River names and aliases\n\n\nPrimary name\nAlias\nAlias-long\nRiver #\n\n\n\n\nWest Brook\nWB\nWest Brook\n1\n\n\nJimmy Brook\nOL\nOpen Large\n2\n\n\nMitchell Brook\nOS\nOpen Small\n3\n\n\nOBear Brook\nIL\nIsolated Large\n4\n\n\n\n\n\n\nCode\n#if/when .qmd's are in quarto subdir\n#tar_config_set(store = \"../_targets\")"
  },
  {
    "objectID": "01-vizTargets.html",
    "href": "01-vizTargets.html",
    "title": "1  Visualize targets",
    "section": "",
    "text": "Data processing and model running is controlled by targets. Targets are only re-run if the upstream data source changes\n\n\nCode\nlibrary(targets)\nlibrary(tarchetypes)\nlibrary(visNetwork)\n\n\nVisualize the targets network\n\n\nCode\ntar_visnetwork()\n\n\n[1] \"loading .Rprofile\"\nLoading required package: dplyr\n\nAttaching package: 'dplyr'\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nLoading required package: DBI\nLoading required package: RPostgres\n\fWarning messages:\n1: package 'targets' was built under R version 4.2.1 \n2: package 'tarchetypes' was built under R version 4.2.1 \n3: package 'dplyr' was built under R version 4.2.1 \n4: package 'DBI' was built under R version 4.2.1 \n5: package 'RPostgres' was built under R version 4.2.1 \n6: In result_fetch(res@ptr, n = n) :\n  Don't need to call dbFetch() for statements, only for queries"
  },
  {
    "objectID": "02-getData.html",
    "href": "02-getData.html",
    "title": "2  Get data info",
    "section": "",
    "text": "The database is now (as of 6/14/2022) on AWS. It can be accessed using functions in the ‘getWBData’ R package. Use devtools::install_github('Conte-Ecology/westBrookData/getWBData') (with VPN off) to install. Most of the functions will run reconnect() to connect to the server with your username and password (which you won’t need if you have set up a .Rprofile file).\nRun reconnect() from the console to connect if necessary. Use DBI::dbListTables(con) to see the list of available tables on the server. Details about the ‘getWBData’ package are here."
  },
  {
    "objectID": "02-getData.html#databases",
    "href": "02-getData.html#databases",
    "title": "2  Get data info",
    "section": "2.1 Databases",
    "text": "2.1 Databases\nWe have two types of databases: Environmental and fish\nThe environmental database contains daily mean temperature and flow data. Flow data are from a flow extension model and are not tributary-specific. Temperature data are from tributary-specific loggers.\nThere are four main fish databases we want to create:\n1. cdWB_electro West Brook electrofishing data, 3 species (brook trout, brown trout and Atlantic salmon), tagged and untagged fish\n2. cdWB_CMR West Brook electrofishing data formatted for Capture-Mark-Recapture (CMR) analysis for tagged individuals\n3. cdWB_wanding West Brook wanding (portable antenna) data, all tagged salmonids\n4. cdWB_antenna West Brook stationary antenna data, all tagged salmonids\n“cd” stands for “core data”."
  },
  {
    "objectID": "03-getDataEnv.html",
    "href": "03-getDataEnv.html",
    "title": "3  Get environmental data",
    "section": "",
    "text": "Data are generated in R/getDataEnv-targets.R file"
  },
  {
    "objectID": "03-getDataEnv.html#get-environmental-data-target-and-show-data-frame-structure",
    "href": "03-getDataEnv.html#get-environmental-data-target-and-show-data-frame-structure",
    "title": "3  Get environmental data",
    "section": "3.1 Get environmental data target and show data frame structure",
    "text": "3.1 Get environmental data target and show data frame structure\n\n\nCode\nenvDataWB <- tar_read(envDataWB_Target)\nstr(envDataWB)\n\n\ntibble [32,189 × 9] (S3: tbl_df/tbl/data.frame)\n $ river         : chr [1:32189] \"wb jimmy\" \"wb jimmy\" \"wb jimmy\" \"wb jimmy\" ...\n $ date          : POSIXct[1:32189], format: \"1997-05-14 04:00:00\" \"1997-05-15 04:00:00\" ...\n $ temperature   : num [1:32189] 11.57 10.4 10.55 8.84 9.09 ...\n $ daily_max_temp: num [1:32189] 11.6 12.3 11.9 10.2 11.6 ...\n $ daily_min_temp: num [1:32189] 11.57 8.96 9.73 7.74 7.45 ...\n $ flow          : num [1:32189] NA NA NA NA NA NA NA NA NA NA ...\n $ dateDate      : Date[1:32189], format: \"1997-05-14\" \"1997-05-15\" ...\n $ yday          : int [1:32189] 134 135 136 137 138 139 140 141 142 143 ...\n $ riverOrdered  : Ord.factor w/ 4 levels \"West Brook\"<\"WB Jimmy\"<..: 2 2 2 2 2 2 2 2 2 2 ..."
  },
  {
    "objectID": "03-getDataEnv.html#plot-flow-over-time-for-the-west-brook-by-year",
    "href": "03-getDataEnv.html#plot-flow-over-time-for-the-west-brook-by-year",
    "title": "3  Get environmental data",
    "section": "3.2 Plot flow over time for the West Brook by year",
    "text": "3.2 Plot flow over time for the West Brook by year\n\n\nCode\nggplot(envDataWB, aes(yday, flow)) +\n  geom_point(size = 0.1) + \n  #geom_line() +\n  scale_x_continuous(\"Day of year\") +\n  scale_y_continuous(\"Stream flow (m^3/s)\") +\n  facet_wrap(~year(date))\n\n\n\n\n\nFigure 3.1: Stream flow (m3/s) for the West Brook\n\n\n\n\nTest: referring to Figure 3.1."
  },
  {
    "objectID": "03-getDataEnv.html#plot-temperature-over-time-for-each-tributary",
    "href": "03-getDataEnv.html#plot-temperature-over-time-for-each-tributary",
    "title": "3  Get environmental data",
    "section": "3.3 Plot temperature over time for each tributary",
    "text": "3.3 Plot temperature over time for each tributary\n\n\nCode\nggplot(envDataWB, aes(date, temperature)) +\n  geom_point(size = 0.2) +\n  scale_x_continuous(\"Day of year\") +\n  scale_y_continuous(\"Stream temperature (C)\") +\n  facet_wrap(~river)\n\n\n\n\n\nFigure 3.2: Stream temperature (C) by river"
  },
  {
    "objectID": "04-getDataElectro.html",
    "href": "04-getDataElectro.html",
    "title": "4  Get electrofishing data",
    "section": "",
    "text": "Data are generated in R/getDataElectro-targets.R file"
  },
  {
    "objectID": "04-getDataElectro.html#get-electrofishing-data-target",
    "href": "04-getDataElectro.html#get-electrofishing-data-target",
    "title": "4  Get electrofishing data",
    "section": "4.1 Get electrofishing data target",
    "text": "4.1 Get electrofishing data target\n\n\nCode\ncdWB_electro <- tar_read(cdWB_electro_target)\nstr(cdWB_electro)\n\n\ntibble [91,103 × 45] (S3: tbl_df/tbl/data.frame)\n $ tag                   : chr [1:91103] \"00088cbed0\" \"00088cbed3\" \"00088cbed4\" \"00088cbed4\" ...\n $ detectionDate         : POSIXct[1:91103], format: \"2013-03-25 04:00:00\" \"2012-06-07 13:03:00\" ...\n $ sampleName            : chr [1:91103] \"84\" \"81\" \"84\" \"85\" ...\n $ sampleNumber          : num [1:91103] 73 70 73 74 70 71 73 79 80 71 ...\n $ river                 : chr [1:91103] \"wb obear\" \"west brook\" \"west brook\" \"west brook\" ...\n $ section               : num [1:91103] 7 1 40 44 25 32 32 3 3 23 ...\n $ area                  : chr [1:91103] \"trib\" \"inside\" \"inside\" \"inside\" ...\n $ observedLength        : num [1:91103] 62 62 109 154 113 120 147 70 74 86 ...\n $ survey                : chr [1:91103] \"shock\" \"shock\" \"shock\" \"shock\" ...\n $ pass                  : num [1:91103] 1 1 1 1 1 1 1 1 1 1 ...\n $ observedWeight        : num [1:91103] 1.9 2.7 12.6 41.3 15.5 18.3 30.4 3.5 4.8 6.7 ...\n $ comments              : chr [1:91103] \"additional genetic sample\" NA NA NA ...\n $ cohort                : num [1:91103] 2012 2012 2012 2012 2011 ...\n $ species               : chr [1:91103] \"bkt\" \"bkt\" \"bkt\" \"bkt\" ...\n $ dateEmigrated         : Date[1:91103], format: NA NA ...\n $ sex                   : chr [1:91103] NA NA NA NA ...\n $ year                  : int [1:91103] 2013 2012 2013 2013 2012 2012 2013 2014 2014 2012 ...\n $ season                : num [1:91103] 1 2 1 2 2 3 1 3 4 3 ...\n $ proportionSampled     : num [1:91103] 1 1 1 1 1 1 1 1 1 1 ...\n $ lagDetectionDate      : POSIXct[1:91103], format: NA NA ...\n $ meanTemperature       : num [1:91103] NaN NaN 10.7 NaN 16.5 ...\n $ meanFlow              : num [1:91103] NaN NaN 0.5247 NaN 0.0338 ...\n $ riverOrdered          : Ord.factor w/ 4 levels \"west brook\"<\"wb jimmy\"<..: 4 1 1 1 1 1 1 4 4 1 ...\n $ sectionOriginal       : chr [1:91103] \"7\" \"1\" \"40\" \"44\" ...\n $ inside                : logi [1:91103] TRUE TRUE TRUE TRUE TRUE TRUE ...\n $ yday                  : int [1:91103] 84 159 88 176 160 271 87 260 335 270 ...\n $ ageInSamples          : num [1:91103] 3 0 3 4 4 5 7 1 2 1 ...\n $ isYOY                 : logi [1:91103] TRUE TRUE TRUE FALSE FALSE FALSE ...\n $ lagSection            : num [1:91103] NA NA 44 NA 32 32 NA 3 NA 24 ...\n $ distMoved             : num [1:91103] NA NA -4 NA -7 0 NA 0 NA -1 ...\n $ lagObservedWeight     : num [1:91103] NA NA 41.3 NA 18.3 30.4 NA 4.8 NA 12.7 ...\n $ lagObservedLength     : num [1:91103] NA NA 154 NA 120 147 NA 74 NA 108 ...\n $ grWeight              : num [1:91103] NA NA 3.30e+10 NA 1.48e-01 ...\n $ grLength              : num [1:91103] NA NA 0.5102 NA 0.0631 ...\n $ minSample             : num [1:91103] 73 70 73 73 70 70 70 79 79 71 ...\n $ maxSample             : num [1:91103] 73 70 74 74 73 73 73 80 80 74 ...\n $ minYear               : num [1:91103] 1997 1997 1997 1997 1997 ...\n $ moveDir               : num [1:91103] NA NA -1 NA -1 0 NA 0 NA -1 ...\n $ sampleInterval        : num [1:91103] NA NA 88.2 NA 110.9 ...\n $ drainage              : chr [1:91103] \"west\" \"west\" \"west\" \"west\" ...\n $ quarter_length        : num [1:91103] 5 5.2 5.03 4.83 4.75 ...\n $ river_meter           : num [1:91103] 5252 4394 5208 5292 4903 ...\n $ confluence_river_meter: num [1:91103] 5114 0 0 0 0 ...\n $ riverMeter            : num [1:91103] 5252 4394 5208 5292 4903 ...\n $ nPasses               : num [1:91103] 1 2 1 2 2 2 1 1 1 2 ..."
  },
  {
    "objectID": "04-getDataElectro.html#length-weight-graph",
    "href": "04-getDataElectro.html#length-weight-graph",
    "title": "4  Get electrofishing data",
    "section": "4.2 Length-weight graph",
    "text": "4.2 Length-weight graph\n\n\nCode\nggplot(cdWB_electro, aes(observedLength, observedWeight, color = species)) +\n  geom_point(size = 0.75, alpha = 0.1) +\n  scale_x_log10(\"Length (mm)\") +\n  scale_y_log10(\"Mass (mg)\") +\n#  theme_publication() +\n  facet_wrap(~ species)\n\n\n\n\n\nFigure 4.1: Length - mass graph"
  },
  {
    "objectID": "04-getDataElectro.html#length-weight-regression",
    "href": "04-getDataElectro.html#length-weight-regression",
    "title": "4  Get electrofishing data",
    "section": "4.3 Length-weight regression",
    "text": "4.3 Length-weight regression\n\n\nCode\nlwReg <- cdWB_electro %>%\n  nest_by(species) %>%\n  mutate(reg = list(lm(log(observedWeight) ~ log(observedLength), data = data)))\n\nlwReg %>% summarise(broom::tidy(reg))  \n\n\n# A tibble: 6 × 6\n# Groups:   species [3]\n  species term                estimate std.error statistic p.value\n  <chr>   <chr>                  <dbl>     <dbl>     <dbl>   <dbl>\n1 ats     (Intercept)           -11.4    0.00942    -1210.       0\n2 ats     log(observedLength)     3.00   0.00208     1442.       0\n3 bkt     (Intercept)           -11.5    0.00621    -1859.       0\n4 bkt     log(observedLength)     3.02   0.00140     2155.       0\n5 bnt     (Intercept)           -11.5    0.00686    -1670.       0\n6 bnt     log(observedLength)     3.01   0.00149     2023.       0\n\n\nCode\nlwReg %>% summarise(broom::glance(reg))\n\n\n# A tibble: 3 × 13\n# Groups:   species [3]\n  species r.squared adj.r.…¹  sigma stati…² p.value    df logLik     AIC     BIC\n  <chr>       <dbl>    <dbl>  <dbl>   <dbl>   <dbl> <dbl>  <dbl>   <dbl>   <dbl>\n1 ats         0.989    0.989 0.0945  2.08e6       0     1 22663. -45319. -45295.\n2 bkt         0.991    0.991 0.112   4.64e6       0     1 32555. -65105. -65079.\n3 bnt         0.996    0.996 0.0858  4.09e6       0     1 18345. -36683. -36660.\n# … with 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>, and\n#   abbreviated variable names ¹​adj.r.squared, ²​statistic\n# ℹ Use `colnames()` to see all variable names"
  },
  {
    "objectID": "05-getDataCMR.html",
    "href": "05-getDataCMR.html",
    "title": "5  Create Capture-Recapture data",
    "section": "",
    "text": "Data are generated in R/getDataCMR-targets.R file"
  },
  {
    "objectID": "05-getDataCMR.html#get-electrofishing-data-target-wb",
    "href": "05-getDataCMR.html#get-electrofishing-data-target-wb",
    "title": "5  Create Capture-Recapture data",
    "section": "5.1 Get electrofishing data target WB",
    "text": "5.1 Get electrofishing data target WB\nWest brook and 3 tributaries\n\n\nCode\ncdWB_CMR0_WB <- tar_read(eh_WB_2002_2014_target)\nstr(cdWB_CMR0_WB)\n\n\nList of 14\n $ eh         : num [1:19981, 1:12] 1 1 1 1 1 1 1 1 1 1 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:12] \"ais_1\" \"ais_2\" \"ais_3\" \"ais_4\" ...\n $ flow       : num [1:19981, 1:12] -0.707 -0.679 -0.556 -0.767 -0.531 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:12] \"ais_1\" \"ais_2\" \"ais_3\" \"ais_4\" ...\n $ temperature: num [1:19981, 1:12] 0.0892 -0.324 0.3839 -0.3903 0.298 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:12] \"ais_1\" \"ais_2\" \"ais_3\" \"ais_4\" ...\n $ river      : chr [1:19981, 1:12] \"wb obear\" \"west brook\" \"west brook\" \"wb obear\" ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:12] \"ais_1\" \"ais_2\" \"ais_3\" \"ais_4\" ...\n $ section    : num [1:19981, 1:12] 82 23 30 87 42 20 84 90 27 51 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:12] \"ais_1\" \"ais_2\" \"ais_3\" \"ais_4\" ...\n $ riverN     : num [1:19981, 1:12] 4 1 1 4 1 1 4 4 1 2 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:12] \"ais_1\" \"ais_2\" \"ais_3\" \"ais_4\" ...\n $ isYOY      : num [1:19981, 1:12] 1 1 1 1 1 1 1 1 1 1 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:12] \"ais_1\" \"ais_2\" \"ais_3\" \"ais_4\" ...\n $ tags       : tibble [19,981 × 1] (S3: tbl_df/tbl/data.frame)\n  ..$ tag: chr [1:19981] \"00088cbed7\" \"00088cbed8\" \"00088cbedb\" \"00088cbedd\" ...\n $ cohorts    : tibble [19,981 × 1] (S3: tbl_df/tbl/data.frame)\n  ..$ cohort: num [1:19981] 2014 2012 2014 2012 2014 ...\n $ seasons    : tibble [79,133 × 1] (S3: tbl_df/tbl/data.frame)\n  ..$ season: num [1:79133] 3 4 1 2 3 4 1 2 3 4 ...\n $ species    : tibble [19,981 × 1] (S3: tbl_df/tbl/data.frame)\n  ..$ species: chr [1:19981] \"bkt\" \"bnt\" \"bkt\" \"bkt\" ...\n $ first      : int [1:19981] 1 1 1 1 1 1 1 1 1 1 ...\n $ last       : num [1:19981] 4 12 4 12 4 12 12 4 12 4 ...\n $ data       : tibble [199,614 × 43] (S3: tbl_df/tbl/data.frame)\n  ..$ cohort               : num [1:199614] 2012 2012 2012 2012 2012 ...\n  ..$ tag                  : chr [1:199614] \"00088cbed0\" \"00088cbed0\" \"00088cbed0\" \"00088cbed0\" ...\n  ..$ detectionDate        : POSIXct[1:199614], format: \"2013-03-25 04:00:00\" \"2013-06-05 04:00:00\" ...\n  ..$ sampleName           : chr [1:199614] \"84\" \"85\" \"86\" \"87\" ...\n  ..$ sampleNumber         : num [1:199614] 73 74 75 76 77 78 79 80 81 82 ...\n  ..$ river                : chr [1:199614] \"wb obear\" \"wb obear\" \"wb obear\" \"wb obear\" ...\n  ..$ section              : chr [1:199614] \"7\" NA NA NA ...\n  ..$ area                 : chr [1:199614] \"trib\" NA NA NA ...\n  ..$ observedLength       : num [1:199614] 62 NA NA NA NA NA NA NA NA NA ...\n  ..$ survey               : chr [1:199614] \"shock\" NA NA NA ...\n  ..$ pass                 : num [1:199614] 1 NA NA NA NA NA NA NA NA NA ...\n  ..$ observedWeight       : num [1:199614] 1.9 NA NA NA NA NA NA NA NA NA ...\n  ..$ species              : chr [1:199614] \"bkt\" \"bkt\" \"bkt\" \"bkt\" ...\n  ..$ dateEmigrated        : Date[1:199614], format: NA NA ...\n  ..$ sex                  : chr [1:199614] NA NA NA NA ...\n  ..$ enc                  : num [1:199614] 1 0 0 0 0 0 0 0 0 0 ...\n  ..$ ageInSamples         : num [1:199614] 3 4 5 6 7 8 9 10 11 12 ...\n  ..$ sampleIndex          : num [1:199614] 63 64 65 66 67 68 69 70 71 72 ...\n  ..$ tagIndex             : num [1:199614] 1 1 1 1 1 1 1 1 1 1 ...\n  ..$ year                 : num [1:199614] 2013 2013 2013 2013 2014 ...\n  ..$ season               : num [1:199614] 1 2 3 4 1 2 3 4 1 2 ...\n  ..$ proportionSampled    : num [1:199614] 1 NA NA NA NA NA NA NA NA NA ...\n  ..$ lagDetectionDate     : POSIXct[1:199614], format: \"2013-06-05 04:00:00\" \"2013-09-18 04:00:00\" ...\n  ..$ meanTemperature      : num [1:199614] 8.62 16.51 9.44 0.94 10.52 ...\n  ..$ meanFlow             : num [1:199614] 0.38874 0.30331 0.00882 0.31319 0.58363 ...\n  ..$ knownZ               : num [1:199614] 1 NA NA NA NA NA NA NA NA NA ...\n  ..$ firstObserved        : num [1:199614] 73 73 73 73 73 73 73 73 73 73 ...\n  ..$ lastObserved         : num [1:199614] 73 73 73 73 73 73 73 73 73 73 ...\n  ..$ isFirstObserved      : logi [1:199614] TRUE FALSE FALSE FALSE FALSE FALSE ...\n  ..$ isLastObserved       : logi [1:199614] TRUE FALSE FALSE FALSE FALSE FALSE ...\n  ..$ riverTagged          : chr [1:199614] \"wb obear\" \"wb obear\" \"wb obear\" \"wb obear\" ...\n  ..$ meanMeanFlow         : num [1:199614] 0.409 0.137 0.307 0.464 0.409 ...\n  ..$ sdMeanFlow           : num [1:199614] 0.155 0.126 0.246 0.113 0.155 ...\n  ..$ meanMeanTemperature  : num [1:199614] 10.39 16.23 8.42 1.65 10.39 ...\n  ..$ sdMeanTemperature    : num [1:199614] 1.202 0.711 1.455 0.616 1.202 ...\n  ..$ meanFlowScaled       : num [1:199614] -0.129 1.313 -1.215 -1.33 1.124 ...\n  ..$ meanTemperatureScaled: num [1:199614] -1.472 0.402 0.7 -1.149 0.105 ...\n  ..$ isYOY                : num [1:199614] 1 2 2 2 2 2 2 2 2 2 ...\n  ..$ riverN               : num [1:199614] 4 4 4 4 4 4 4 4 4 4 ...\n  ..$ riverOrdered         : Ord.factor w/ 4 levels \"West Brook\"<\"WB Jimmy\"<..: 4 4 4 4 4 4 4 4 4 4 ...\n  ..$ indexByCohort        : int [1:199614] 1 1 1 1 1 1 1 1 1 1 ...\n  ..$ sectionTMP           : chr [1:199614] \"7\" NA NA NA ...\n  ..$ sectionRiverN        : num [1:199614] 86 NA NA NA NA NA NA NA NA NA ...\n\n\n\n\nCode\ncdWB_CMR0_WB$data %>% \n  group_by(riverOrdered, cohort) %>% \n  summarize(n = n()) %>%\n  pivot_wider(values_from = \"n\", names_from = \"riverOrdered\") %>%\n  kable() %>%\n  kable_styling(full_width = T)\n\n\n\n\nTable 5.1:  Count of CMR data (including 0’s) by river \n \n  \n    cohort \n    West Brook \n    WB Jimmy \n    WB Mitchell \n    WB OBear \n  \n \n\n  \n    2002 \n    13023 \n    1440 \n    626 \n    2139 \n  \n  \n    2003 \n    24489 \n    2396 \n    444 \n    2747 \n  \n  \n    2004 \n    24963 \n    3637 \n    2707 \n    1666 \n  \n  \n    2005 \n    5471 \n    943 \n    1003 \n    723 \n  \n  \n    2006 \n    6797 \n    1973 \n    533 \n    1322 \n  \n  \n    2007 \n    3958 \n    1530 \n    1068 \n    968 \n  \n  \n    2008 \n    8668 \n    1424 \n    131 \n    886 \n  \n  \n    2009 \n    18696 \n    3497 \n    1889 \n    5081 \n  \n  \n    2010 \n    7693 \n    689 \n    281 \n    453 \n  \n  \n    2011 \n    2202 \n    1792 \n    395 \n    394 \n  \n  \n    2012 \n    16663 \n    2377 \n    1721 \n    5305 \n  \n  \n    2013 \n    4999 \n    1246 \n    304 \n    729 \n  \n  \n    2014 \n    3853 \n    528 \n    427 \n    725 \n  \n\n\n\n\n\n\n\n\nCode\ncdWB_CMR0_WB$data %>% \n  filter(enc == 1) %>% \n  group_by(riverOrdered, cohort) %>% \n  summarize(n = n()) %>%\n  pivot_wider(values_from = \"n\", names_from = \"riverOrdered\") %>%\n  kable() %>%\n  kable_styling(full_width = T)\n\n\n\n\nTable 5.2:  Count of CMR data (encounters only) by river \n \n  \n    cohort \n    West Brook \n    WB Jimmy \n    WB Mitchell \n    WB OBear \n  \n \n\n  \n    2002 \n    2974 \n    379 \n    209 \n    564 \n  \n  \n    2003 \n    4932 \n    491 \n    142 \n    709 \n  \n  \n    2004 \n    5140 \n    734 \n    638 \n    426 \n  \n  \n    2005 \n    939 \n    216 \n    204 \n    163 \n  \n  \n    2006 \n    1350 \n    379 \n    77 \n    278 \n  \n  \n    2007 \n    882 \n    318 \n    273 \n    228 \n  \n  \n    2008 \n    1606 \n    273 \n    33 \n    193 \n  \n  \n    2009 \n    3375 \n    569 \n    403 \n    1075 \n  \n  \n    2010 \n    1294 \n    164 \n    73 \n    99 \n  \n  \n    2011 \n    470 \n    426 \n    71 \n    104 \n  \n  \n    2012 \n    2731 \n    490 \n    282 \n    1196 \n  \n  \n    2013 \n    1184 \n    433 \n    99 \n    216 \n  \n  \n    2014 \n    1431 \n    248 \n    236 \n    395"
  },
  {
    "objectID": "05-getDataCMR.html#get-electrofishing-data-target-ob",
    "href": "05-getDataCMR.html#get-electrofishing-data-target-ob",
    "title": "5  Create Capture-Recapture data",
    "section": "5.2 Get electrofishing data target OB",
    "text": "5.2 Get electrofishing data target OB\nO’Bear also known asl Isolated Large\n\n\nCode\ncdWB_CMR0_OB <- tar_read(eh_OB_2002_2014_target)\n\n\n\n\nCode\ncdWB_CMR0_OB$data %>% \n  group_by(riverOrdered, cohort) %>% \n  summarize(n = n()) %>%\n  pivot_wider(values_from = \"n\", names_from = \"riverOrdered\") %>%\n  kable() %>%\n  kable_styling(full_width = T)\n\n\n\n\nTable 5.3:  Count of CMR data (including 0’s) by river \n \n  \n    cohort \n    West Brook \n    WB Jimmy \n    WB Mitchell \n    WB OBear \n  \n \n\n  \n    2002 \n    13023 \n    1440 \n    626 \n    2139 \n  \n  \n    2003 \n    24489 \n    2396 \n    444 \n    2747 \n  \n  \n    2004 \n    24963 \n    3637 \n    2707 \n    1666 \n  \n  \n    2005 \n    5471 \n    943 \n    1003 \n    723 \n  \n  \n    2006 \n    6797 \n    1973 \n    533 \n    1322 \n  \n  \n    2007 \n    3958 \n    1530 \n    1068 \n    968 \n  \n  \n    2008 \n    8668 \n    1424 \n    131 \n    886 \n  \n  \n    2009 \n    18696 \n    3497 \n    1889 \n    5081 \n  \n  \n    2010 \n    7693 \n    689 \n    281 \n    453 \n  \n  \n    2011 \n    2202 \n    1792 \n    395 \n    394 \n  \n  \n    2012 \n    16663 \n    2377 \n    1721 \n    5305 \n  \n  \n    2013 \n    4999 \n    1246 \n    304 \n    729 \n  \n  \n    2014 \n    3853 \n    528 \n    427 \n    725 \n  \n\n\n\n\n\n\n\n\nCode\ncdWB_CMR0_OB$data %>% \n  filter(enc == 1) %>% \n  group_by(riverOrdered, cohort) %>% \n  summarize(n = n()) %>%\n  pivot_wider(values_from = \"n\", names_from = \"riverOrdered\") %>%\n  kable() %>%\n  kable_styling(full_width = T)\n\n\n\n\nTable 5.4:  Count of CMR data (encounters only) by river \n \n  \n    cohort \n    West Brook \n    WB Jimmy \n    WB Mitchell \n    WB OBear \n  \n \n\n  \n    2002 \n    2974 \n    379 \n    209 \n    564 \n  \n  \n    2003 \n    4932 \n    491 \n    142 \n    709 \n  \n  \n    2004 \n    5140 \n    734 \n    638 \n    426 \n  \n  \n    2005 \n    939 \n    216 \n    204 \n    163 \n  \n  \n    2006 \n    1350 \n    379 \n    77 \n    278 \n  \n  \n    2007 \n    882 \n    318 \n    273 \n    228 \n  \n  \n    2008 \n    1606 \n    273 \n    33 \n    193 \n  \n  \n    2009 \n    3375 \n    569 \n    403 \n    1075 \n  \n  \n    2010 \n    1294 \n    164 \n    73 \n    99 \n  \n  \n    2011 \n    470 \n    426 \n    71 \n    104 \n  \n  \n    2012 \n    2731 \n    490 \n    282 \n    1196 \n  \n  \n    2013 \n    1184 \n    433 \n    99 \n    216 \n  \n  \n    2014 \n    1431 \n    248 \n    236 \n    395"
  },
  {
    "objectID": "06-getDataWanding.html",
    "href": "06-getDataWanding.html",
    "title": "6  Get wanding data",
    "section": "",
    "text": "Data are generated in R/getDataWanding-targets.R file"
  },
  {
    "objectID": "06-getDataWanding.html#get-wanding-data-target",
    "href": "06-getDataWanding.html#get-wanding-data-target",
    "title": "6  Get wanding data",
    "section": "6.1 Get wanding data target",
    "text": "6.1 Get wanding data target\n\n\nCode\ncdWB_wanding0 <- tar_read(cdWB_wanding0_target)\nstr(cdWB_wanding0)\n\n\ntibble [14,880 × 20] (S3: tbl_df/tbl/data.frame)\n $ tag          : chr [1:14880] \"00088cf41b\" \"00088cf41b\" \"00088cf41b\" \"00088cf435\" ...\n $ detectionDate: POSIXct[1:14880], format: \"2010-09-27 15:08:45\" \"2010-10-18 18:16:22\" ...\n $ sampleName   : chr [1:14880] \"92710.00\" \"101810.00\" \"102510.00\" \"12610.00\" ...\n $ river        : chr [1:14880] \"wb jimmy\" \"wb jimmy\" \"wb jimmy\" \"wb jimmy\" ...\n $ section      : chr [1:14880] \"13\" \"14\" \"14\" \"2\" ...\n $ area         : chr [1:14880] \"trib\" \"trib\" \"trib\" \"trib\" ...\n $ survey       : chr [1:14880] \"portableAntenna\" \"portableAntenna\" \"portableAntenna\" \"portableAntenna\" ...\n $ readerId     : chr [1:14880] \"iso\" \"iso\" \"iso\" \"iso\" ...\n $ aliveOrDead  : chr [1:14880] \"alive\" \"alive\" NA \"alive\" ...\n $ instance     : num [1:14880] 1 2 3 1 1 1 2 1 1 1 ...\n $ pass         : num [1:14880] NA NA NA NA NA NA NA NA NA NA ...\n $ quarter      : num [1:14880] 2 1 NA 4 2 4 4 3 4 2 ...\n $ leftOrRight  : chr [1:14880] \"l\" \"m\" NA \"r\" ...\n $ habitat      : chr [1:14880] \"pool\" \"run\" NA \"pool\" ...\n $ cover        : chr [1:14880] NA NA NA NA ...\n $ justification: chr [1:14880] NA NA NA NA ...\n $ comment      : chr [1:14880] NA NA NA NA ...\n $ species      : chr [1:14880] \"bkt\" \"bkt\" \"bkt\" \"bkt\" ...\n $ cohort       : num [1:14880] 2010 2010 2010 2010 2009 ...\n $ riverOrdered : Ord.factor w/ 4 levels \"West Brook\"<\"WB Jimmy\"<..: 2 2 2 2 2 2 2 2 2 3 ...\n\n\n\n\nCode\ncdWB_wanding0 %>% \n  group_by(riverOrdered, cohort) %>% \n  summarize(n = n()) %>%\n  pivot_wider(values_from = \"n\", names_from = \"riverOrdered\") %>%\n  arrange(cohort) %>%\n  kable() %>%\n  kable_styling(full_width = T)\n\n\n\n\nTable 6.1:  Count of wanding data by river \n \n  \n    cohort \n    West Brook \n    WB Jimmy \n    WB Mitchell \n    WB OBear \n  \n \n\n  \n    1996 \n    4 \n    NA \n    NA \n    NA \n  \n  \n    1997 \n    9 \n    NA \n    NA \n    NA \n  \n  \n    1998 \n    33 \n    41 \n    4 \n    NA \n  \n  \n    1999 \n    141 \n    44 \n    2 \n    2 \n  \n  \n    2000 \n    352 \n    211 \n    116 \n    66 \n  \n  \n    2001 \n    1966 \n    1022 \n    414 \n    639 \n  \n  \n    2002 \n    2169 \n    615 \n    467 \n    894 \n  \n  \n    2003 \n    80 \n    650 \n    277 \n    1004 \n  \n  \n    2004 \n    195 \n    118 \n    298 \n    3 \n  \n  \n    2005 \n    61 \n    51 \n    90 \n    NA \n  \n  \n    2006 \n    NA \n    95 \n    126 \n    NA \n  \n  \n    2007 \n    NA \n    125 \n    256 \n    NA \n  \n  \n    2008 \n    NA \n    186 \n    41 \n    NA \n  \n  \n    2009 \n    NA \n    1089 \n    840 \n    NA \n  \n  \n    2010 \n    NA \n    50 \n    28 \n    NA \n  \n  \n    NA \n    6 \n    NA \n    NA \n    NA"
  },
  {
    "objectID": "07-getDataAntenna.html",
    "href": "07-getDataAntenna.html",
    "title": "7  Get antenna data",
    "section": "",
    "text": "Data are generated in R/getDataAntenna-targets.R file"
  },
  {
    "objectID": "07-getDataAntenna.html#get-antenna-data-target",
    "href": "07-getDataAntenna.html#get-antenna-data-target",
    "title": "7  Get antenna data",
    "section": "7.1 Get antenna data target",
    "text": "7.1 Get antenna data target\n\n\nCode\ncdWB_antenna0 <- tar_read(cdWB_antenna0_target)\nstr(cdWB_antenna0)\n\n\ntibble [410,915 × 11] (S3: tbl_df/tbl/data.frame)\n $ tag          : chr [1:410915] \"00088cbed9\" \"00088cbed9\" \"00088cbed9\" \"00088cbed9\" ...\n $ detectionDate: POSIXct[1:410915], format: \"2014-10-18 00:22:33\" \"2014-10-24 19:34:31\" ...\n $ river        : chr [1:410915] \"wb mitchell\" \"wb mitchell\" \"wb mitchell\" \"wb mitchell\" ...\n $ riverMeter   : num [1:410915] 4797 4797 4830 4830 5524 ...\n $ survey       : chr [1:410915] \"stationaryAntenna\" \"stationaryAntenna\" \"stationaryAntenna\" \"stationaryAntenna\" ...\n $ comment      : chr [1:410915] NA NA NA NA ...\n $ cohort       : num [1:410915] 2013 2013 2013 2013 2013 ...\n $ species      : chr [1:410915] \"bkt\" \"bkt\" \"bkt\" \"bkt\" ...\n $ dateEmigrated: Date[1:410915], format: \"2014-10-25\" \"2014-10-25\" ...\n $ sex          : chr [1:410915] NA NA NA NA ...\n $ riverOrdered : Ord.factor w/ 4 levels \"West Brook\"<\"WB Jimmy\"<..: 3 3 3 3 1 2 2 2 2 2 ..."
  },
  {
    "objectID": "08-modelYOY.html",
    "href": "08-modelYOY.html",
    "title": "8  Young-of-year size model",
    "section": "",
    "text": "The question here is what is driving body size variation across years in brook trout and brown trout in the WB?\nWe focus on ageInSamples == 1 (age-0 fish in the fall sample) fish for growth model. This is the first sampling occasion that most fish are big enough to tag. Not all fish are big enough, however, and there is a number of untagged fish each year. We need to include both tagged and untagged fish in our age-0 size model.\nFactors to include in the model are\n1. Sample date\n2. Cumulative temperature prior to sampling\n3. Cumulative flow prior to sampling\n4. Extreme flow events?? Floods, droughts?\n5. Fish density, age-0 counts across all three salmonids"
  },
  {
    "objectID": "08-modelYOY.html#raw-data-for-yoy-model",
    "href": "08-modelYOY.html#raw-data-for-yoy-model",
    "title": "8  Young-of-year size model",
    "section": "8.1 Raw data for YOY model",
    "text": "8.1 Raw data for YOY model\n\nEnvironmental data (flow, temperature) are from 1, 3, or 5 months prior to date of individual capture. Also can used fixed dates: assumed spawning dates, assumed emergence dates and actual observation (sample) dates.\nAll fish data are from age-0 in autumn.\nAbundance data."
  },
  {
    "objectID": "08-modelYOY.html#get-data-from-targets",
    "href": "08-modelYOY.html#get-data-from-targets",
    "title": "8  Young-of-year size model",
    "section": "8.2 Get data from targets",
    "text": "8.2 Get data from targets\nWest Brook environmental data (flow and temperature) and electrofishing data\n\n\nCode\nenvDataWB <- tar_read(envDataWB_target)\ncdWB_electro <- tar_read(cdWB_electro_target)"
  },
  {
    "objectID": "08-modelYOY.html#get-first-observations",
    "href": "08-modelYOY.html#get-first-observations",
    "title": "8  Young-of-year size model",
    "section": "8.3 Get first observations",
    "text": "8.3 Get first observations\n\nFilter cdWB_electro for first observations in the autumn for age-0 fish (ageInsamples == 1). Including both tagged and untagged fish.\n\n\n\nCode\nfirstObs_noTag <- tar_read(firstObs_noTag_target)\nfirstObs_tag <- tar_read(firstObs_tag_target)\nfirstObs0 <- tar_read(firstObs0_target)\n\n\nFor each date in firstObs0 that at least one fish was captured, calculate summary stats for flow and temperature for different time periods:\n1. Assumed spawning to capture\n2. Assumed spawning to assumed emergence\n3. Assumed emergence to capture\n4. One month preceding capture\n5. Three months preceding capture\n5. Five months preceding capture\nThen merge results with firstObs0 to create firstObs.\n\n\nCode\nfirstObsDates <- tar_read(firstObsDates_target) \n    \nfirstObs_Env <- tar_read(firstObs_Env_target)\n# merge env data into firstObs0\nfirstObs <- tar_read(firstObs_target)\n\n\nUnnest firstObs so environmental summary stats are available as data frame with the name of the time interval as the prefix to the statisticVariable name\n\n\nCode\nfirstObsUnnested <- tar_read(firstObsUnnested_target)\n\nggplot(firstObsUnnested, aes(oneMonth_sumTScaled, fiveMonth_sumTScaled)) +\n geom_point() +\n facet_wrap(~river)\n\n\n\n\n\n\n8.3.1 Counts of captured fish\nMin and max years (inclusive) for standardizing counts This is in targets, not sure if needed here\n\n\nCode\nminYear <- 2000\nmaxYear <- 2015\n\n\nCounts by river and species\n\n\nCode\ncountsRSY <- tar_read(countsRSY_target)\n\nggplot(countsRSY, aes(year, countRS_Scaled, color = species)) +\n  geom_point() +\n  geom_line() +\n  facet_wrap(~ river)\n\n\n\n\n\nCounts by river\n\n\nCode\ncountsRY <- tar_read(countsRY_target)\n\nggplot(countsRY, aes(year, countR_Scaled, color = river)) +\n  geom_point() +\n  geom_line()\n\n\n\n\n\nCounts for the metaPopulation (WB, Jimmy, Mitchell)\nUse these for modelling.\n\n\nCode\ncountsMetaY <- tar_read(countsMetaY_target)\n\nggplot(countsMetaY, aes(year, count_Scaled)) +\n  geom_point() +\n  geom_line()\n\n\n\n\n\nMerge metapopulation scaled counts into firstObsUnnested\n\n\nCode\nfirstObsUnnested <- tar_read(firstObsUnnested_target)\nfirstObsUnnestedWB <- tar_read(firstObsUnnestedWB_target)"
  },
  {
    "objectID": "08-modelYOY.html#raw-data-plots",
    "href": "08-modelYOY.html#raw-data-plots",
    "title": "8  Young-of-year size model",
    "section": "8.4 Raw data plots",
    "text": "8.4 Raw data plots\n\n8.4.1 Frequency plots by species and river\n\n\n8.4.2 Brook Trout, West brook\n\n\nCode\n  #cd1 <- cdWB_electro %>% filter(ageInSamples == 1, species != 'ats')\n\n  plotSppRiv = function(s, r) { \n    ggplot(firstObs %>% filter(species == s, river == r), aes(observedLength, color = is.na(tag))) +\n      geom_freqpoly() +\n      geom_vline(xintercept = 60) +\n      ggtitle(paste(s, r, sep = ', ')) +\n      xlim(c(30,125)) +\n      facet_wrap(~ year, scales = \"free_y\")\n  }\n  \n  species = 'bkt'\n  riverOrdered = \"west brook\"\n\n  plotSppRiv(species, riverOrdered)\n\n\n\n\n\n\n\n8.4.3 Brook Trout, wb jimmy\n\n\n\n\n\n\n\n8.4.4 Brook Trout, wb mitchell\n\n\n\n\n\n\n\n8.4.5 Brook Trout, wb obear\n\n\n\n\n\n\n\n8.4.6 Brown Trout, West brook\n\n\n\n\n\n\n\n8.4.7 Brown Trout, wb jimmy\n\n\n\n\n\n\n\n8.4.8 Brown Trout, wb mitchell\n\n\n\n\n\n\n\n8.4.9 Brown Trout, wb obear - there are no Brown trout in O’Bear\n\n\n8.4.10 Trout, in the WB mainstem only\n\n\nCode\n  ggplot(firstObs %>% filter(species != \"ats\"), aes(observedLength)) +\n    geom_freqpoly() +\n    geom_vline(xintercept = 60, color = 'orange') +\n    facet_grid(species ~ year)\n\n\n\n\n\nCode\n  ggplot(firstObs %>% filter(species != \"ats\"), aes(observedLength, color = is.na(tag))) +\n    geom_freqpoly() +\n    geom_vline(xintercept = 60, color = 'orange') +\n    facet_grid(species ~ year)\n\n\n\n\n\n\n\n8.4.11 Why are there untagged fish bigger than 60mm?\nCheck 2002/bkt/WB, as an example Answer: because they are outside the study area (area = ‘above’ or ‘below’) or were tagging mortalities\n\n\nCode\n  firstObs2002BKT <- firstObs %>% filter(year == 2002, species == \"bkt\")\n  table(is.na(firstObs2002BKT$tag))\n\n\n\nFALSE  TRUE \n  295   253 \n\n\nCode\n  ggplot(firstObs2002BKT, aes(observedLength, color = is.na(tag))) +\n    geom_freqpoly() +\n    geom_vline(xintercept = 60)\n\n\n\n\n\nCode\n  # looks like untagged area=inside fish wee morts, the rest were above or below\n  ggplot(firstObs2002BKT, aes(observedLength, color = is.na(tag))) +\n    geom_freqpoly() +\n    geom_vline(xintercept = 60) +\n    facet_grid(~area)\n\n\n\n\n\nCode\n  # check 2003\n  ggplot(firstObs %>% filter(year == 2003, species == \"bkt\"), aes(observedLength, color = is.na(tag))) +\n    geom_freqpoly() +\n    geom_vline(xintercept = 60) +\n    facet_grid(~area)\n\n\n\n\n\nCode\n  # same story as 2002"
  },
  {
    "objectID": "08-modelYOY.html#models-based-on-yearly-means",
    "href": "08-modelYOY.html#models-based-on-yearly-means",
    "title": "8  Young-of-year size model",
    "section": "8.5 Models based on yearly means",
    "text": "8.5 Models based on yearly means\nFilter firstObsUnnestedWB for bkt, bnt and min/maxYear\n\n\nCode\nd_WB_BKT_BNT <- firstObsUnnestedWB %>% filter(species != \"ats\", year %in% minYear:maxYear) %>%\n  mutate(species01 = ifelse(species == \"bkt\", 1, 0))\n\nhist(d_WB_BKT_BNT$detectionDate, breaks = 250)\n\n\n\n\n\nCode\nd_BKT_BNT <- firstObsUnnested %>% filter(species != \"ats\", year %in% minYear:maxYear) %>%\n  mutate(species01 = ifelse(species == \"bkt\", 1, 0))\n\n\nMean model functions\n\n\nCode\ngetMeansData <- function(d, t, f) {\n  means <- d %>% \n    group_by(species, year) %>% \n    summarize(meanLength = mean(observedLength, na.rm = TRUE), \n              meanEmerge_detect_sumTScaled = mean(emerge_detect_sumTScaled, na.rm = TRUE),\n              meanEmerge_detect_sumFScaled = mean(emerge_detect_sumTScaled, na.rm = TRUE),\n              meanTTime_sumTScaled = mean(get(t), na.rm = TRUE),\n              meanFTime_sumFScaled = mean(get(f), na.rm = TRUE),\n              meanYdayScaled = mean(ydayScaled, na.rm = TRUE),\n              meanCount_Scaled = mean(count_Scaled, na.rm = TRUE)\n              )\n  return(means)\n}\n\ngetMeansDataByRiver <- function(d, t, f) {\n  means <- d %>% \n    group_by(species, year, river) %>% \n    summarize(meanLength = mean(observedLength, na.rm = TRUE), \n              meanEmerge_detect_sumTScaled = mean(emerge_detect_sumTScaled, na.rm = TRUE),\n              meanEmerge_detect_sumFScaled = mean(emerge_detect_sumTScaled, na.rm = TRUE),\n              meanTTime_sumTScaled = mean(get(t), na.rm = TRUE),\n              meanFTime_sumFScaled = mean(get(f), na.rm = TRUE),\n              meanYdayScaled = mean(ydayScaled, na.rm = TRUE),\n              meanCount_Scaled = mean(count_Scaled, na.rm = TRUE)\n              )\n  return(means)\n}\n\nplotMeans <- function(means){\n  out <- list()\n  out[[1]] <- ggplot(means, aes(meanTTime_sumTScaled, meanLength, color = species)) +\n    geom_point() + \n    geom_smooth(method = \"lm\", se = FALSE)\n  \n  out[[2]] <- ggplot(means, aes(meanFTime_sumFScaled, meanLength, color = species)) +\n    geom_point() + \n    geom_smooth(method = \"lm\", se = FALSE)\n  \n  out[[3]] <- ggplot(means, aes(meanTTime_sumTScaled, meanFTime_sumFScaled, color = species)) +\n    geom_point() + \n    geom_smooth(method = \"lm\", se = FALSE)\n  return(out)\n}\n\nrunMeanModels <- function(means) {\n  modLMMeans1 <- lm(meanLength ~ (factor(species) + meanFTime_sumFScaled + meanTTime_sumTScaled + meanYdayScaled + meanCount_Scaled), data = means)\n  modLMMeans2 <- lm(meanLength ~ (factor(species) + meanFTime_sumFScaled + meanTTime_sumTScaled + meanYdayScaled + meanCount_Scaled)^2, data = means)\n  modLMMeans3 <- lm(meanLength ~ (factor(species) + meanFTime_sumFScaled + meanTTime_sumTScaled + meanYdayScaled + meanCount_Scaled)^3, data = means)\n  return(list(modLMMeans1, modLMMeans2, modLMMeans3))\n}\n\n\nMean lengths by river. This is information only. Using the WB data only shown here and in the next graph for the models.\n\n\n\n\n\nMean lengths for the mean length model.\n\n\n\n\n\nGraphs for variables that do not depend on number of months\n\n\n\n\n\n\n\n\n\n8.5.0.1 Models with flow and temperature from previous one month\n\n\n[[1]]\n\n\n\n\n\n\n[[2]]\n\n\n\n\n\n\n[[3]]\n\n\n\n\n\n          df      AIC\nmod1[[2]] 17 176.2075\nmod1[[3]] 27 181.7035\nmod1[[1]]  7 181.8187\n\n\n\nCall:\nlm(formula = meanLength ~ (factor(species) + meanFTime_sumFScaled + \n    meanTTime_sumTScaled + meanYdayScaled + meanCount_Scaled), \n    data = means)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-6.2779 -1.9839 -0.8754  1.0981 10.5908 \n\nCoefficients:\n                     Estimate Std. Error t value Pr(>|t|)    \n(Intercept)           72.4359     1.0722  67.558  < 2e-16 ***\nfactor(species)bnt     0.6550     1.3128   0.499 0.622039    \nmeanFTime_sumFScaled   1.6769     0.3849   4.356 0.000184 ***\nmeanTTime_sumTScaled -10.3842     2.3734  -4.375 0.000175 ***\nmeanYdayScaled        -3.4856     1.7314  -2.013 0.054554 .  \nmeanCount_Scaled      -2.5187     0.7068  -3.564 0.001443 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 3.695 on 26 degrees of freedom\nMultiple R-squared:  0.6966,    Adjusted R-squared:  0.6383 \nF-statistic: 11.94 on 5 and 26 DF,  p-value: 4.544e-06\n\n\nRelative importance for main effects model\n\n\n     factor(species) meanFTime_sumFScaled meanTTime_sumTScaled \n          0.00395522           0.24940595           0.19990058 \n      meanYdayScaled     meanCount_Scaled \n          0.06280977           0.18053989 \n\n\n\n\n8.5.0.2 Models with flow and temperature from previous three months\n\n\n[[1]]\n\n\n\n\n\n\n[[2]]\n\n\n\n\n\n\n[[3]]\n\n\n\n\n\n          df      AIC\nmod3[[3]] 27 177.0683\nmod3[[2]] 17 181.7547\nmod3[[1]]  7 187.3979\n\n\n\nCall:\nlm(formula = meanLength ~ (factor(species) + meanFTime_sumFScaled + \n    meanTTime_sumTScaled + meanYdayScaled + meanCount_Scaled), \n    data = means)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-6.3569 -2.8523  0.3445  1.8018  9.2951 \n\nCoefficients:\n                     Estimate Std. Error t value Pr(>|t|)    \n(Intercept)           73.4882     1.8809  39.070  < 2e-16 ***\nfactor(species)bnt     0.8334     1.4312   0.582 0.565351    \nmeanFTime_sumFScaled   2.2450     0.5866   3.827 0.000732 ***\nmeanTTime_sumTScaled  -8.8499     3.6769  -2.407 0.023489 *  \nmeanYdayScaled         0.7120     1.4287   0.498 0.622411    \nmeanCount_Scaled      -3.1604     0.7937  -3.982 0.000490 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.032 on 26 degrees of freedom\nMultiple R-squared:  0.6388,    Adjusted R-squared:  0.5694 \nF-statistic: 9.197 on 5 and 26 DF,  p-value: 3.902e-05\n\n\nRelative importance for main effects model\n\n\n     factor(species) meanFTime_sumFScaled meanTTime_sumTScaled \n         0.004325792          0.281631981          0.060776249 \n      meanYdayScaled     meanCount_Scaled \n         0.066333713          0.225756051 \n\n\n\n\n8.5.0.3 Models with flow and temperature from previous five months\n\n\n[[1]]\n\n\n\n\n\n\n[[2]]\n\n\n\n\n\n\n[[3]]\n\n\n\n\n\n          df      AIC\nmod5[[3]] 27 167.4034\nmod5[[1]]  7 193.2144\nmod5[[2]] 17 208.3847\n\n\n\nCall:\nlm(formula = meanLength ~ (factor(species) + meanFTime_sumFScaled + \n    meanTTime_sumTScaled + meanYdayScaled + meanCount_Scaled), \n    data = means)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-5.9186 -3.3732  0.3856  2.4470 11.8564 \n\nCoefficients:\n                     Estimate Std. Error t value Pr(>|t|)    \n(Intercept)           71.1144     1.9342  36.767  < 2e-16 ***\nfactor(species)bnt     0.8911     1.5671   0.569  0.57450    \nmeanFTime_sumFScaled   2.6934     0.8705   3.094  0.00468 ** \nmeanTTime_sumTScaled  -3.5748     2.9746  -1.202  0.24029    \nmeanYdayScaled         3.2403     1.5506   2.090  0.04657 *  \nmeanCount_Scaled      -2.8957     0.8613  -3.362  0.00240 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.415 on 26 degrees of freedom\nMultiple R-squared:  0.5668,    Adjusted R-squared:  0.4835 \nF-statistic: 6.805 on 5 and 26 DF,  p-value: 0.0003537\n\n\nRelative importance for main effects model\n\n\n     factor(species) meanFTime_sumFScaled meanTTime_sumTScaled \n         0.004330339          0.226812955          0.017322018 \n      meanYdayScaled     meanCount_Scaled \n         0.107186866          0.211177826 \n\n\nr-squared values and AICs for 1st, 2nd (2-way interactions) and 3rd (3-way interactions) order models\n\n\n\n\n \n  \n    Order \n    r2 \n    numMonths \n  \n \n\n  \n    1 \n    0.697 \n    1 \n  \n  \n    2 \n    0.864 \n    1 \n  \n  \n    3 \n    0.913 \n    1 \n  \n\n\n\n\n\n\n\n \n  \n    Order \n    r2 \n    numMonths \n  \n \n\n  \n    1 \n    0.639 \n    3 \n  \n  \n    2 \n    0.838 \n    3 \n  \n  \n    3 \n    0.925 \n    3 \n  \n\n\n\n\n\n\n\n \n  \n    Order \n    r2 \n    numMonths \n  \n \n\n  \n    1 \n    0.567 \n    5 \n  \n  \n    2 \n    0.628 \n    5 \n  \n  \n    3 \n    0.945 \n    5 \n  \n\n\n\n\n\n\n\n \n  \n      \n    df \n    AIC \n    numMonths \n  \n \n\n  \n    mod1[[2]] \n    17 \n    176.207 \n    1 \n  \n  \n    mod1[[3]] \n    27 \n    181.703 \n    1 \n  \n  \n    mod1[[1]] \n    7 \n    181.819 \n    1 \n  \n\n\n\n\n\n\n\n \n  \n      \n    df \n    AIC \n    numMonths \n  \n \n\n  \n    mod3[[3]] \n    27 \n    177.068 \n    3 \n  \n  \n    mod3[[2]] \n    17 \n    181.755 \n    3 \n  \n  \n    mod3[[1]] \n    7 \n    187.398 \n    3 \n  \n\n\n\n\n\n\n\n \n  \n      \n    df \n    AIC \n    numMonths \n  \n \n\n  \n    mod5[[3]] \n    27 \n    167.403 \n    5 \n  \n  \n    mod5[[1]] \n    7 \n    193.214 \n    5 \n  \n  \n    mod5[[2]] \n    17 \n    208.385 \n    5 \n  \n\n\n\n\n\nRelative importance of main effects models (repeat of above, but all in one place here)\n\n\n\n\n \n  \n    var \n    relImp \n    numMonths \n  \n \n\n  \n    factor(species) \n    0.004 \n    1 \n  \n  \n    meanFTime_sumFScaled \n    0.249 \n    1 \n  \n  \n    meanTTime_sumTScaled \n    0.200 \n    1 \n  \n  \n    meanYdayScaled \n    0.063 \n    1 \n  \n  \n    meanCount_Scaled \n    0.181 \n    1 \n  \n\n\n\n\n\n\n\n \n  \n    var \n    relImp \n    numMonths \n  \n \n\n  \n    factor(species) \n    0.004 \n    3 \n  \n  \n    meanFTime_sumFScaled \n    0.282 \n    3 \n  \n  \n    meanTTime_sumTScaled \n    0.061 \n    3 \n  \n  \n    meanYdayScaled \n    0.066 \n    3 \n  \n  \n    meanCount_Scaled \n    0.226 \n    3 \n  \n\n\n\n\n\n\n\n \n  \n    var \n    relImp \n    numMonths \n  \n \n\n  \n    factor(species) \n    0.004 \n    5 \n  \n  \n    meanFTime_sumFScaled \n    0.227 \n    5 \n  \n  \n    meanTTime_sumTScaled \n    0.017 \n    5 \n  \n  \n    meanYdayScaled \n    0.107 \n    5 \n  \n  \n    meanCount_Scaled \n    0.211 \n    5 \n  \n\n\n\n\n\n\n\n8.5.1 Models with extreme flow events (droughts)\nWe get negative cumulFlows because we have some negative flows from the flow extension model\n\n\nCode\n# put some of these calculations into envDataWB\nenvDataWBFlow = tar_read(envDataWBFlow_target)\n\nfirstObsYears <- firstObs %>%\n    filter(year %in% minYear:maxYear, \n           yday > 100, yday < 300)\n\nggplot(envDataWBFlow, aes(yday, flow)) +\n  geom_point(aes(yday, observedLength/20), size = 0.75, alpha = 0.2, color = 'lightblue', data = firstObsYears) +\n  geom_point(size = 0.5) +\n  scale_x_continuous(breaks = seq(0,300, 30)) +\n  facet_wrap(~year)\n\n\n\n\n\nCode\nggplot(envDataWBFlow, aes(yday, cumulFlow / 10)) +\n  geom_point(aes(yday, observedLength / 20), size = 0.75, alpha = 0.2, color = 'lightblue', data = firstObsYears) +\n  geom_point(size = 0.5, color = 'darkgrey') +\n  geom_point(aes(yday, cumulTemp / 800), size = 0.5, color = \"orange\", data = envDataWBFlow) +\n  geom_point(aes(yday, flow), size = 0.5, data = envDataWBFlow) +\n  scale_x_continuous(breaks = seq(0, 300, 30)) +\n  #theme_publication() +\n  facet_wrap(~year)\n\n\n\n\n\nCode\nggplot(envDataWBFlow, aes(yday, cumulFlow, color = (year))) +\n  geom_point() +\n  scale_x_continuous(breaks = seq(0, 300, 30)) \n\n\n\n\n\nCode\nggplot(envDataWBFlow, aes(yday, cumulTemp, color = (year))) +\n  geom_point() +\n  #geom_point(aes(yday, cumulTemp / 800, color = factor(year)), data = tmp) +\n  scale_x_continuous(breaks = seq(0, 300, 30))\n\n\n\n\n\nIs there a sampling section effect?\nNote: there are fish in sections > 50 for years 2002 and 2003, need to filter out early\n\n\nCode\nggplot(d_WB_BKT_BNT %>% filter( section <= 47), aes(factor(section), observedLength)) +\n  geom_boxplot() +\n  geom_smooth() +\n  facet_wrap(~year)\n\n\n\n\n\nCode\nggplot(d_WB_BKT_BNT %>% filter( section <= 47), aes(factor(year), observedLength)) +\n  geom_boxplot() +\n  geom_smooth() +\n  facet_wrap(~section)"
  },
  {
    "objectID": "09-modelFlow.html",
    "href": "09-modelFlow.html",
    "title": "9  Flow model",
    "section": "",
    "text": "Code\ndataFlow <- tar_read(dataFlow_target)\ndFlow <- tar_read(dFlow_target)\ndFlowWide <- tar_read(dFlowWide_target)\n\n\n\n\nCode\ntibble(dataFlow)\n\n\n# A tibble: 582,388 × 9\n   Station_No Site_Name   DateTi…¹ GageH…² Disch…³ Water…⁴ AirPr…⁵ AirTe…⁶ X    \n        <int> <chr>       <chr>      <dbl>   <dbl>   <dbl>   <dbl>   <dbl> <lgl>\n 1    1171000 Avery Brook 2/20/20…    4.17    5.37    32.0      NA      NA NA   \n 2    1171000 Avery Brook 2/20/20…    4.17    5.3     32.0      NA      NA NA   \n 3    1171000 Avery Brook 2/20/20…    4.16    5.17    32.0      NA      NA NA   \n 4    1171000 Avery Brook 2/20/20…    4.17    5.27    32.0      NA      NA NA   \n 5    1171000 Avery Brook 2/20/20…    4.17    5.3     32.0      NA      NA NA   \n 6    1171000 Avery Brook 2/20/20…    4.15    4.94    31.9      NA      NA NA   \n 7    1171000 Avery Brook 2/20/20…    4.13    4.56    31.9      NA      NA NA   \n 8    1171000 Avery Brook 2/20/20…    4.1     4.14    31.9      NA      NA NA   \n 9    1171000 Avery Brook 2/20/20…    4.08    3.84    31.9      NA      NA NA   \n10    1171000 Avery Brook 2/20/20…    4.09    4.02    31.9      NA      NA NA   \n# … with 582,378 more rows, and abbreviated variable names ¹​DateTime_EST,\n#   ²​GageHeight_Hobo_ft, ³​Discharge_Hobo_cfs, ⁴​WaterTemperature_HOBO_DegF,\n#   ⁵​AirPressure_PSI, ⁶​AirTemperature_HOBO_degF\n# ℹ Use `print(n = ...)` to see more rows\n\n\nCode\ntable(dataFlow$Site_Name)\n\n\n\n         Avery Brook          Jimmy Brook       Mitchell Brook \n               56536                57849                56978 \n   Obear Brook Lower      Sanderson Brook         West Brook 0 \n               60392                55336                58548 \n    West Brook Lower West Brook Reservoir     West Brook Upper \n               61279                61059                57301 \n  West Whately Brook \n               57110 \n\n\nCode\n#check for real entries\ndFlow %>% filter(is.infinite(dischargeLog))\n\n\n [1] Station_No                 Site_Name                 \n [3] DateTime_EST               GageHeight_Hobo_ft        \n [5] Discharge_Hobo_cfs         WaterTemperature_HOBO_DegF\n [7] AirPressure_PSI            AirTemperature_HOBO_degF  \n [9] X                          date                      \n[11] site                       dischargeLog              \n<0 rows> (or 0-length row.names)\n\n\n\n\nCode\nggplot(dFlow, aes(date, dischargeLog, color = Site_Name)) +\n  geom_point(size = 0.02) +\n  facet_wrap(~Site_Name)\n\n\n\n\n\nCode\nggpairs(dFlowWide,\n          columns = 6:9,\n          mapping = ggplot2::aes(color = as.factor(year), alpha = 0.7),\n          #diag = list(continuous = myDens),\n          lower = list(continuous = wrap(\"points\", alpha = 0.3, size=0.1), \n                       combo = wrap(\"dot\", alpha = 0.4, size=0.2))\n        )\n\n\n\n\n\nCode\nggpairs(dFlowWide %>% filter(yday > 90, yday < 300),\n          columns = 6:9,\n          mapping = ggplot2::aes(color = as.factor(year)),\n          lower = list(continuous = wrap(\"points\", alpha = 0.3, size=0.1), \n                       combo = wrap(\"dot\", alpha = 0.4, size=0.2))\n        )\n\n\n\n\n\nCode\nggpairs(dFlowWide %>% filter(yday == 110),\n          columns = 8:11,\n          mapping = ggplot2::aes(color = as.factor(year)),\n          lower = list(continuous = wrap(\"points\", alpha = 0.3, size=0.2), \n                       combo = wrap(\"dot\", alpha = 0.4, size=0.2))\n        )"
  },
  {
    "objectID": "10-modelsCMR_Flow_OB.html",
    "href": "10-modelsCMR_Flow_OB.html",
    "title": "10  Flow effects on survival (phi) models - O’Bear only",
    "section": "",
    "text": "The goal is to find the best structure for the survival model, then compare survival estimates with tributary-specific flow to estimates with common flow across locations.\nStructure options include [species, cohort, season, isYOY, flow, flow^2]\n\n\n\n\n10.0.1 Model phiT_pT (tt)\nSingle estimates of phi and p (across, cohorts, flow)\n\n10.0.1.1 Set up and run model\nModel is run using targets in modelCMR_tt_OB.R\n\n\nCode\n# Following https://oliviergimenez.github.io/bayesian-cr-workshop/worksheets/4_demo.html\n# \n  out <- tar_read(tt_modelOut_OB)\n\n  MCMCplot(object = out$mcmc)\n\n\n\n\n\nCode\n  MCMCsummary(object = out$mcmc, round = 3)\n\n\n         mean    sd  2.5%   50% 97.5% Rhat n.eff\np[1]    0.293 0.006 0.281 0.293 0.305 1.00   275\np[2]    0.421 0.007 0.407 0.421 0.434 1.01   575\np[3]    0.667 0.007 0.652 0.667 0.683 1.00   382\np[4]    0.713 0.009 0.696 0.713 0.730 1.00   313\np[5]    0.364 0.010 0.347 0.364 0.384 1.09   259\np[6]    0.519 0.012 0.496 0.519 0.542 1.01   427\np[7]    0.687 0.014 0.658 0.687 0.716 1.00   334\np[8]    0.740 0.021 0.698 0.741 0.778 1.02   201\np[9]    0.454 0.027 0.400 0.455 0.508 1.01   236\np[10]   0.573 0.038 0.489 0.573 0.646 1.00   244\np[11]   0.681 0.141 0.469 0.668 0.969 1.92    18\nphi[1]  0.789 0.010 0.771 0.789 0.812 1.00   141\nphi[2]  0.713 0.010 0.693 0.713 0.732 1.00   194\nphi[3]  0.764 0.009 0.747 0.764 0.781 1.02   238\nphi[4]  0.642 0.008 0.626 0.642 0.659 1.00   260\nphi[5]  0.670 0.015 0.640 0.670 0.700 1.11   130\nphi[6]  0.562 0.015 0.533 0.562 0.592 1.14   142\nphi[7]  0.683 0.015 0.652 0.683 0.712 1.03   233\nphi[8]  0.623 0.019 0.586 0.623 0.663 1.04   210\nphi[9]  0.466 0.027 0.415 0.466 0.520 1.03   149\nphi[10] 0.563 0.043 0.483 0.563 0.645 1.02   122\nphi[11] 0.684 0.146 0.442 0.668 0.945 1.93    15\n\n\nCode\n  priors <- runif(out$runData$nIter * out$runData$nChains, 0, 1)\n  MCMCtrace(object = out$mcmc,\n            #ISB = FALSE,\n            #exact = TRUE, \n            params = c(\"phi\", \"p\"),\n            pdf = FALSE, \n            priors = priors)"
  },
  {
    "objectID": "11-modelsCMR_Flow_4Rivers.html",
    "href": "11-modelsCMR_Flow_4Rivers.html",
    "title": "11  Flow effects on survival (phi) models - 4 rivers",
    "section": "",
    "text": "The goal is to find the best structure for the survival model, then compare survival estimates with tributary-specific flow to estimates with common flow across locations.\nStructure options include [species, cohort, season, isYOY, flow, flow^2]\n\n\n\n\n11.0.0.1 Load pre-run model\nThis model is too big (88 Gb) and needs to be run on workbench\nOutput files are here: “C:- DOI-book4rivers”\n\n\nCode\n# Following https://oliviergimenez.github.io/bayesian-cr-workshop/worksheets/4_demo.html\n\n  toSave <-  tar_read(toSave_ttt_WB_target)\n\n  MCMCplot(object = toSave$mcmc, params = \"betaPhiOut\")\n\n\n\n\n\nCode\n  MCMCplot(object = toSave$mcmc, params = \"betaPhiRiverOut\")# \n\n\n\n\n\nCode\n  MCMCplot(object = toSave$mcmc, params = c(\"betaPhiRiverCohortOut\"))\n\n\n\n\n\nCode\n  MCMCplot(object = toSave$mcmc, params = \"betaPOut\")\n\n\n\n\n\nCode\n  MCMCplot(object = toSave$mcmc, params = \"betaPRiverOut\")# \n\n\n\n\n\nCode\n  MCMCplot(object = toSave$mcmc, params = c(\"betaPRiverCohortOut\"))\n\n\n\n\n\nCode\n  MCMCplot(object = toSave$mcmc, params = c(\"psi\"))\n\n\n\n\n\nCode\n   priors <- rnorm(toSave$nIter * toSave$nChains, 0, 1/sqrt(.1))\n  MCMCtrace(object = toSave$mcmc,\n            #ISB = FALSE,\n            #exact = TRUE, \n            params = c(\"betaPhiRiverOut\"),\n            pdf = FALSE, \n            priors = priors)\n\n\n\n\n\n\n\n\nCode\n  priors <- runif(toSave$nIter * toSave$nChains, 0, 1)\n  MCMCtrace(object = toSave$mcmc,\n            #ISB = FALSE,\n            #exact = TRUE, \n            params = c(\"betaPhiRiverCohortOut\"),\n            pdf = FALSE, \n            priors = priors)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n   priors <- runif(toSave$nIter * toSave$nChains, 0, 1)\n   MCMCtrace(object = toSave$mcmc,\n             ISB = FALSE,\n             exact = TRUE,\n             params = c(\"psi[1, 1, 4, 4]\", \"psi[1, 2, 4, 4]\", \"psi[1, 3, 4, 4]\", \"psi[1, 4, 4, 4]\",\n                        \"psi[2, 1, 4, 4]\", \"psi[2, 2, 4, 4]\", \"psi[2, 3, 4, 4]\", \"psi[2, 4, 4, 4]\"),\n             pdf = FALSE,\n             priors = priors)\n\n\n\n\n\n\n\n\n\n\n\nCode from westBrook-book Needs to be run on workBench\n\n\nCode\n# copy code below into workbench for model runs\n# Put zipped output into ./models/cmrFlow4rivers/runsOut/fromWorkbench/rstudio-export.zip and then unzip\n\nif(!useWorkbenchRuns) {\n  \n  # Following https://oliviergimenez.github.io/bayesian-cr-workshop/worksheets/5_demo.html\n  if (rerunSurivalModels) {\n    \n    y <- eh$eh * eh$riverN\n    (nCohorts <- nrow(unique(eh$cohorts)))\n    (nSeasons <- nrow(unique(eh$seasons)))\n    (nRivers <- length(unique(eh$data$riverN)))# rivers 1:4\n    seasonArray <- c(3,4,1,2,3,4,1,2,3,4,1,2)\n               \n  \n    first <- eh$first #apply(y, 1, function(x) min(which(x !=0)))\n    last <- eh$last\n    cohort = ((eh$cohorts) - min(eh$cohorts) + 1)$cohort #can't be a data frame or tibble\n    \n    zinits <- y + 1 # non-detection -> alive\n    zinits[zinits == 2] <- 1 # dead -> alive\n    zInitsNA <- ifelse(is.na(eh$flow), NA, 1)\n    \n    # Proportion of fish in each river on the first observation\n    y1 <- y[,1]\n    deltaProps <- table(y1[y1>0]) / length(y1[y1>0])\n    \n    # alpha for the dirichlet prior\n    alpha <- c(1,1,1,1)\n    \n    # fill in entries for dirichlet priors where a[r,,t,c] sums to 1 for any r,t,c combo\n    getDirchPriors <- function(nRivers,myConstants, nCohorts, alpha){\n      a = array(rep(0, nRivers * nRivers * (myConstants$T - 1) * nCohorts) , c(nRivers, nRivers, (myConstants$T - 1), nCohorts ))\n      for(r in 1:nRivers){\n        for(t in 1:(myConstants$T - 1)){\n          for (c in 1:nCohorts){\n            dirch <- rdirch(1, alpha)\n            for (r2 in 1:nRivers){\n              a[r,r2,t,c] <- dirch[r2]\n            }\n          }\n        }\n      }\n      return(a)\n    }\n    \n    # Priors for psi where more likely to stay than move\n    alphaR <- list()\n    alphaR[[1]] <- alphaR1 <- c(0.7, 0.1, 0.1, 0.1)\n    alphaR[[2]] <- alphaR2 <- c(0.1, 0.7, 0.1, 0.1)\n    alphaR[[3]] <- alphaR3 <- c(0.1, 0.1, 0.7, 0.1)\n    alphaR[[4]] <- alphaR4 <- c(0.1, 0.1, 0.1, 0.7)\n    \n    getDirchPriorsR <- function(nRivers,myConstants, nCohorts, alpha){\n      a = array(rep(0, nRivers * nRivers * (myConstants$T - 1) * nCohorts) , c(nRivers, nRivers, (myConstants$T - 1), nCohorts ))\n      for(r in 1:nRivers){\n        for(t in 1:(myConstants$T - 1)){\n          for (c in 1:nCohorts){\n            dirch <- rdirch(1, alphaR[[r]])\n            for (r2 in 1:nRivers){\n              a[r,r2,t,c] <- dirch[r2]\n            }\n          }\n        }\n      }\n      return(a)\n    }\n      \n    #psi = getDirchPriorsR(nRivers, myConstants, nCohorts, alpha)\n    \n    #  For 3 states, we are using 4\n    # -------------------------------------------------\n    # Parameters for 3 sites (A, B, C):\n    # phiA: survival probability site A\n    # phiB: survival probability site B\n    # phiC: survival probability site B\n    # psiAA: movement probability from site A to site A (reference)\n    # psiAB = psiA[1]: movement probability from site A to site B\n    # psiAC = psiA[2]: movement probability from site A to site C \n    # psiBA = psiB[1]: movement probability from site B to site A\n    # psiBB: movement probability from site B to site B (reference)\n    # psiBC = psiB[2]: movement probability from site B to site C\n    # psiCA = psiC[1]: movement probability from site C to site A\n    # psiCB = psiC[2]: movement probability from site C to site B\n    # psiCC: movement probability from site C to site C (reference)\n    # pA: recapture probability site A\n    # pB: recapture probability site B\n    # pC: recapture probability site C\n    # -------------------------------------------------\n    # States (z):\n    # 1 alive at A\n    # 2 alive at B\n    # 3 alive at C\n    # 4 alive at D\n    # 5 dead\n    # Observations (y):  \n    # 1 not seen\n    # 2 seen at A \n    # 3 seen at B\n    # 4 seen at C\n    # 5 seen at D\n    # river names: c(\"west brook\" = 1, \"wb jimmy\" = 2, \"wb mitchell\" = 3, \"wb obear\" = 4)\n    # -------------------------------------------------\n    \n    ## model code using DHMMo distribution\n    hmm.phiT_pT_psiT_DHMM_dirch <- nimbleCode({\n        # Initial distribution among rivers\n        delta[1] <- deltaProps[1]                  # Pr(alive t = 1 and in river 1) = 0.4\n        delta[2] <- deltaProps[2]\n        delta[3] <- deltaProps[3]\n        delta[4] <- deltaProps[4]\n        delta[5] <- 0                    # Pr(dead t = 1) = 0\n    \n        for (r in 1:nRivers){\n            betaPhiRiver[r] ~ dnorm(0,sd = 1)\n            betaPRiver[r] ~ dnorm(0,sd = 1)\n            \n            betaPhiRiverOut[r] <- ilogit(betaPhiRiver[r])\n            betaPRiverOut[r] <- ilogit(betaPRiver[r])\n            \n            for (c in 1:nCohorts){\n                betaPhiRiverCohort[r,c] ~ dnorm(betaPhiRiver[r], sd = 1)\n                betaPRiverCohort[r,c] ~ dnorm(betaPRiver[r], sd = 1)\n   \n                betaPhiRiverCohortOut[r,c] <- ilogit(betaPhiRiverCohort[r,c])\n                betaPRiverCohortOut[r,c] <- ilogit(betaPRiverCohort[r,c])\n                for (t in 1:(T-1)){\n                    betaPhi[r,t,c] ~ dnorm(betaPhiRiverCohort[r,c], sd = 1)\n                    betaP[r,t,c] ~ dnorm(betaPRiverCohort[r,c], sd = 1)\n                    \n                    betaPhiOut[r,t,c] <- ilogit(betaPhi[r,t,c])\n                    betaPOut[r,t,c] <- ilogit(betaP[r,t,c])\n                    \n                    # move from river 'r' to one of river 1:nRivers\n                    # Nice description of effect of 'alpha' on probabilities:\n                    # https://stats.stackexchange.com/questions/244917/what-exactly-is-the-alpha-in-the-dirichlet-distribution\n                    #psi[r,1:nRivers,t,c] ~ ddirch(alpha[[r]][1:nRivers])\n                }\n            }\n        }\n        \n        for (t in 1:(T-1)){ # loop over time\n          for (c in 1:nCohorts){\n            psi[1,1:nRivers,t,c] ~ ddirch(alphaR1[1:nRivers])\n            psi[2,1:nRivers,t,c] ~ ddirch(alphaR2[1:nRivers])\n            psi[3,1:nRivers,t,c] ~ ddirch(alphaR3[1:nRivers])\n            psi[4,1:nRivers,t,c] ~ ddirch(alphaR4[1:nRivers])\n          }\n        }\n    \n        for (t in 1:(T-1)){ # loop over time\n          for (c in 1:nCohorts){\n  \n            gamma[1,1,t,c] <- ilogit(betaPhi[1,t,c]) * psi[1,1,t,c]\n            gamma[1,2,t,c] <- ilogit(betaPhi[1,t,c]) * psi[1,2,t,c]\n            gamma[1,3,t,c] <- ilogit(betaPhi[1,t,c]) * psi[1,3,t,c]\n            gamma[1,4,t,c] <- ilogit(betaPhi[1,t,c]) * psi[1,4,t,c]\n            gamma[1,5,t,c] <- 1 - ilogit(betaPhi[1,t,c])\n            gamma[2,1,t,c] <- ilogit(betaPhi[2,t,c]) * psi[2,1,t,c]\n            gamma[2,2,t,c] <- ilogit(betaPhi[2,t,c]) * psi[2,2,t,c]\n            gamma[2,3,t,c] <- ilogit(betaPhi[2,t,c]) * psi[2,3,t,c]\n            gamma[2,4,t,c] <- ilogit(betaPhi[2,t,c]) * psi[2,4,t,c]\n            gamma[2,5,t,c] <- 1 - ilogit(betaPhi[2,t,c])\n            gamma[3,1,t,c] <- ilogit(betaPhi[3,t,c]) * psi[3,1,t,c]\n            gamma[3,2,t,c] <- ilogit(betaPhi[3,t,c]) * psi[3,2,t,c]\n            gamma[3,3,t,c] <- ilogit(betaPhi[3,t,c]) * psi[3,3,t,c]\n            gamma[3,4,t,c] <- ilogit(betaPhi[3,t,c]) * psi[3,4,t,c]\n            gamma[3,5,t,c] <- 1 - ilogit(betaPhi[3,t,c])\n            gamma[4,1,t,c] <- ilogit(betaPhi[4,t,c]) * psi[4,1,t,c]\n            gamma[4,2,t,c] <- ilogit(betaPhi[4,t,c]) * psi[4,2,t,c]\n            gamma[4,3,t,c] <- ilogit(betaPhi[4,t,c]) * psi[4,3,t,c]\n            gamma[4,4,t,c] <- ilogit(betaPhi[4,t,c]) * psi[4,4,t,c]\n            gamma[4,5,t,c] <- 1 - ilogit(betaPhi[4,t,c])\n            gamma[5,1,t,c] <- 0\n            gamma[5,2,t,c] <- 0\n            gamma[5,3,t,c] <- 0\n            gamma[5,4,t,c] <- 0\n            gamma[5,5,t,c] <- 1\n          }\n        }\n         \n        # gamma for the last occasion  \n        for (c in 1:nCohorts){\n            for (a in 1:(nRivers+1)){\n                for (b in 1:nRivers){\n                    gamma[a,b,T,c] <- 0\n                }  \n                gamma[a,5,T,c] <- 1\n            }\n        }\n         \n         \n        for (i in 1:N){ # loop over individuals\n            # omega for first obs      \n            omega[1,1,first[i],i] <- 0          # Pr(alive A t -> non-detected t)\n            omega[1,2,first[i],i] <- 1          # Pr(alive A t -> detected A t)\n            omega[1,3,first[i],i] <- 0          # Pr(alive A t -> detected B t)\n            omega[1,4,first[i],i] <- 0          # Pr(alive A t -> detected C t)\n            omega[1,5,first[i],i] <- 0          # Pr(alive A t -> detected D t)\n            omega[2,1,first[i],i] <- 0          # Pr(alive B t -> non-detected t)\n            omega[2,2,first[i],i] <- 0          # Pr(alive B t -> detected A t)\n            omega[2,3,first[i],i] <- 1          # Pr(alive B t -> detected B t)\n            omega[2,4,first[i],i] <- 0          # Pr(alive B t -> detected C t)\n            omega[2,5,first[i],i] <- 0          # Pr(alive B t -> detected C t)\n            omega[3,1,first[i],i] <- 0          # Pr(alive C t -> non-detected t)\n            omega[3,2,first[i],i] <- 0          # Pr(alive C t -> detected A t)\n            omega[3,3,first[i],i] <- 0          # Pr(alive C t -> detected B t)\n            omega[3,4,first[i],i] <- 1          # Pr(alive C t -> detected C t)\n            omega[3,5,first[i],i] <- 0          # Pr(alive C t -> detected C t)\n            omega[4,1,first[i],i] <- 0          # Pr(dead t -> non-detected t)\n            omega[4,2,first[i],i] <- 0          # Pr(dead t -> detected A t)\n            omega[4,3,first[i],i] <- 0          # Pr(dead t -> detected B t)\n            omega[4,4,first[i],i] <- 0          # Pr(dead t -> detected C t)\n            omega[4,5,first[i],i] <- 1          # Pr(dead t -> detected C t)\n            omega[5,1,first[i],i] <- 1          # Pr(dead t -> non-detected t)\n            omega[5,2,first[i],i] <- 0          # Pr(dead t -> detected A t)\n            omega[5,3,first[i],i] <- 0          # Pr(dead t -> detected B t)\n            omega[5,4,first[i],i] <- 0          # Pr(dead t -> detected C t)\n            omega[5,5,first[i],i] <- 0          # Pr(dead t -> detected D t)\n         \n           \n            ## DT changes:\n            ## time t > first[i]:\n            for(t in (first[i]+1):last[i]) {\n                logit(pA[t,i]) <- betaP[1,t-1,cohort[i]]\n                logit(pB[t,i]) <- betaP[2,t-1,cohort[i]]\n                logit(pC[t,i]) <- betaP[3,t-1,cohort[i]]\n                logit(pD[t,i]) <- betaP[4,t-1,cohort[i]]\n               \n                # probabilities of y(t) given z(t)\n                # omega[z, y, t, i]\n                \n                # z=1 = alive in River 1, z=2 = alive in River 2...z=5 = dead\n                # y=1 = unobserved, y=2 = observed in River 1, y=3 = observed in River 2, etc\n                \n                omega[1,1,t,i] <- 1 - pA[t,i]     # Pr(alive A t -> non-detected t)\n                omega[1,2,t,i] <- pA[t,i]         # Pr(alive A t -> detected A t)\n                omega[1,3,t,i] <- 0               # Pr(alive A t -> detected B t)\n                omega[1,4,t,i] <- 0               # Pr(alive A t -> detected C t)\n                omega[1,5,t,i] <- 0               # Pr(alive A t -> detected D t)\n                omega[2,1,t,i] <- 1 - pB[t,i]     # Pr(alive B t -> non-detected t)\n                omega[2,2,t,i] <- 0               # Pr(alive B t -> detected A t)\n                omega[2,3,t,i] <- pB[t,i]         # Pr(alive B t -> detected B t)\n                omega[2,4,t,i] <- 0               # Pr(alive B t -> detected C t)\n                omega[2,5,t,i] <- 0               # Pr(alive B t -> detected C t)\n                omega[3,1,t,i] <- 1 - pC[t,i]     # Pr(alive C t -> non-detected t)\n                omega[3,2,t,i] <- 0               # Pr(alive C t -> detected A t)\n                omega[3,3,t,i] <- 0               # Pr(alive C t -> detected B t)\n                omega[3,4,t,i] <- pC[t,i]         # Pr(alive C t -> detected C t)\n                omega[3,5,t,i] <- 0               # Pr(alive C t -> detected C t)\n                omega[4,1,t,i] <- 1 - pD[t,i]     # Pr(alive D t -> non-detected t))\n                omega[4,2,t,i] <- 0               # Pr(dead D t -> detected A t)\n                omega[4,3,t,i] <- 0               # Pr(dead D t -> detected B t)\n                omega[4,4,t,i] <- 0               # Pr(dead D t -> detected C t)\n                omega[4,5,t,i] <- pD[t,i]         # Pr(alive D t -> detected D t)\n                omega[5,1,t,i] <- 1               # Pr(dead t -> non-detected t)\n                omega[5,2,t,i] <- 0               # Pr(dead t -> detected A t)\n                omega[5,3,t,i] <- 0               # Pr(dead t -> detected B t)\n                omega[5,4,t,i] <- 0               # Pr(dead t -> detected C t)\n                omega[5,5,t,i] <- 0               # Pr(dead t -> detected D t)\n            }\n           \n        } # i loop\n    \n        for (i in 1:N){\n            y[i,first[i]:last[i]] ~ dDHMMo(init = delta[1:5],\n                                           probTrans = gamma[1:5, 1:5, first[i]:last[i], cohort[i]],\n                                           probObs =   omega[1:5, 1:5, first[i]:last[i], i],\n                                           len = length[i],\n                                           checkRowSums = 1)\n        }\n    \n    })\n    \n    ##\n    myConstants0 <- list(N = nrow(y),\n                         T = ncol(y),\n                         first = first,\n                         last = last,\n                         cohort = cohort,\n                         nCohorts = nCohorts,\n                         nRivers = nRivers,\n                         season = seasonArray,\n                         #                     flow = eh$flow,\n                         length = last - first + 1,\n                         alpha = alpha,\n                         deltaProps = deltaProps\n                         )\n    \n    ## DT changes:\n    myData0 <- list(###yCJS = eh$eh, #y,    ## data for CJS distribution\n        y = y + 1\n    )   ## data for DHMM distribution\n    \n      ## if you change this FALSE to TRUE\n    ## this makes the dataset smaller - only 200 observations,\n    ## for quicker testing\n    if(FALSE) {\n        newN <- 20\n        oldN <- dim(y)[1]\n        set.seed(0)\n        indToKeep <- sample(1:oldN, size = newN, replace = FALSE)\n    }\n    \n    ## this removes fish that were only observed on the very last observation\n    if(TRUE) {\n        indToKeep <- which(first < ncol(y))\n        newN <- length(indToKeep)\n    }\n    \n    myConstants <- list(\n        N = newN,\n        T = myConstants0$T,\n        first = myConstants0$first[indToKeep],\n        last = myConstants0$last[indToKeep],\n        nRivers = myConstants0$nRivers,\n        cohort = myConstants0$cohort[indToKeep],\n        nCohorts = myConstants0$nCohorts,\n        #      season = myConstants$season,\n        #      flow = myConstants$flow[indToKeep,],\n        length = myConstants0$length[indToKeep],\n        alpha = myConstants0$alpha,\n        deltaProps = deltaProps\n    )\n    \n    myData <- list(\n        ##yCJS = myData0$yCJS[indToKeep,],\n        y = myData0$y[indToKeep,]\n    )\n    \n      initialValues <- function(){\n        list(\n            betaPhiRiver = array(runif(nRivers, 0, 1), c(nRivers)),\n            betaPhiRiverCohort = array(runif(nRivers * nCohorts, 0, 1), c(nRivers, nCohorts)),\n            betaPhi = array(rnorm(nRivers * (myConstants$T - 1) * nCohorts , 0, 1), c(nRivers, (myConstants$T - 1), nCohorts)),\n            \n            betaPRiver = array(runif(nRivers, 0, 1), c(nRivers)),\n            betaPRiverCohort = array(runif(nRivers * nCohorts, 0, 1), c(nRivers, nCohorts)),\n            betaP = array(rnorm(nRivers * (myConstants$T - 1) * nCohorts , 0, 1), c(nRivers, (myConstants$T - 1), nCohorts)),\n            \n            psi = getDirchPriorsR(nRivers, myConstants, nCohorts, alphaR)\n        )\n    }\n  \n    set.seed(0)\n    start = Sys.time()\n    \n    ## you'll get warnings that the data 'yCJS' is not used, and the 'z' initial\n    ## values are not in the model.  Those don't cause any problems,\n    ## and let us use the same myData and initialValue() for both models.\n    system.time(\n        Rmodel <- nimbleModel(\n            code = hmm.phiT_pT_psiT_DHMM_dirch,\n            constants = myConstants,\n            data = myData,              \n            inits = initialValues(),\n            calculate = FALSE\n        )\n    )\n    \n    #Rmodel$calculate()\n    \n    parametersToSave <- c(\"betaPhi\", \"betaPhiRiver\", \"betaPhiRiverCohort\", \n                          \"betaP\",   \"betaPRiver\",   \"betaPRiverCohort\",\n                          \"betaPhiOut\", \"betaPhiRiverOut\", \"betaPhiRiverCohortOut\", \n                          \"betaPOut\",   \"betaPRiverOut\",   \"betaPRiverCohortOut\",\n                          \n                          \"psi\"\n                          )\n    \n    nIter <- 15000 #30000\n    nBurnin <- 5000 #15000\n    nChains <- 2\n    thinRate <- 5\n    \n    rm(conf, Rmcmc, Cmodel, Cmcmc) # so old versions don't run if there is an error in an earlier step\n    system.time(\n        conf <- configureMCMC(\n            Rmodel,\n            monitors = parametersToSave\n        )\n    )\n    \n    Rmcmc <- buildMCMC(conf, useConjugacy = FALSE)\n    Cmodel <- compileNimble(Rmodel)\n    Cmcmc <- compileNimble(Rmcmc, project = Rmodel)\n    \n    mcmc.phiT_pT_psiT_DHMM_dirch <- runMCMC(\n        Cmcmc, \n        niter = nIter, \n        nburnin = nBurnin, \n        thin = thinRate, \n        nchains = nChains\n    )\n    \n    end <- Sys.time()\n    elapsed_phiT_pT_psiT_DHMM_dirch <- end - start\n    toSave <- list(\n        mcmc = mcmc.phiT_pT_psiT_DHMM_dirch, \n        elapsed = elapsed_phiT_pT_psiT_DHMM_dirch,\n        name = \"phiT_pT_psiT_DHMM_dirch\",\n        myConstants = myConstants, \n        nIter = nIter, \n        nBurnin = nBurnin,\n        thinRate = thinRate, \n        nSeasons = nSeasons, \n        nCohorts = nCohorts,\n        nChains = nChains\n    )\n    \n      save(toSave, file = paste0('./models/cmrFlow4rivers/runsOut/mcmc_phiT_pT_psiT_DHMM_dirch_', substr(end,1,13), '.RData'))\n      save(toSave, file = './models/cmrFlow4rivers/runsOut/mcmc_phiT_pT_psiT_DHMM_dirch_mostRecent.RData')\n  \n    # conduct more runs, will need to save into 'toSave'   \n    # Cmcmc$run(5000, reset = FALSE)  \n      \n  } else {\n    load('./models/cmrFlow4rivers/runsOut/mcmc_phiT_pT_psiT_DHMM_dirch_mostRecent.RData')\n  }\n    \n} else {\n  load('./models/cmrFlow4rivers/runsOut/fromWorkbench/rstudio-export/mcmc_phiT_pT_psiT_DHMM_dirch_mostRecent.RData')\n}"
  }
]