[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "The West Brook story",
    "section": "",
    "text": "Introduction"
  },
  {
    "objectID": "index.html#the-west-brook-stream-network",
    "href": "index.html#the-west-brook-stream-network",
    "title": "The West Brook story",
    "section": "The West Brook stream network",
    "text": "The West Brook stream network\nThe Ecology Section at the USGS Conte Laboratory has studied fish in the West Brook (MA, USA) since 1997. The goal is to understand the strength and direction of drivers on fish growth, movement, reproduction and survival in a small stream network. We hope to provide a comprehensive understanding of fish population dynamics and ultimately individual fitness (natural selection and evolution) in the study area.\nSee below or here for interactive applications to explore the raw data.\n\n\n\n\nData extraction and manipulation and models are run using targets from the R package targets. Run the following code to rebuild all the targets.\nlibrary(targets) library(quarto)\ntar_make()\nRun this code to rebuild the book.\nquarto::quarto_render(output_format = \"html\")"
  },
  {
    "objectID": "index.html#mainstem-and-tributary-names",
    "href": "index.html#mainstem-and-tributary-names",
    "title": "The West Brook story",
    "section": "Mainstem and tributary names",
    "text": "Mainstem and tributary names\nThere are four locations within the study area. Here are the primary names and aliases:\n\n\nTable 1: River names and aliases\n\n\nPrimary name\nAlias\nAlias-long\nRiver #\n\n\n\n\nWest Brook\nWB\nWest Brook\n1\n\n\nJimmy Brook\nOL\nOpen Large\n2\n\n\nMitchell Brook\nOS\nOpen Small\n3\n\n\nOBear Brook\nIL\nIsolated Large\n4\n\n\n\n\n\n\nCode\n#if/when .qmd's are in quarto subdir\n#tar_config_set(store = \"../_targets\")"
  },
  {
    "objectID": "vizTargets.html",
    "href": "vizTargets.html",
    "title": "1  Visualize targets",
    "section": "",
    "text": "Run code in buildBook.R to update targets and run quarto_render()\nData processing and model running is controlled by targets. Targets are only re-run if the upstream data source changes\n\n\n\nVisualize the targets network\n\n\nCode\ntar_visnetwork()\n\n\n[1] \"loading .Rprofile\"\nLoading required package: dplyr\n\nAttaching package: 'dplyr'\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\nLoading required package: DBI\nLoading required package: RPostgres\n\fWarning message:\nIn result_fetch(res@ptr, n = n) :\n  Don't need to call dbFetch() for statements, only for queries"
  },
  {
    "objectID": "getData.html#databases",
    "href": "getData.html#databases",
    "title": "2  Get data info",
    "section": "2.1 Databases",
    "text": "2.1 Databases\nWe have two types of databases: Environmental and Fish\nThe environmental database contains daily mean temperature and flow data. Flow data are of 2 types 1) from a flow extension model - not tributary-specific and 2) hindcasted based on tributarty-specific flows from 2021 on (these flow variables are labelled ‘…byRiver’). Temperature data are from tributary-specific loggers.\nThere are four main fish databases we want to create:\n1. cdWB_electro West Brook electrofishing data, 3 species (brook trout, brown trout and Atlantic salmon), tagged and untagged fish\n2. cdWB_CMR West Brook electrofishing data formatted for Capture-Mark-Recapture (CMR) analysis for tagged individuals\n3. cdWB_wanding West Brook wanding (portable antenna) data, all tagged salmonids\n4. cdWB_antenna West Brook stationary antenna data, all tagged salmonids\n“cd” stands for “core data”."
  },
  {
    "objectID": "getDataEnv.html#get-environmental-data-target-and-show-data-frame-structure",
    "href": "getDataEnv.html#get-environmental-data-target-and-show-data-frame-structure",
    "title": "3  Get environmental data",
    "section": "3.1 Get environmental data target and show data frame structure",
    "text": "3.1 Get environmental data target and show data frame structure\nFlow data in envDataWB:\nflow = flow extension estimates (WB only)\nflowByArea = flow extension estimates scaled by watershed area\nflowByRiver = Jenn’s hindcasted flow based on tributary-specific flow estimates\n\n\nCode\nenvDataWB <- tar_read(envDataWB_Target)\nstr(envDataWB)\n\n\ntibble [32,189 × 29] (S3: tbl_df/tbl/data.frame)\n $ river          : chr [1:32189] \"wb jimmy\" \"wb jimmy\" \"wb jimmy\" \"wb jimmy\" ...\n $ date           : POSIXct[1:32189], format: \"1997-05-14 04:00:00\" \"1997-05-15 04:00:00\" ...\n $ temperature    : num [1:32189] 11.57 10.4 10.55 8.84 9.09 ...\n $ daily_max_temp : num [1:32189] 11.6 12.3 11.9 10.2 11.6 ...\n $ daily_min_temp : num [1:32189] 11.57 8.96 9.73 7.74 7.45 ...\n $ flow           : num [1:32189] NA NA NA NA NA NA NA NA NA NA ...\n $ dateDate       : Date[1:32189], format: \"1997-05-14\" \"1997-05-15\" ...\n $ yday           : num [1:32189] 134 135 136 137 138 139 140 141 142 143 ...\n $ year           : num [1:32189] 1997 1997 1997 1997 1997 ...\n $ riverOrdered   : Ord.factor w/ 4 levels \"West Brook\"<\"WB Jimmy\"<..: 2 2 2 2 2 2 2 2 2 2 ...\n $ dayLength      : num [1:32189] 51770 51896 52019 52140 52258 ...\n $ precip         : num [1:32189] 0 1.15 0 0 2.34 ...\n $ solarRadiation : num [1:32189] 587 562 259 434 446 ...\n $ swe            : num [1:32189] 78.7 73.6 67.9 63 59.5 ...\n $ airTempMax     : num [1:32189] 20.1 21.2 12.7 15.1 18.9 ...\n $ airTempMin     : num [1:32189] 4.03 6.28 7.47 5.64 2.38 6.59 7.91 3.28 4.98 3.99 ...\n $ vaporPressure  : num [1:32189] 815 953 1034 911 725 ...\n $ airTempMedian  : num [1:32189] 12.1 13.7 10.1 10.4 10.6 ...\n $ ETmm           : num [1:32189] NA NA NA NA NA NA NA NA NA NA ...\n $ Pmm            : num [1:32189] NA NA NA NA NA NA NA NA NA NA ...\n $ flowByRiver_cfs: num [1:32189] NA NA NA NA NA NA NA NA NA NA ...\n $ flowByRiver    : num [1:32189] NA NA NA NA NA NA NA NA NA NA ...\n $ season         : num [1:32189] NA NA NA NA NA NA NA NA NA NA ...\n $ start          : Date[1:32189], format: NA NA ...\n $ end            : Date[1:32189], format: NA NA ...\n $ flowWithTribs  : num [1:32189] NA 0.234 0.227 0.198 0.191 ...\n $ propRiverArea  : num [1:32189] 0.113 0.113 0.113 0.113 0.113 ...\n $ flowByArea     : num [1:32189] NA 0.0265 0.0257 0.0224 0.0216 ...\n $ dummy          : num [1:32189] 1 1 1 1 1 1 1 1 1 1 ...\n\n\nCode\nojs_define(envDataWB_OJS = transpose(envDataWB))"
  },
  {
    "objectID": "getDataEnv.html#plot-flow-over-time-for-the-west-brook-by-year",
    "href": "getDataEnv.html#plot-flow-over-time-for-the-west-brook-by-year",
    "title": "3  Get environmental data",
    "section": "3.2 Plot flow over time for the West Brook by year",
    "text": "3.2 Plot flow over time for the West Brook by year\nFlow estimates from flow extension model for the West Brook\n\n\nCode\n# ggplot(envDataWB %>% filter(riverOrdered == \"West Brook\"), aes(yday, flow)) +\n#   geom_point(size = 0.1) +\n#   #geom_point(size = 0.1, color = \"blue\", aes(yday, flowByRiver)) +\n#   #geom_line() +\n#   scale_x_continuous(\"Day of year\") +\n#   scale_y_continuous(\"Stream flow (m^3/s)\") +\n#   facet_wrap(~year(date))\n\ntable(envDataWB$river, is.na(envDataWB$flow))\n\n\n             \n              FALSE TRUE\n  wb jimmy        0 7717\n  wb mitchell     0 7717\n  wb obear        0 7717\n  west brook   9011   27\n\n\nCode\nggplot(envDataWB, aes(yday, flow)) +\n  geom_point(size = 0.1) +\n  #geom_point(size = 0.1, color = \"blue\", aes(yday, flowByRiver)) +\n  #geom_line() +\n  scale_x_continuous(\"Day of year\") +\n  scale_y_continuous(\"Stream flow (m^3/s)\") +\n  facet_wrap(~year(date))\n\n\n\n\n\nFigure 3.1: Stream flow (m3/s) for the West Brook\n\n\n\n\n\n\nCode\ntable(envDataWB$river, is.na(envDataWB$flowByArea))\n\n\n             \n              FALSE TRUE\n  wb jimmy     7716    1\n  wb mitchell  7716    1\n  wb obear     7716    1\n  west brook   9011   27\n\n\nCode\nggplot(envDataWB, aes(yday, flowByArea, color = river)) +\n  geom_point(size = 0.1) +\n  #geom_point(size = 0.1, color = \"blue\", aes(yday, flowByRiver)) +\n  #geom_line() +\n  scale_x_continuous(\"Day of year\") +\n  scale_y_continuous(\"Stream flow (m^3/s) scaled by watershed area\") +\n  facet_wrap(~year(date))\n\n\n\n\n\nFigure 3.2: Stream flow (m3/s) scaled by watershed area\n\n\n\n\n\n\nCode\ntable(envDataWB$river, is.na(envDataWB$flowByRiver))\n\n\n             \n              FALSE TRUE\n  wb jimmy     7572  145\n  wb mitchell  7572  145\n  wb obear     7572  145\n  west brook   8760  278\n\n\nCode\nggplot(envDataWB, aes(yday, flowByRiver, color = river)) +\n  geom_point(size = 0.1) +\n  #geom_point(size = 0.1, color = \"blue\", aes(yday, flowByRiver)) +\n  #geom_line() +\n  scale_x_continuous(\"Day of year\") +\n  scale_y_continuous(\"Stream flow (m^3/s) hindcasted by river-specific flows\") +\n  facet_wrap(~year(date))\n\n\n\n\n\nFigure 3.3: Hindcasted stream flow (m3/s) for the West Brook and tributaries\n\n\n\n\n\n\nCode\nggplot(envDataWB %>% filter(riverOrdered == \"West Brook\", year %in% (1998:2021)), aes(flow, flowByRiver, color = yday)) +\n  geom_point(size = 0.1) +\n  geom_abline(slope = 1) +\n  scale_y_continuous(\"Stream flow (m^3/s) by river\") +\n  scale_x_continuous(\"Stream flow (m^3/s) from flow extension\") +\n  facet_wrap(~year(date))\n\nggplot(envDataWB %>% filter(year %in% (1998:2021)), aes(flow, flowByRiver, color = river)) +\n  geom_point(size = 0.1) +\n  geom_abline(slope = 1) +\n  scale_y_continuous(\"Stream flow (m^3/s) by river\") +\n  scale_x_continuous(\"Stream flow (m^3/s) from flow extension\") +\n  facet_wrap(~river)\n\n\n\n\n\nFigure 3.4: Stream flow (m3/s) for the West Brook with Jenn’s model predictions\n\n\n\n\n\n\n\nFigure 3.5: Stream flow (m3/s) for the West Brook with Jenn’s model predictions\n\n\n\n\n\n\nCode\nggplot(envDataWB %>% filter(year %in% (1998:2021)), aes(flowByArea, flowByRiver, color = river)) +\n  geom_point(size = 0.1) +\n  geom_abline(slope = 1) +\n  scale_x_continuous(\"Stream flow (m^3/s) by area\") +\n  scale_y_continuous(\"Stream flow (m^3/s) by river\") +\n  facet_wrap(~year(date))\n\nggplot(envDataWB %>% filter(year %in% (1998:2021)), aes(flowByArea, flowByRiver, color = river)) +\n  geom_point(size = 0.1) +\n  #geom_abline(slope = 1) +\n  scale_x_continuous(\"Stream flow (m^3/s) by area\") +\n  scale_y_continuous(\"Stream flow (m^3/s) by river\") +\n  facet_wrap(~river)\n\n\n\n\n\nFigure 3.6: Stream flow (m3/s) for the West Brook with Jenn’s model predictions\n\n\n\n\n\n\n\nFigure 3.7: Stream flow (m3/s) for the West Brook with Jenn’s model predictions\n\n\n\n\n\n\nCode\nviewof rangeYear = Inputs.range([1997, 2022], {\n  label: \"Which year?\",\n  value: 2002,\n  step: 1\n})\n\nenvDataWB_OJSplot = envDataWB_OJS.filter(d => d.year === rangeYear)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nPlot.plot({\n    width: width,\n    height: 350,\n    inset: 10,\n    color: {\n      scheme: \"greys\"\n    },\n    x: { label: \"Stream flow (m3/s)\" },\n    y: { label: \"Stream flow (m3/s) from Jenn's model\" },\n    marks: [\n      Plot.frame(),\n      Plot.dot(envDataWB_OJSplot, {\n        x: \"flow\",\n        y: \"flowByRiver\"\n      })\n    ],\n    facet: {\n      data: envDataWB_OJSplot,\n      x: \"riverOrdered\"\n    }\n  });\n\n\n\n\n\n\n\n\n\nCode\nPlot.plot({\n    width: width,\n    height: 350,\n    inset: 10,\n    color: {\n      type: \"categorical\"\n    },\n    x: { label: \"Day of year\" },\n    y: { label: \"Stream flow (m3/s)\" },\n    marks: [\n      Plot.frame(),\n      Plot.dot(envDataWB_OJSplot, {\n        x: \"dateDate\",\n        y: \"flowByRiver\"\n      })\n    ],\n    marks: [\n      Plot.frame(),\n      Plot.dot(envDataWB_OJSplot, {\n        x: \"dateDate\",\n        y: \"flow\"\n      })\n    ],\n    facet: {\n      data: envDataWB_OJSplot,\n      x: \"riverOrdered\"\n    }\n  });\n\n\n\n\n\n\n\nTest: referring to Figure 3.1."
  },
  {
    "objectID": "getDataEnv.html#plot-temperature-over-time-for-each-tributary",
    "href": "getDataEnv.html#plot-temperature-over-time-for-each-tributary",
    "title": "3  Get environmental data",
    "section": "3.3 Plot temperature over time for each tributary",
    "text": "3.3 Plot temperature over time for each tributary\n\n\nCode\nggplot(envDataWB, aes(date, temperature)) +\n  geom_point(size = 0.2) +\n  scale_x_continuous(\"Date\") +\n  scale_y_continuous(\"Stream temperature (C)\") +\n  facet_wrap(~river)\n\n\n\n\n\nFigure 3.8: Stream temperature (C) by river"
  },
  {
    "objectID": "getDataEnv.html#plot-air-and-water-temperature-over-time-for-each-tributary",
    "href": "getDataEnv.html#plot-air-and-water-temperature-over-time-for-each-tributary",
    "title": "3  Get environmental data",
    "section": "3.4 Plot air and water temperature over time for each tributary",
    "text": "3.4 Plot air and water temperature over time for each tributary\n\n\nCode\ngetTempYear <- function(d, yearIn){\n  d %>% filter(year == yearIn)\n}\n\ntempYear <- getTempYear(envDataWB, 2002)\n#write.csv(tempYear, \"./data/tempYear.csv\")\nojs_define(tempYearOJS0 = tempYear)\n\nggplot(tempYear, aes(date, temperature)) +\n  geom_point(size = 0.2) +\n  geom_point(aes(date, airTempMedian), color = \"blue\", size = 0.2) +\n  scale_x_continuous(\"Date\") +\n  scale_y_continuous(\"Stream temperature (C)\") +\n  facet_wrap(~river)\n\nggplot(tempYear, aes(airTempMedian, temperature, color = yday)) +\n  geom_point(size = 0.2) +\n  scale_x_continuous(\"Air Temperature\") +\n  scale_y_continuous(\"Stream temperature (C)\") +\n  facet_wrap(~river)\n\n\n\n\n\nFigure 3.9: Stream and air temperature (C) by river\n\n\n\n\n\n\n\nFigure 3.10: Stream and air temperature (C) by river\n\n\n\n\nWill move this to its own chapter\n\n\nCode\ntempYearOJS = transpose(tempYearOJS0)\n\n//tempYearOJS0\n//tempYearOJS\ndateChunks\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\ndateChunks = {\n  let daysCount = rangeWindowWidth;\n  let days = [\n    {\n      daysCount0: 0,\n      start: tempYearOJS[0].dateDate,\n      end: tempYearOJS[rangeWindowWidth].dateDate,\n      daysCount: rangeWindowWidth,\n      data: tempYearOJS.filter(\n        (d) => d.yday >= 0 && d.yday <= 0 + rangeWindowWidth\n      )\n    }\n  ];\n\n  do {\n    if (daysCount < 365) {\n      // dont push if the whole year is seleceted, array will be empty\n      days.push({\n        daysCount0: daysCount,\n        start: tempYearOJS[daysCount].dateDate,\n        end: tempYearOJS[daysCount + rangeWindowWidth].dateDate,\n        daysCount: daysCount,\n        data: tempYearOJS.filter(\n          (d) =>\n            d.yday >= daysCount + 1 && d.yday <= daysCount + rangeWindowWidth\n        )\n      });\n    }\n    daysCount = daysCount + rangeWindowWidth;\n  } while (daysCount <= 365);\n  return days;\n}\n\n\n\n\n\n\n\nUse the slider below to set the length (# of days) of each data chunk.\nNumber of data chunks: \nStart date = \nend date = \n\n\nCode\nviewof rangeWindowWidth = Inputs.range([1, 365 - 0], {\n  label: \"Data chunk length\",\n  value: 14,\n  step: 1\n})\n\n\n\n\n\n\n\nOf the data chunks defined above which one should we graph. 0 is the first one and you won’t be able to go past the last one (range updates automatically) but you might get as few as one observation in the last chunk.\n\n\nCode\nviewof rangeWhichWindow = Inputs.range([0, dateChunks.length - 1], {\n  label: \"Which data chunk?\",\n  step: 1,\n  value: 0\n})\n\n\n\n\n\n\n\n\n\nCode\nPlot.plot({\n  width: width,\n  height: 350,\n  inset: 10,\n  color: {\n    scheme: \"greys\"\n  },\n  x: { label: \"Air temperature (C)\" },\n  y: { label: \"Water temperature (C)\" },\n  marks: [\n    Plot.frame(),\n    Plot.dot(dateChunks[rangeWhichWindow].data, {\n      x: \"airTempMedian\",\n      y: \"temperature\",\n      stroke: \"yday\"\n    })//,\n //   Plot.linearRegressionY(dateChunks[rangeWhichWindow].data, {\n//      x: \"airTempMedian\",\n //     y: \"temperature\"\n //   })\n  ],\n  facet: {\n    data: dateChunks[rangeWhichWindow].data,\n    x: \"river\"\n  }\n})\n\n\n\n\n\n\n\n=======================================================\nsome integration alternatives - most are not so slick and are independent from the ojs code blocks above\nSeems like it is best to devleop in observable and copy/paste code blocks in here.\nimport chunk from ‘Playground’\n\n\nCode\nimport { plotChunk } from \"@bletcher/Playground\"\nplotChunk\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\niframe in html block\n\nruntime with javascript in html block\n\n\n\nCredit: Playground by Ben Letcher"
  },
  {
    "objectID": "getDataElectro.html#get-electrofishing-data-target",
    "href": "getDataElectro.html#get-electrofishing-data-target",
    "title": "4  Get electrofishing data",
    "section": "4.1 Get electrofishing data target",
    "text": "4.1 Get electrofishing data target\nShow variables in the dataframe\n\n\nCode\ncdWB_electro <- tar_read(cdWB_electro_target)\nstr(cdWB_electro)\n\n\ntibble [24,304 × 76] (S3: tbl_df/tbl/data.frame)\n $ tag                               : chr [1:24304] \"00088cbed4\" \"00088cbed6\" \"00088cbed7\" \"00088cbed8\" ...\n $ detectionDate                     : POSIXct[1:24304], format: \"2013-03-29 14:08:00\" \"2012-06-08 18:21:00\" ...\n $ sampleName                        : chr [1:24304] \"84\" \"81\" \"90\" \"84\" ...\n $ sampleNumber                      : num [1:24304] 73 70 79 73 71 72 78 71 72 73 ...\n $ river                             : chr [1:24304] \"west brook\" \"west brook\" \"wb obear\" \"west brook\" ...\n $ section                           : num [1:24304] 40 25 3 24 8 6 60 5 5 5 ...\n $ area                              : chr [1:24304] \"inside\" \"inside\" \"trib\" \"inside\" ...\n $ observedLength                    : num [1:24304] 109 113 70 108 61 63 126 70 80 86 ...\n $ survey                            : chr [1:24304] \"shock\" \"shock\" \"shock\" \"shock\" ...\n $ pass                              : num [1:24304] 1 1 1 1 1 1 1 1 1 1 ...\n $ observedWeight                    : num [1:24304] 12.6 15.5 3.5 12.7 2.4 2.4 23.2 4.6 4.9 6.3 ...\n $ comments                          : chr [1:24304] NA NA NA NA ...\n $ cohort                            : num [1:24304] 2012 2011 2014 2012 2012 ...\n $ species                           : chr [1:24304] \"bkt\" \"bnt\" \"bkt\" \"bnt\" ...\n $ dateEmigrated                     : Date[1:24304], format: NA NA ...\n $ sex                               : chr [1:24304] NA NA NA NA ...\n $ year                              : int [1:24304] 2013 2012 2014 2013 2012 2012 2014 2012 2012 2013 ...\n $ season                            : num [1:24304] 1 2 3 1 3 4 2 3 4 1 ...\n $ proportionSampled                 : num [1:24304] 1 1 1 1 1 1 1 1 1 1 ...\n $ lagDetectionDate                  : POSIXct[1:24304], format: \"2013-06-25 18:51:00\" \"2012-09-27 16:50:00\" ...\n $ meanTemperature                   : num [1:24304] 10.7 16.5 8.55 10.2 7.85 ...\n $ meanFlow                          : num [1:24304] 0.5247 0.0338 0.1334 0.5389 0.1188 ...\n $ meanFlowByRiver                   : num [1:24304] 0.5983 0.1351 0.0113 0.6055 0.0112 ...\n $ meanFlowByArea                    : num [1:24304] 0.02412 0.00156 0.10303 0.02477 0.09176 ...\n $ riverOrdered                      : Ord.factor w/ 4 levels \"west brook\"<\"wb jimmy\"<..: 1 1 4 1 4 4 1 4 4 4 ...\n $ readerId                          : logi [1:24304] NA NA NA NA NA NA ...\n $ sectionN                          : num [1:24304] 40 25 3 24 8 6 60 5 5 5 ...\n $ aliveOrDead                       : chr [1:24304] \"alive\" \"alive\" \"alive\" \"alive\" ...\n $ instance                          : logi [1:24304] NA NA NA NA NA NA ...\n $ quarter                           : logi [1:24304] NA NA NA NA NA NA ...\n $ leftOrRight                       : logi [1:24304] NA NA NA NA NA NA ...\n $ habitat                           : logi [1:24304] NA NA NA NA NA NA ...\n $ cover                             : logi [1:24304] NA NA NA NA NA NA ...\n $ justification                     : logi [1:24304] NA NA NA NA NA NA ...\n $ sectionWQuarter                   : logi [1:24304] NA NA NA NA NA NA ...\n $ j                                 : logi [1:24304] NA NA NA NA NA NA ...\n $ date                              : Date[1:24304], format: \"2013-03-29\" \"2012-06-08\" ...\n $ sectionOriginal                   : chr [1:24304] \"40\" \"25\" \"3\" \"24\" ...\n $ inside                            : logi [1:24304] TRUE TRUE TRUE TRUE TRUE TRUE ...\n $ yday                              : int [1:24304] 88 160 260 87 265 347 170 264 347 84 ...\n $ ageInSamples                      : num [1:24304] 3 4 1 3 1 2 4 1 2 3 ...\n $ isYOY                             : logi [1:24304] TRUE FALSE TRUE TRUE TRUE TRUE ...\n $ lagSection                        : num [1:24304] 44 32 3 24 6 6 37 5 5 5 ...\n $ distMoved                         : num [1:24304] -4 -7 0 0 2 0 23 0 0 0 ...\n $ lagObservedWeight                 : num [1:24304] 41.3 18.3 4.8 38.8 2.4 2.3 22.8 4.9 6.3 18.2 ...\n $ lagObservedLength                 : num [1:24304] 154 120 74 150 63 67 130 80 86 117 ...\n $ lagSampleNumber                   : num [1:24304] 74 71 80 74 72 73 79 72 73 74 ...\n $ sampleNumberDiff                  : num [1:24304] 1 1 1 1 1 1 1 1 1 1 ...\n $ grWeight                          : num [1:24304] 0.01346 0.0015 0.00421 0.0138 0 ...\n $ grLength                          : num [1:24304] 0.5102 0.0631 0.0533 0.5188 0.0244 ...\n $ minSample                         : num [1:24304] 73 70 79 71 71 71 78 71 71 71 ...\n $ maxSample                         : num [1:24304] 74 73 80 74 73 73 79 74 74 74 ...\n $ minYear                           : num [1:24304] 1997 1997 1997 1997 1997 ...\n $ moveDir                           : num [1:24304] -1 -1 0 0 1 0 1 0 0 0 ...\n $ sampleInterval                    : num [1:24304] 88.2 110.9 75 81 82 ...\n $ drainage                          : chr [1:24304] \"west\" \"west\" \"west\" \"west\" ...\n $ quarter_length                    : num [1:24304] 5.03 4.75 4.95 5.28 5.25 ...\n $ river_meter                       : num [1:24304] 5208 4903 5164 4883 5272 ...\n $ confluence_river_meter            : num [1:24304] 0 0 5114 0 5114 ...\n $ riverMeter                        : num [1:24304] 5208 4903 5164 4883 5272 ...\n $ nPasses                           : num [1:24304] 1 2 1 1 1 1 2 1 1 1 ...\n $ wGR_Slope                         : num [1:24304] -0.367 -0.278 -0.347 -0.369 -0.347 ...\n $ grWeightS                         : num [1:24304] 0.004307 0.000683 0.002583 0.004426 0 ...\n $ lw_intercept                      : num [1:24304] -5.1 -5.02 -5.1 -5.02 -5.1 ...\n $ lw_slope                          : num [1:24304] 3.06 3.03 3.06 3.03 3.06 ...\n $ cf                                : num [1:24304] 0.0973 0.1074 0.102 0.1008 0.1057 ...\n $ relCF                             : num [1:24304] 0.0724 0.0933 0.0781 0.0877 0.0816 ...\n $ nPerInd                           : int [1:24304] 1 1 1 1 2 2 1 3 3 3 ...\n $ meanTemperatureScaledBySeason     : num [1:24304] 0.2894 0.7778 0.2953 -0.0353 -0.2434 ...\n $ meanFlowScaledBySeason            : num [1:24304] 0.621 -0.646 -0.401 0.711 -0.477 ...\n $ meanFlowByRiverScaledBySeason     : num [1:24304] 1.17 -0.16 -1.1 1.2 -1.1 ...\n $ meanFlowByAreaScaledBySeason      : num [1:24304] -0.428 -0.402 0.375 -0.423 0.282 ...\n $ meanTemperatureScaledBySeasonRiver: num [1:24304] 0.2615 0.8071 0.374 -0.0572 -0.0622 ...\n $ meanFlowScaledBySeasonRiver       : num [1:24304] 0.607 -0.6 -0.631 0.697 -0.693 ...\n $ meanFlowByRiverScaledBySeasonRiver: num [1:24304] 0.999 -0.48 -0.522 1.04 -0.531 ...\n $ meanFlowByAreaScaledBySeasonRiver : num [1:24304] 0.607 -0.6 -0.631 0.697 -0.693 ..."
  },
  {
    "objectID": "getDataElectro.html#counts-by-species",
    "href": "getDataElectro.html#counts-by-species",
    "title": "4  Get electrofishing data",
    "section": "4.2 Counts by species",
    "text": "4.2 Counts by species\nWhat are the counts by species for tagged fish?\n\n\nCode\n# # off tagged individuals/species\ntagged <- cdWB_electro %>%\n  group_by(tag, species)\n \ntagged %>%\n  summarize(n = n()) %>%\n  group_by(species) %>%\n  summarize(n = n())\n\n\n# A tibble: 3 × 2\n  species     n\n  <chr>   <int>\n1 ats      7875\n2 bkt     14611\n3 bnt      7204\n\n\nWhat are the counts by species for untagged fish?\n\n\nCode\n#####\nuntagged <- cdWB_electro %>%\n  filter(is.na(tag))\n\nuntagged %>%\n  group_by(species) %>%\n  summarize(n = n())\n\n\n# A tibble: 3 × 2\n  species     n\n  <chr>   <int>\n1 ats      3419\n2 bkt     16013\n3 bnt      6732\n\n\nPlot length distributions of tagged and untagged fish\n\n\nCode\n######\ncdWB_electro %>%\n  ggplot(aes(observedLength, color = is.na(tag))) +\n  geom_freqpoly()"
  },
  {
    "objectID": "getDataElectro.html#mortality-comments",
    "href": "getDataElectro.html#mortality-comments",
    "title": "4  Get electrofishing data",
    "section": "4.3 Mortality comments",
    "text": "4.3 Mortality comments\nShow comments related to mortalities\n\n\nCode\ncdWB_electro %>%\n  group_by(comments) %>%\n  summarize(n = n()) %>%\n  arrange(desc(n)) %>%\n  filter(str_detect(comments, \"mort\")) %>%\n  print(n = 50)\n\n\n# A tibble: 96 × 2\n   comments                                                                    n\n   <chr>                                                                   <int>\n 1 shock scars/mort                                                          264\n 2 shock mort                                                                136\n 3 tagging mort                                                               52\n 4 shocking mortality                                                         42\n 5 shocking mortality; no picture                                             14\n 6 shocking mort                                                               9\n 7 mort                                                                        8\n 8 shock scars/mort/too small to tag                                           7\n 9 shocking mortality; kept for guts                                           7\n10 tag mort                                                                    5\n11 shock scars/mort/time is estimated based on effort                          3\n12 shocking mort; no video                                                     3\n13 tagging mortality                                                           3\n14 mortality due to lack of oxygen; kept for otoliths                          2\n15 mortality due to ms222 or warm weather                                      2\n16 mortality due to shocking                                                   2\n17 mortality due to shocking; no picture                                       2\n18 mortality due to tagging or warm weather                                    2\n19 ms222 mortality; kept for otoliths                                          2\n20 shocking mortality; kept                                                    2\n21 shocking mortality; kept for guts; no picture                               2\n22 shocking mortality; no tag; no picture                                      2\n23 smolt, shock scars/mort                                                     2\n24 tagging or ms222 mortality? kept for otoliths                               2\n25 walking mortality                                                           2\n26 additional genetic sample / tagging mort                                    1\n27 additional genetic sample/shock scars/mort                                  1\n28 braid sec 29&30/shock scars/mort                                            1\n29 bucket mortality; no picture                                                1\n30 dope mort-with wrong picture label (as 7-1)                                 1\n31 electrofishing mortality (tim did it)                                       1\n32 ethanol mortality courtesy of melissa                                       1\n33 fin clip but no tag and shock mort                                          1\n34 four was a stepped on mort                                                  1\n35 isolated pool/shock scars/mort                                              1\n36 mort (222, tag?)                                                            1\n37 mort (looks like a bnt)                                                     1\n38 mort found                                                                  1\n39 mort stepped on                                                             1\n40 mort; chunk out of side (bird)                                              1\n41 mort; no tag or scales                                                      1\n42 mortality ; found the fish dead; looks like bites on the head and scra…     1\n43 mortality ; no picture                                                      1\n44 mortality due to eating; tag found in bnt (249 mm, 173.4 g)                 1\n45 mortality due to lack of oxygen (stuck on side of bucket)                   1\n46 mortality due to lavage                                                     1\n47 mortality; cause unknown                                                    1\n48 mortality; stepped on                                                       1\n49 mortality; stepped on; no picture                                           1\n50 mortality; tag/ms222?                                                       1\n# … with 46 more rows"
  },
  {
    "objectID": "getDataElectro.html#length-weight-graph",
    "href": "getDataElectro.html#length-weight-graph",
    "title": "4  Get electrofishing data",
    "section": "4.4 Length-weight graph",
    "text": "4.4 Length-weight graph\n\n\nCode\nggplot(cdWB_electro, aes(observedLength, observedWeight, color = species)) +\n  geom_point(size = 0.75, alpha = 0.1) +\n  scale_x_log10(\"Length (mm)\") +\n  scale_y_log10(\"Mass (mg)\") +\n#  theme_publication() +\n  facet_wrap(~ species)\n\n\n\n\n\nFigure 4.1: Length - mass graph"
  },
  {
    "objectID": "getDataElectro.html#length-weight-regression",
    "href": "getDataElectro.html#length-weight-regression",
    "title": "4  Get electrofishing data",
    "section": "4.5 Length-weight regression",
    "text": "4.5 Length-weight regression\nSimple linear regression statistics\n\n\nCode\nlwReg <- cdWB_electro %>%\n  nest_by(species) %>%\n  mutate(reg = list(lm(log(observedWeight) ~ log(observedLength), data = data)))\n\nlwReg %>% summarise(broom::tidy(reg))  \n\n\n# A tibble: 6 × 6\n# Groups:   species [3]\n  species term                estimate std.error statistic p.value\n  <chr>   <chr>                  <dbl>     <dbl>     <dbl>   <dbl>\n1 ats     (Intercept)           -11.4    0.00942    -1210.       0\n2 ats     log(observedLength)     3.00   0.00208     1442.       0\n3 bkt     (Intercept)           -11.5    0.00621    -1859.       0\n4 bkt     log(observedLength)     3.02   0.00140     2155.       0\n5 bnt     (Intercept)           -11.5    0.00686    -1670.       0\n6 bnt     log(observedLength)     3.01   0.00149     2023.       0\n\n\nCode\nlwReg %>% summarise(broom::glance(reg))\n\n\n# A tibble: 3 × 13\n# Groups:   species [3]\n  species r.squared adj.r.…¹  sigma stati…² p.value    df logLik     AIC     BIC\n  <chr>       <dbl>    <dbl>  <dbl>   <dbl>   <dbl> <dbl>  <dbl>   <dbl>   <dbl>\n1 ats         0.989    0.989 0.0945  2.08e6       0     1 22663. -45319. -45295.\n2 bkt         0.991    0.991 0.112   4.64e6       0     1 32555. -65105. -65079.\n3 bnt         0.996    0.996 0.0858  4.09e6       0     1 18345. -36683. -36660.\n# … with 3 more variables: deviance <dbl>, df.residual <int>, nobs <int>, and\n#   abbreviated variable names ¹​adj.r.squared, ²​statistic"
  },
  {
    "objectID": "getDataElectro.html#electrofishing-data-metadata",
    "href": "getDataElectro.html#electrofishing-data-metadata",
    "title": "4  Get electrofishing data",
    "section": "4.6 Electrofishing data metadata",
    "text": "4.6 Electrofishing data metadata\n\n4.6.1 adapted from https://github.com/Conte-Ecology/westBrookData/blob/master/getWBData/vignettes/westBrookDataIntro.Rmd\n\n4.6.1.1 Column explanations\ntag PIT tag number, unique identifier, character\ncohort year the fish was born, assigned based on size at initial capture and size distributions of fish of known age\ndetectionDate mostly self explanatory, but filled in for unobserved fish as the median capture date for all observed fish.\nsampleName An ordered identifier for sampling mostly for recognition by people who did the sampling. This is not very clean because early in the study samples were not taken at strictly seasonal intervals. sampleNumber is probably more useful and intuitive.\nsampleNumber A tidier identifier for samples that strictly increases by one for each season (4/yr)\nriver River the fish was observed in. NA if the fish was not observed.\nwest brook The mainstem\nwb jimmy Larger tributary that fish can move back and forth into from WB section 31 (Open Large from Letcher et al 2015)\nwb mitchell Smaller tributary that fish can move back and forth into from WB section 35 (Open Small from Letcher et al 2015)\nwb obear Smaller tributary that has a waterfall at its mouth, so fish can only move downstream into WB section 20 (Isolated Small from Letcher et al 2015)\nsection Identifier for the 20m section that the fish was captured in. This is ordered from downstream to upstream starting at 1 within each river.\narea inside = section 1:47 in the west brook, trib = tributary (not west brook), below = sections below inside sections, above = sections above the inside sections\nobservedLength in mm\nsurvey shock = electroshocking survey\npass electrofishing pass. 1 or 2 in the west brook (inside), 1 in tribs\nobservedWeight in g wet weight\nspecies\nbkt = brook trout (native, self-sustained population)\nbnt = brown trout (non-native, self-sustained population)\nats = atlantic salmon (stocked through 2005, no reproduction)\ndateEmigrated date of emigration from inside/tribs if observed to emigrate. Coded as emigrated if last observation was on PIT antenna or captured below or above\nsex NA = unknown, f = female, m = male, p = precocious male (salmon only)\nenc\nLogical, was the fish observed? (1 = yes, 0 = no)\nageInSamples number of seasons since summer of the year of birth (1st summer = 0)\nsampleIndex sampleNumber rescaled to start at 1 and end at length(unique(sampleNumber)) for ease of looping in JAGS\ntagIndex ordered, unique individual identifier 1:N\nyear of sample\nseason 1 = spring, 2 = summer, 3 = fall, 4 = winter\nproportionSampled Occasionally the sample was not complete (e.g., skipped west brook but did the tributaries). This is the proportion of sections in the river of capture that were sampled.\nlagDetectionDate detection date lagged back one observation\nmeanTemperature mean temperature between observation dates. If individual was not observed, median observation date for the sampling occasion was used.\nmeanFlow mean flow between observation dates. If individual was not observed, median observation date for the sampling occasion was used.\nknownZ z is alive state, so this is ‘1’ between first and last capture, and NA otherwise, unless the fish was known to be dead (e.g. tagging mortality or observed dead) in which case the value is set to ‘2’. There is also an option in the addKnownZ() function to useAntenna. This is useAntenna = FALSE by default, but could be set to TRUE to set knownZ to 1 up to the last antenna observation."
  },
  {
    "objectID": "getDataCMR.html#get-electrofishing-data-target-wb",
    "href": "getDataCMR.html#get-electrofishing-data-target-wb",
    "title": "5  Create Capture-Recapture data",
    "section": "5.1 Get electrofishing data target WB",
    "text": "5.1 Get electrofishing data target WB\nWest brook and 3 tributaries\n\n\nCode\ncdWB_CMR0_WB <- tar_read(eh_WB_2002_2014_target)\nstr(cdWB_CMR0_WB)\n\n\nList of 16\n $ eh         : num [1:19981, 1:12] 1 1 1 1 1 1 1 1 1 1 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:12] \"ais_1\" \"ais_2\" \"ais_3\" \"ais_4\" ...\n $ flow       : num [1:19981, 1:12] -0.707 -0.679 -0.556 -0.767 -0.531 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:12] \"ais_1\" \"ais_2\" \"ais_3\" \"ais_4\" ...\n $ flowByRiver: num [1:19981, 1:12] -0.949 0.323 0.615 -0.951 0.652 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:12] \"ais_1\" \"ais_2\" \"ais_3\" \"ais_4\" ...\n $ temperature: num [1:19981, 1:12] 0.0892 -0.324 0.3839 -0.3903 0.298 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:12] \"ais_1\" \"ais_2\" \"ais_3\" \"ais_4\" ...\n $ river      : chr [1:19981, 1:12] \"wb obear\" \"west brook\" \"west brook\" \"wb obear\" ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:12] \"ais_1\" \"ais_2\" \"ais_3\" \"ais_4\" ...\n $ section    : num [1:19981, 1:12] 82 23 30 87 42 20 84 90 27 51 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:12] \"ais_1\" \"ais_2\" \"ais_3\" \"ais_4\" ...\n $ riverN     : num [1:19981, 1:12] 4 1 1 4 1 1 4 4 1 2 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:12] \"ais_1\" \"ais_2\" \"ais_3\" \"ais_4\" ...\n $ isYOY      : num [1:19981, 1:12] 1 1 1 1 1 1 1 1 1 1 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:12] \"ais_1\" \"ais_2\" \"ais_3\" \"ais_4\" ...\n $ length     : num [1:19981, 1:12] 70 86 89 61 60 64 70 62 87 73 ...\n  ..- attr(*, \"dimnames\")=List of 2\n  .. ..$ : NULL\n  .. ..$ : chr [1:12] \"ais_1\" \"ais_2\" \"ais_3\" \"ais_4\" ...\n $ tags       : tibble [19,981 × 1] (S3: tbl_df/tbl/data.frame)\n  ..$ tag: chr [1:19981] \"00088cbed7\" \"00088cbed8\" \"00088cbedb\" \"00088cbedd\" ...\n $ cohorts    : tibble [19,981 × 1] (S3: tbl_df/tbl/data.frame)\n  ..$ cohort: num [1:19981] 2014 2012 2014 2012 2014 ...\n $ seasons    : tibble [79,133 × 1] (S3: tbl_df/tbl/data.frame)\n  ..$ season: num [1:79133] 3 4 1 2 3 4 1 2 3 4 ...\n $ species    : tibble [19,981 × 1] (S3: tbl_df/tbl/data.frame)\n  ..$ species: chr [1:19981] \"bkt\" \"bnt\" \"bkt\" \"bkt\" ...\n $ first      : int [1:19981] 1 1 1 1 1 1 1 1 1 1 ...\n $ last       : num [1:19981] 4 12 4 12 4 12 12 4 12 4 ...\n $ data       : tibble [199,614 × 47] (S3: tbl_df/tbl/data.frame)\n  ..$ cohort               : num [1:199614] 2012 2012 2012 2012 2012 ...\n  ..$ tag                  : chr [1:199614] \"00088cbed0\" \"00088cbed0\" \"00088cbed0\" \"00088cbed0\" ...\n  ..$ detectionDate        : POSIXct[1:199614], format: \"2013-03-25 04:00:00\" \"2013-06-05 04:00:00\" ...\n  ..$ sampleName           : chr [1:199614] \"84\" \"85\" \"86\" \"87\" ...\n  ..$ sampleNumber         : num [1:199614] 73 74 75 76 77 78 79 80 81 82 ...\n  ..$ river                : chr [1:199614] \"wb obear\" \"wb obear\" \"wb obear\" \"wb obear\" ...\n  ..$ section              : chr [1:199614] \"7\" NA NA NA ...\n  ..$ area                 : chr [1:199614] \"trib\" NA NA NA ...\n  ..$ observedLength       : num [1:199614] 62 NA NA NA NA NA NA NA NA NA ...\n  ..$ survey               : chr [1:199614] \"shock\" NA NA NA ...\n  ..$ pass                 : num [1:199614] 1 NA NA NA NA NA NA NA NA NA ...\n  ..$ observedWeight       : num [1:199614] 1.9 NA NA NA NA NA NA NA NA NA ...\n  ..$ species              : chr [1:199614] \"bkt\" \"bkt\" \"bkt\" \"bkt\" ...\n  ..$ dateEmigrated        : Date[1:199614], format: NA NA ...\n  ..$ sex                  : chr [1:199614] NA NA NA NA ...\n  ..$ enc                  : num [1:199614] 1 0 0 0 0 0 0 0 0 0 ...\n  ..$ ageInSamples         : num [1:199614] 3 4 5 6 7 8 9 10 11 12 ...\n  ..$ sampleIndex          : num [1:199614] 63 64 65 66 67 68 69 70 71 72 ...\n  ..$ tagIndex             : num [1:199614] 1 1 1 1 1 1 1 1 1 1 ...\n  ..$ year                 : num [1:199614] 2013 2013 2013 2013 2014 ...\n  ..$ season               : num [1:199614] 1 2 3 4 1 2 3 4 1 2 ...\n  ..$ proportionSampled    : num [1:199614] 1 NA NA NA NA NA NA NA NA NA ...\n  ..$ lagDetectionDate     : POSIXct[1:199614], format: \"2013-06-05 04:00:00\" \"2013-09-18 04:00:00\" ...\n  ..$ meanTemperature      : num [1:199614] 8.62 16.51 9.44 0.94 10.52 ...\n  ..$ meanFlow             : num [1:199614] 0.38874 0.30331 0.00882 0.31319 0.58363 ...\n  ..$ meanFlowByRiver      : num [1:199614] 0.0217 0.1632 0.0432 0.0732 0.2446 ...\n  ..$ knownZ               : num [1:199614] 1 NA NA NA NA NA NA NA NA NA ...\n  ..$ firstObserved        : num [1:199614] 73 73 73 73 73 73 73 73 73 73 ...\n  ..$ lastObserved         : num [1:199614] 73 73 73 73 73 73 73 73 73 73 ...\n  ..$ isFirstObserved      : logi [1:199614] TRUE FALSE FALSE FALSE FALSE FALSE ...\n  ..$ isLastObserved       : logi [1:199614] TRUE FALSE FALSE FALSE FALSE FALSE ...\n  ..$ riverTagged          : chr [1:199614] \"wb obear\" \"wb obear\" \"wb obear\" \"wb obear\" ...\n  ..$ meanMeanFlow         : num [1:199614] 0.409 0.137 0.307 0.464 0.409 ...\n  ..$ sdMeanFlow           : num [1:199614] 0.155 0.126 0.246 0.113 0.155 ...\n  ..$ meanMeanFlowByRiver  : num [1:199614] 0.1368 0.0612 0.0891 0.1094 0.1368 ...\n  ..$ sdMeanFlowByRiver    : num [1:199614] 0.0837 0.0468 0.0819 0.0639 0.0837 ...\n  ..$ meanMeanTemperature  : num [1:199614] 10.39 16.23 8.42 1.65 10.39 ...\n  ..$ sdMeanTemperature    : num [1:199614] 1.202 0.711 1.455 0.616 1.202 ...\n  ..$ meanFlowScaled       : num [1:199614] -0.129 1.313 -1.215 -1.33 1.124 ...\n  ..$ meanFlowByRiverScaled: num [1:199614] -1.375 2.182 -0.56 -0.566 1.287 ...\n  ..$ meanTemperatureScaled: num [1:199614] -1.472 0.402 0.7 -1.149 0.105 ...\n  ..$ isYOY                : num [1:199614] 1 2 2 2 2 2 2 2 2 2 ...\n  ..$ riverN               : num [1:199614] 4 4 4 4 4 4 4 4 4 4 ...\n  ..$ riverOrdered         : Ord.factor w/ 4 levels \"West Brook\"<\"WB Jimmy\"<..: 4 4 4 4 4 4 4 4 4 4 ...\n  ..$ indexByCohort        : int [1:199614] 1 1 1 1 1 1 1 1 1 1 ...\n  ..$ sectionTMP           : chr [1:199614] \"7\" NA NA NA ...\n  ..$ sectionRiverN        : num [1:199614] 86 NA NA NA NA NA NA NA NA NA ...\n\n\n\n\nCode\n# for(i in 1:length(cdWB_CMR0_WB)){\n#   write.csv(cdWB_CMR0_WB[i], paste0(\"./data/outForXiaowei/\", names(cdWB_CMR0_WB)[i], \".csv\"))\n# }\n\n\n\n\nCode\ncdWB_CMR0_WB$data %>% \n  group_by(riverOrdered, cohort) %>% \n  summarize(n = n()) %>%\n  pivot_wider(values_from = \"n\", names_from = \"riverOrdered\") %>%\n  kable() %>%\n  kable_styling(full_width = T)\n\n\n\n\nTable 5.1:  Count of CMR data (including 0’s) by river \n \n  \n    cohort \n    West Brook \n    WB Jimmy \n    WB Mitchell \n    WB OBear \n  \n \n\n  \n    2002 \n    13023 \n    1440 \n    626 \n    2139 \n  \n  \n    2003 \n    24489 \n    2396 \n    444 \n    2747 \n  \n  \n    2004 \n    24963 \n    3637 \n    2707 \n    1666 \n  \n  \n    2005 \n    5471 \n    943 \n    1003 \n    723 \n  \n  \n    2006 \n    6797 \n    1973 \n    533 \n    1322 \n  \n  \n    2007 \n    3958 \n    1530 \n    1068 \n    968 \n  \n  \n    2008 \n    8668 \n    1424 \n    131 \n    886 \n  \n  \n    2009 \n    18696 \n    3497 \n    1889 \n    5081 \n  \n  \n    2010 \n    7693 \n    689 \n    281 \n    453 \n  \n  \n    2011 \n    2202 \n    1792 \n    395 \n    394 \n  \n  \n    2012 \n    16663 \n    2377 \n    1721 \n    5305 \n  \n  \n    2013 \n    4999 \n    1246 \n    304 \n    729 \n  \n  \n    2014 \n    3853 \n    528 \n    427 \n    725 \n  \n\n\n\n\n\n\n\n\nCode\ncdWB_CMR0_WB$data %>% \n  filter(enc == 1) %>% \n  group_by(riverOrdered, cohort) %>% \n  summarize(n = n()) %>%\n  pivot_wider(values_from = \"n\", names_from = \"riverOrdered\") %>%\n  kable() %>%\n  kable_styling(full_width = T)\n\n\n\n\nTable 5.2:  Count of CMR data (encounters only) by river \n \n  \n    cohort \n    West Brook \n    WB Jimmy \n    WB Mitchell \n    WB OBear \n  \n \n\n  \n    2002 \n    2974 \n    379 \n    209 \n    564 \n  \n  \n    2003 \n    4932 \n    491 \n    142 \n    709 \n  \n  \n    2004 \n    5140 \n    734 \n    638 \n    426 \n  \n  \n    2005 \n    939 \n    216 \n    204 \n    163 \n  \n  \n    2006 \n    1350 \n    379 \n    77 \n    278 \n  \n  \n    2007 \n    882 \n    318 \n    273 \n    228 \n  \n  \n    2008 \n    1606 \n    273 \n    33 \n    193 \n  \n  \n    2009 \n    3375 \n    569 \n    403 \n    1075 \n  \n  \n    2010 \n    1294 \n    164 \n    73 \n    99 \n  \n  \n    2011 \n    470 \n    426 \n    71 \n    104 \n  \n  \n    2012 \n    2731 \n    490 \n    282 \n    1196 \n  \n  \n    2013 \n    1184 \n    433 \n    99 \n    216 \n  \n  \n    2014 \n    1431 \n    248 \n    236 \n    395"
  },
  {
    "objectID": "getDataCMR.html#get-electrofishing-data-target-ob",
    "href": "getDataCMR.html#get-electrofishing-data-target-ob",
    "title": "5  Create Capture-Recapture data",
    "section": "5.2 Get electrofishing data target OB",
    "text": "5.2 Get electrofishing data target OB\nO’Bear also known as Isolated Large\n\n\nCode\ncdWB_CMR0_OB <- tar_read(eh_OB_2002_2014_target)\n\n\n\n\nCode\ncdWB_CMR0_OB$data %>% \n  group_by(riverOrdered, cohort) %>% \n  summarize(n = n()) %>%\n  pivot_wider(values_from = \"n\", names_from = \"riverOrdered\") %>%\n  kable() %>%\n  kable_styling(full_width = T)\n\n\n\n\nTable 5.3:  Count of CMR data (including 0’s) by river \n \n  \n    cohort \n    West Brook \n    WB Jimmy \n    WB OBear \n  \n \n\n  \n    2002 \n    11 \n    NA \n    2139 \n  \n  \n    2003 \n    23 \n    NA \n    2747 \n  \n  \n    2004 \n    61 \n    9 \n    1666 \n  \n  \n    2006 \n    34 \n    NA \n    1322 \n  \n  \n    2007 \n    35 \n    NA \n    968 \n  \n  \n    2009 \n    170 \n    8 \n    5081 \n  \n  \n    2010 \n    10 \n    8 \n    453 \n  \n  \n    2011 \n    17 \n    NA \n    394 \n  \n  \n    2012 \n    116 \n    8 \n    5305 \n  \n  \n    2013 \n    12 \n    NA \n    729 \n  \n  \n    2014 \n    2 \n    NA \n    725 \n  \n  \n    2005 \n    NA \n    NA \n    723 \n  \n  \n    2008 \n    NA \n    NA \n    886 \n  \n\n\n\n\n\n\n\n\nCode\ncdWB_CMR0_OB$data %>% \n  filter(enc == 1) %>% \n  group_by(riverOrdered, cohort) %>% \n  summarize(n = n()) %>%\n  pivot_wider(values_from = \"n\", names_from = \"riverOrdered\") %>%\n  kable() %>%\n  kable_styling(full_width = T)\n\n\n\n\nTable 5.4:  Count of CMR data (encounters only) by river \n \n  \n    cohort \n    West Brook \n    WB Jimmy \n    WB OBear \n  \n \n\n  \n    2002 \n    2 \n    NA \n    564 \n  \n  \n    2003 \n    5 \n    NA \n    709 \n  \n  \n    2004 \n    15 \n    2 \n    426 \n  \n  \n    2006 \n    7 \n    NA \n    278 \n  \n  \n    2007 \n    8 \n    NA \n    228 \n  \n  \n    2009 \n    27 \n    1 \n    1075 \n  \n  \n    2010 \n    1 \n    1 \n    99 \n  \n  \n    2011 \n    2 \n    NA \n    104 \n  \n  \n    2012 \n    13 \n    1 \n    1196 \n  \n  \n    2013 \n    4 \n    NA \n    216 \n  \n  \n    2014 \n    1 \n    NA \n    395 \n  \n  \n    2005 \n    NA \n    NA \n    163 \n  \n  \n    2008 \n    NA \n    NA \n    193"
  },
  {
    "objectID": "getDataWanding.html#get-wanding-data-targets",
    "href": "getDataWanding.html#get-wanding-data-targets",
    "title": "6  Get wanding data",
    "section": "6.1 Get wanding data targets",
    "text": "6.1 Get wanding data targets\n\n\nCode\nlibrary(targets)\n\ncdWB_wanding0 <- tar_read(cdWB_wanding0_target)\nstr(cdWB_wanding0)\n\n\ntibble [14,880 × 25] (S3: tbl_df/tbl/data.frame)\n $ tag            : chr [1:14880] \"00088cf41b\" \"00088cf41b\" \"00088cf41b\" \"00088cf435\" ...\n $ detectionDate  : POSIXct[1:14880], format: \"2010-09-27 15:08:45\" \"2010-10-18 18:16:22\" ...\n $ sampleName     : chr [1:14880] \"92710.00\" \"101810.00\" \"102510.00\" \"12610.00\" ...\n $ river          : chr [1:14880] \"wb jimmy\" \"wb jimmy\" \"wb jimmy\" \"wb jimmy\" ...\n $ section        : num [1:14880] 13 14 14 2 6 8 8 11 12 10 ...\n $ area           : chr [1:14880] \"trib\" \"trib\" \"trib\" \"trib\" ...\n $ survey         : chr [1:14880] \"portableAntenna\" \"portableAntenna\" \"portableAntenna\" \"portableAntenna\" ...\n $ readerId       : chr [1:14880] \"iso\" \"iso\" \"iso\" \"iso\" ...\n $ aliveOrDead    : chr [1:14880] \"alive\" \"alive\" NA \"alive\" ...\n $ instance       : num [1:14880] 1 2 3 1 1 1 2 1 1 1 ...\n $ pass           : num [1:14880] NA NA NA NA NA NA NA NA NA NA ...\n $ quarter        : num [1:14880] 2 1 1 4 2 4 4 3 4 2 ...\n $ leftOrRight    : chr [1:14880] \"l\" \"m\" NA \"r\" ...\n $ habitat        : chr [1:14880] \"pool\" \"run\" NA \"pool\" ...\n $ cover          : chr [1:14880] NA NA NA NA ...\n $ justification  : chr [1:14880] NA NA NA NA ...\n $ cohort         : num [1:14880] 2010 2010 2010 2010 2009 ...\n $ species        : chr [1:14880] \"bkt\" \"bkt\" \"bkt\" \"bkt\" ...\n $ dateEmigrated  : Date[1:14880], format: NA NA ...\n $ sex            : chr [1:14880] NA NA NA NA ...\n $ riverOrdered   : Ord.factor w/ 4 levels \"West Brook\"<\"WB Jimmy\"<..: 2 2 2 2 2 2 2 2 2 3 ...\n $ sectionN       : num [1:14880] 13 14 14 2 6 8 8 11 12 10 ...\n $ year           : num [1:14880] 2010 2010 2010 2010 2010 2010 2010 2010 2010 2010 ...\n $ j              : num [1:14880] 270 291 298 340 333 305 313 270 270 236 ...\n $ sectionWQuarter: num [1:14880] 13.25 14 14 2.75 6.25 ...\n\n\nCode\ncdWB_wandingTribs3 <- tar_read(cdWB_wandingTribs3_target)\n\ncdWB_wandingWB2 <- tar_read(cdWB_wandingWB2_target)\ncdWB_wandingWB3 <- tar_read(cdWB_wandingWB3_target)\n\n\n\n\nCode\ncdWB_wanding0 %>% \n  group_by(riverOrdered, cohort) %>% \n  summarize(n = n()) %>%\n  pivot_wider(values_from = \"n\", names_from = \"riverOrdered\") %>%\n  arrange(cohort) %>%\n  kable() %>%\n  kable_styling(full_width = T)\n\n\n\n\nTable 6.1:  Count of wanding data by river \n \n  \n    cohort \n    West Brook \n    WB Jimmy \n    WB Mitchell \n    WB OBear \n  \n \n\n  \n    1996 \n    4 \n    NA \n    NA \n    NA \n  \n  \n    1997 \n    9 \n    NA \n    NA \n    NA \n  \n  \n    1998 \n    33 \n    41 \n    4 \n    NA \n  \n  \n    1999 \n    141 \n    44 \n    2 \n    2 \n  \n  \n    2000 \n    352 \n    211 \n    116 \n    66 \n  \n  \n    2001 \n    1966 \n    1022 \n    414 \n    639 \n  \n  \n    2002 \n    2169 \n    615 \n    467 \n    894 \n  \n  \n    2003 \n    80 \n    650 \n    277 \n    1004 \n  \n  \n    2004 \n    195 \n    118 \n    298 \n    3 \n  \n  \n    2005 \n    61 \n    51 \n    90 \n    NA \n  \n  \n    2006 \n    NA \n    95 \n    126 \n    NA \n  \n  \n    2007 \n    NA \n    125 \n    256 \n    NA \n  \n  \n    2008 \n    NA \n    186 \n    41 \n    NA \n  \n  \n    2009 \n    NA \n    1089 \n    840 \n    NA \n  \n  \n    2010 \n    NA \n    50 \n    28 \n    NA \n  \n  \n    NA \n    6 \n    NA \n    NA \n    NA"
  },
  {
    "objectID": "getDataWanding.html#all-wanding-data",
    "href": "getDataWanding.html#all-wanding-data",
    "title": "6  Get wanding data",
    "section": "6.2 All wanding data",
    "text": "6.2 All wanding data\nBased on the following, looks like best data for analysis are trout in the tribs in 2009 2010. Need to decide what to do for salmon\n\n\nCode\n#everything\nggplot(cdWB_wanding0, aes(j, sectionWQuarter, color = tag) )+\n  geom_point()+\n  geom_line() +\n  scale_y_continuous(limits = c(0,50))+\n  theme(legend.position = \"none\")+\n  ggtitle(\"Everything\") +\n  facet_grid(riverOrdered ~ year)\n\n\n\n\n\nCode\n#everything\nggplot(filter(cdWB_wanding0, aliveOrDead != 'dead'), aes(j, sectionWQuarter, color = tag) )+\n  geom_point()+\n  geom_line() +\n  scale_y_continuous(limits = c(0, 50))+\n  theme(legend.position = \"none\")+\n  ggtitle(\"Not dead\") +\n  facet_grid(river~year)"
  },
  {
    "objectID": "getDataWanding.html#tributaries",
    "href": "getDataWanding.html#tributaries",
    "title": "6  Get wanding data",
    "section": "6.3 Tributaries",
    "text": "6.3 Tributaries\n\n\nCode\n# Tribs\n# Loop over species\nfor (s in c(\"bkt\",\"bnt\") ) {\n  tmp2 <-\n    ggplot(filter(cdWB_wanding0, river!=\"west brook\" & species == s & aliveOrDead != 'dead'), \n           aes(detectionDate,sectionWQuarter, group = tag))+\n    geom_point(aes(shape = aliveOrDead), size = 2)+\n    geom_line() +\n    scale_y_continuous(limits = c(-2, 15))+\n    #  theme(legend.position=\"none\")+\n    ggtitle(paste(\"Tribs\", s, \"not dead\")) +\n    facet_grid(river ~ year, scales = 'free')\n  print(tmp2)\n}\n\n\n\n\n\n\n\n\n\n6.3.1 Which species_year_tributary?\nRaw data graphs for the 4 sets of data to focus on\n\n\nCode\n# Tribs - focus on a year\nfor (s in c(\"bkt\", \"bnt\") ) {\n  for (y in c(2009, 2010) ) {\n    for (r in c(\"wb mitchell\", \"wb jimmy\", \"wb obear\")) {\n\n      tmp <-\n        ggplot(filter(cdWB_wanding0, river == r & species == s & year == y & aliveOrDead != 'dead'), \n               aes(detectionDate,sectionWQuarter, color = tag))+\n        geom_point(aes(shape=aliveOrDead),size=2)+\n        geom_line() +\n        #  scale_y_continuous(limits=c(0,15))+\n        theme(legend.position=\"none\")+\n        ggtitle(paste(\"Tribs\", s, y, r, \"not dead\"))\n      #  facet_grid(species~year,scales='free')\n\n      print(tmp)\n    }\n  }\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n6.3.2 Movement\nCounts of observations by month, river, year\n\n\nCode\ntable(cdWB_wandingTribs3$month, cdWB_wandingTribs3$river, cdWB_wandingTribs3$year)\n\n\n, ,  = 2009\n\n    \n     wb jimmy wb mitchell\n  9        42          66\n  10      185         161\n  11      170         117\n\n, ,  = 2010\n\n    \n     wb jimmy wb mitchell\n  9        20          14\n  10       46          17\n  11       21          12\n\n\nCode\n ggplot(cdWB_wandingTribs3, aes(moveRate, color = species)) +\n   geom_freqpoly() +\n   facet_grid(river ~ year)\n\n\n\n\n\nFrequency distribution of movement rates\n\n\nCode\nggplot(cdWB_wandingTribs3, aes(moveRate, linetype = species)) +\n  geom_freqpoly(binwidth=5, boundary = min(cdWB_wandingTribs3$moveRate)) +\n  scale_x_continuous(\"Movement rate (m/week)\") +\n  scale_y_continuous(\"Frequency\") +\n  theme_bw(base_size=25)+\n  theme( strip.background = element_blank()\n         #strip.text = element_blank()\n         #legend.position = \"none\"\n         ) +\n  facet_grid(~ river)\n\n\n\n\n\n\n\n6.3.3 Intervals\n\n\nCode\n# #Cut moveTime into intervals to make sure patterns look same for recaptures of different intervals\n\n# ggplot(cdWB_wandingTribs4_target, aes( moveRate, color=interval ) ) +\n#   geom_freqpoly() +\n#   facet_grid(river~year+species)\n\n #Try a boxplot\n ggplot( cdWB_wandingTribs3 %>% filter(month %in% 9:11), \n         aes( factor(month),moveRate, color = species ) ) +\n   geom_boxplot() +\n   facet_grid(river~year)\n\n\n\n\n\n\n\n6.3.4 Random effect models\n\n\nCode\n# RE model for individual movement variation\n# \n mod0 <- lmer(abs(moveRate) ~ (1|tag), data = cdWB_wandingTribs3)\n# ####\n mod1 <- lmer(abs(moveRate) ~ factor(species) + (1|tag), data = cdWB_wandingTribs3)\n# ####\n mod2 <- lmer(abs(moveRate) ~ factor(species) * factor(month) + (1|tag), data = cdWB_wandingTribs3)\n# ####\n mod3 <- lmer(abs(moveRate) ~ factor(species) + factor(month) + factor(year) + (1|tag), data = cdWB_wandingTribs3)\n# ####\n mod4 <- lmer(abs(moveRate) ~ factor(species) * factor(month) * factor(year) + (1|tag), data = cdWB_wandingTribs3)\n# \n AIC(mod0,mod1,mod2,mod3,mod4) %>% arrange(AIC)\n\n\n     df      AIC\nmod4 14 7388.654\nmod2  8 7429.937\nmod3  7 7434.280\nmod1  4 7460.786\nmod0  3 7466.674\n\n\nCode\n# \n summary(mod4)\n\n\nLinear mixed model fit by REML ['lmerMod']\nFormula: abs(moveRate) ~ factor(species) * factor(month) * factor(year) +  \n    (1 | tag)\n   Data: cdWB_wandingTribs3\n\nREML criterion at convergence: 7360.7\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-2.4602 -0.2715 -0.1552 -0.0014  9.1656 \n\nRandom effects:\n Groups   Name        Variance Std.Dev.\n tag      (Intercept)  31.14    5.581  \n Residual             266.81   16.334  \nNumber of obs: 871, groups:  tag, 326\n\nFixed effects:\n                                                    Estimate Std. Error t value\n(Intercept)                                           15.462      1.774   8.714\nfactor(species)bnt                                    -9.948      4.965  -2.004\nfactor(month)10                                      -10.510      1.989  -5.283\nfactor(month)11                                      -11.744      2.049  -5.733\nfactor(year)2010                                      -8.289      3.486  -2.378\nfactor(species)bnt:factor(month)10                     6.680      5.466   1.222\nfactor(species)bnt:factor(month)11                     8.700      5.652   1.539\nfactor(species)bnt:factor(year)2010                    2.813     18.086   0.156\nfactor(month)10:factor(year)2010                       9.706      4.219   2.300\nfactor(month)11:factor(year)2010                      21.045      4.745   4.435\nfactor(species)bnt:factor(month)10:factor(year)2010   -3.630     19.402  -0.187\nfactor(species)bnt:factor(month)11:factor(year)2010  -17.396     20.572  -0.846\n\nCorrelation of Fixed Effects:\n            (Intr) fctr() fc()10 fc()11 f()201 fc():()10 fc():()11 f():()2\nfctr(spcs)b -0.357                                                        \nfctr(mnt)10 -0.850  0.304                                                 \nfctr(mnt)11 -0.831  0.297  0.739                                          \nfctr(y)2010 -0.500  0.179  0.432  0.423                                   \nfctr():()10  0.309 -0.879 -0.364 -0.269 -0.157                            \nfctr():()11  0.301 -0.856 -0.268 -0.362 -0.153  0.779                     \nfc():()2010  0.096 -0.274 -0.083 -0.082 -0.193  0.241     0.235           \nf()10:()201  0.397 -0.142 -0.470 -0.346 -0.799  0.171     0.125     0.154 \nf()11:()201  0.361 -0.129 -0.319 -0.431 -0.706  0.116     0.156     0.136 \nf():()10:() -0.086  0.247  0.102  0.075  0.174 -0.281    -0.218    -0.915 \nf():()11:() -0.083  0.235  0.074  0.099  0.163 -0.214    -0.275    -0.851 \n            f()10: f()11: f():()10:\nfctr(spcs)b                        \nfctr(mnt)10                        \nfctr(mnt)11                        \nfctr(y)2010                        \nfctr():()10                        \nfctr():()11                        \nfc():()2010                        \nf()10:()201                        \nf()11:()201  0.582                 \nf():()10:() -0.217 -0.127          \nf():()11:() -0.134 -0.231  0.789   \n\n\nCode\n# \n randoms <- REsim( mod4, n.sims = 1000 )\n plotREsim(randoms)\n\n\n\n\n\nCode\n# \n\n ggplot(randoms, aes(mean)) + \n   geom_histogram(binwidth = 0.75, boundary = min(randoms$mean)) +\n   scale_x_continuous(\"Indivdual random effect for movement rate (m/week)\") +\n   scale_y_continuous(\"Frequency\") +\n   theme_bw(base_size = 25)\n\n\n\n\n\nCode\n# # % of fish with CI that don't overlap 0\n randoms$lCI <- randoms$mean - randoms$sd * 1.96\n randoms$uCI <- randoms$mean + randoms$sd * 1.96\n randoms$sig <- (randoms$uCI < 0 | randoms$lCI > 0)\n# \n count(randoms, sig)$n/nrow(randoms)\n\n\n[1] 0.98159509 0.01840491\n\n\n\n\n6.3.5 Young-of-year fish\n\n\nCode\nggplot(cdWB_wandingTribs3, aes(moveRate, linetype = species)) +\n  geom_freqpoly() +\n  scale_x_continuous(\"Movement rate (m/week)\") +\n  scale_y_continuous(\"Frequency\") +\n  #theme_bw(base_size=25)+\n  facet_grid(month ~ yoy + river)"
  },
  {
    "objectID": "getDataWanding.html#west-brook",
    "href": "getDataWanding.html#west-brook",
    "title": "6  Get wanding data",
    "section": "6.4 West Brook",
    "text": "6.4 West Brook\nDid not filter by moveTime > 1 because there were within-day samples in the WB (in contrast to the tribs)\n\n6.4.1 West brook wanding data\nCalculate and plot movement\n\n\nCode\n# Loop over species\nfor (s in unique(cdWB_wanding0$species)) {\n  tmp <-\n    ggplot(filter(cdWB_wanding0, river == \"west brook\" & species==s & aliveOrDead != 'dead'), \n           aes(detectionDate,sectionWQuarter, color = tag))+\n    geom_point(size=2)+\n    geom_line() +\n    scale_y_continuous(limits = c(30,35))+\n    theme(legend.position = \"none\")+\n    ggtitle(paste(\"WB\", s, \"not dead\")) +\n    facet_wrap(~ year, scales = 'free')\n  print(tmp)\n}\n\n\n\n\n\n\n\n\n\n\n\n\n\n6.4.2 Movement\n\n\nCode\ntable(cdWB_wandingWB3$species, cdWB_wandingWB3$month, cdWB_wandingWB3$river, cdWB_wandingWB3$year)\n\n\n, ,  = west brook,  = 2002\n\n     \n        4   5   6   8   9  10  11  12\n  ats   0   0   0  28  11  14 149   8\n  bkt   0   0   0  18   3  12 101   5\n\n, ,  = west brook,  = 2003\n\n     \n        4   5   6   8   9  10  11  12\n  ats 186 281 147   0   0   0   0   0\n  bkt  90 180  93   0   0   0   0   0\n\n\nCode\n# \n# # raw\n ggplot(cdWB_wandingWB3, aes(j, sectionWQuarter, color = tag)) +\n   geom_point()+\n   geom_line() +\n   #  scale_y_continuous(limits=c(0,50))+\n   theme(legend.position=\"none\")+\n   ggtitle(\"Not dead\") +\n   facet_grid(river~year)\n\n\n\n\n\nCode\n ggplot(cdWB_wandingWB3, aes(moveRate, color = species)) +\n   geom_freqpoly() +\n   facet_grid(river ~ year)\n\n\n\n\n\nCode\n ggplot(cdWB_wandingWB3, aes(moveRate, linetype=species)) +\n   geom_freqpoly(binwidth = 5, boundary = min(cdWB_wandingWB3$moveRate, na.rm=T)) +\n   scale_x_continuous(\"Movement rate (m/week)\") +\n   scale_y_continuous(\"Frequency\") +\n   theme_bw(base_size=25)+\n   theme( strip.background = element_blank()\n          #strip.text = element_blank(),\n          #legend.position = \"none\"\n          ) \n\n\n\n\n\nCode\n# #ats is solid line\n\n# \n\n\n\n\n6.4.3 Random effects models\n\n\nCode\n  mod0WB <- lmer( abs(moveRate) ~ (1|tag), data=cdWB_wandingWB3 )\n  ####\n  mod1WB <- lmer( abs(moveRate) ~ factor(species) + (1|tag), data=cdWB_wandingWB3 )\n  ####\n  mod2WB <- lmer( abs(moveRate) ~ factor(species) * factor(month) + (1|tag), data=cdWB_wandingWB3 )\n  ####\n  mod3WB <- lmer( abs(moveRate) ~ factor(species) + factor(month) + factor(year) + (1|tag), data=cdWB_wandingWB3 )\n \n \n  AIC(mod0WB,mod1WB,mod2WB,mod3WB) %>% arrange(AIC)\n\n\n       df      AIC\nmod2WB 18 12944.76\nmod3WB 11 13001.44\nmod1WB  4 13052.68\nmod0WB  3 13060.72\n\n\nCode\n  summary(mod2WB)\n\n\nLinear mixed model fit by REML ['lmerMod']\nFormula: abs(moveRate) ~ factor(species) * factor(month) + (1 | tag)\n   Data: cdWB_wandingWB3\n\nREML criterion at convergence: 12908.8\n\nScaled residuals: \n    Min      1Q  Median      3Q     Max \n-2.5703 -0.4130 -0.1898  0.0996 10.7899 \n\nRandom effects:\n Groups   Name        Variance Std.Dev.\n tag      (Intercept)  531.2   23.05   \n Residual             2369.0   48.67   \nNumber of obs: 1216, groups:  tag, 124\n\nFixed effects:\n                                   Estimate Std. Error t value\n(Intercept)                          15.257      4.977   3.066\nfactor(species)bkt                    7.872      8.440   0.933\nfactor(month)5                        7.095      4.977   1.426\nfactor(month)6                        2.478      6.373   0.389\nfactor(month)8                        8.650     10.720   0.807\nfactor(month)9                      -12.233     15.934  -0.768\nfactor(month)10                     -10.745     18.187  -0.591\nfactor(month)11                      -2.775      5.712  -0.486\nfactor(month)12                     -18.671     18.086  -1.032\nfactor(species)bkt:factor(month)5     7.775      8.643   0.900\nfactor(species)bkt:factor(month)6    23.543     10.572   2.227\nfactor(species)bkt:factor(month)8   -31.321     18.194  -1.722\nfactor(species)bkt:factor(month)9   -10.230     33.752  -0.303\nfactor(species)bkt:factor(month)10   59.008     25.208   2.341\nfactor(species)bkt:factor(month)11   -8.667      9.734  -0.890\nfactor(species)bkt:factor(month)12    4.149     31.494   0.132\n\n\nCode\n  randomsWB <- REsim(mod2WB, n.sims = 1000)\n  plotREsim(randomsWB)\n\n\n\n\n\nCode\n  ggplot(randomsWB, aes(mean)) +\n    geom_histogram(binwidth = 4.75, boundary = min(randomsWB$mean)) +\n    scale_x_continuous(\"Indivdual random effect for movement rate (m/week)\") +\n    scale_y_continuous(\"Frequency\") +\n    theme_bw(base_size = 25)\n\n\n\n\n\nCode\n  # % of fish with CI that don't overlap 0\n  randomsWB$lCI <- randomsWB$mean - randomsWB$sd * 1.96\n  randomsWB$uCI <- randomsWB$mean + randomsWB$sd * 1.96\n  randomsWB$sig <- (randomsWB$uCI < 0 | randomsWB$lCI > 0)\n  \n  count(randomsWB,sig)$n/nrow(randomsWB)\n\n\n[1] 0.8951613 0.1048387"
  },
  {
    "objectID": "getDataAntenna.html#get-antenna-data-target",
    "href": "getDataAntenna.html#get-antenna-data-target",
    "title": "7  Get antenna data",
    "section": "7.1 Get antenna data target",
    "text": "7.1 Get antenna data target\n\n\nCode\nlibrary(targets)\ncdWB_antenna0 <- tar_read(cdWB_antenna0_target)\nstr(cdWB_antenna0)\n\n\ntibble [410,915 × 23] (S3: tbl_df/tbl/data.frame)\n $ tag                   : chr [1:410915] \"00088cbed9\" \"00088cbed9\" \"00088cbed9\" \"00088cbed9\" ...\n $ detectionDate         : POSIXct[1:410915], format: \"2014-10-18 00:22:33\" \"2014-10-24 19:34:31\" ...\n $ river                 : chr [1:410915] \"wb mitchell\" \"wb mitchell\" \"wb mitchell\" \"wb mitchell\" ...\n $ riverMeter            : num [1:410915] 4797 4797 4830 4830 5524 ...\n $ survey                : chr [1:410915] \"stationaryAntenna\" \"stationaryAntenna\" \"stationaryAntenna\" \"stationaryAntenna\" ...\n $ cohort                : num [1:410915] 2013 2013 2013 2013 2013 ...\n $ species               : chr [1:410915] \"bkt\" \"bkt\" \"bkt\" \"bkt\" ...\n $ dateEmigrated         : Date[1:410915], format: \"2014-10-25\" \"2014-10-25\" ...\n $ sex                   : chr [1:410915] NA NA NA NA ...\n $ riverOrdered          : Ord.factor w/ 4 levels \"West Brook\"<\"WB Jimmy\"<..: 3 3 3 3 1 2 2 2 2 2 ...\n $ drainage              : chr [1:410915] \"west\" \"west\" \"west\" \"west\" ...\n $ area                  : chr [1:410915] NA NA NA NA ...\n $ section               : num [1:410915] NA NA NA NA NA NA NA NA NA NA ...\n $ quarter_length        : num [1:410915] NA NA NA NA NA NA NA NA NA NA ...\n $ confluence_river_meter: num [1:410915] NA NA NA NA NA NA NA NA NA NA ...\n $ sectionOriginal       : chr [1:410915] NA NA NA NA ...\n $ inside                : logi [1:410915] TRUE TRUE TRUE TRUE TRUE TRUE ...\n $ year                  : num [1:410915] 2014 2014 2014 2014 2014 ...\n $ yday                  : num [1:410915] 291 297 297 297 298 258 260 260 289 289 ...\n $ date                  : Date[1:410915], format: \"2014-10-18\" \"2014-10-24\" ...\n $ lagSection            : num [1:410915] NA NA NA NA NA NA NA NA NA NA ...\n $ distMoved             : num [1:410915] NA NA NA NA NA NA NA NA NA NA ...\n $ moveDir               : logi [1:410915] NA NA NA NA NA NA ...\n\n\nNeed to find previous antanna analysis - lower left drawer in office desk."
  },
  {
    "objectID": "dataAll.html#merge-all-data",
    "href": "dataAll.html#merge-all-data",
    "title": "8  All data",
    "section": "8.1 Merge All data",
    "text": "8.1 Merge All data\n\n\n\n\n8.1.1 Read merged data target\nVariables in the all data dataset\n\n\ntibble [450,099 × 77] (S3: tbl_df/tbl/data.frame)\n $ tag                               : chr [1:450099] \"00088cbed4\" \"00088cbed6\" \"00088cbed7\" \"00088cbed8\" ...\n $ detectionDate                     : POSIXct[1:450099], format: \"2013-03-29 14:08:00\" \"2012-06-08 18:21:00\" ...\n $ sampleName                        : chr [1:450099] \"84\" \"81\" \"90\" \"84\" ...\n $ sampleNumber                      : num [1:450099] 73 70 79 73 71 72 78 71 72 73 ...\n $ river                             : chr [1:450099] \"west brook\" \"west brook\" \"wb obear\" \"west brook\" ...\n $ section                           : num [1:450099] 40 25 3 24 8 6 60 5 5 5 ...\n $ area                              : chr [1:450099] \"inside\" \"inside\" \"trib\" \"inside\" ...\n $ observedLength                    : num [1:450099] 109 113 70 108 61 63 126 70 80 86 ...\n $ survey                            : chr [1:450099] \"shock\" \"shock\" \"shock\" \"shock\" ...\n $ pass                              : num [1:450099] 1 1 1 1 1 1 1 1 1 1 ...\n $ observedWeight                    : num [1:450099] 12.6 15.5 3.5 12.7 2.4 2.4 23.2 4.6 4.9 6.3 ...\n $ comments                          : chr [1:450099] NA NA NA NA ...\n $ cohort                            : num [1:450099] 2012 2011 2014 2012 2012 ...\n $ species                           : chr [1:450099] \"bkt\" \"bnt\" \"bkt\" \"bnt\" ...\n $ dateEmigrated                     : Date[1:450099], format: NA NA ...\n $ sex                               : chr [1:450099] NA NA NA NA ...\n $ year                              : num [1:450099] 2013 2012 2014 2013 2012 ...\n $ season                            : num [1:450099] 1 2 3 1 3 4 2 3 4 1 ...\n $ proportionSampled                 : num [1:450099] 1 1 1 1 1 1 1 1 1 1 ...\n $ lagDetectionDate                  : POSIXct[1:450099], format: \"2013-06-25 18:51:00\" \"2012-09-27 16:50:00\" ...\n $ meanTemperature                   : num [1:450099] 10.7 16.5 8.55 10.2 7.85 ...\n $ meanFlow                          : num [1:450099] 0.5247 0.0338 0.1334 0.5389 0.1188 ...\n $ meanFlowByRiver                   : num [1:450099] 0.5983 0.1351 0.0113 0.6055 0.0112 ...\n $ meanFlowByArea                    : num [1:450099] 0.52466 0.03385 0.00794 0.53889 0.00707 ...\n $ riverOrdered                      : Ord.factor w/ 4 levels \"West Brook\"<\"WB Jimmy\"<..: 1 1 4 1 4 4 1 4 4 4 ...\n $ readerId                          : chr [1:450099] NA NA NA NA ...\n $ sectionN                          : num [1:450099] 40 25 3 24 8 6 60 5 5 5 ...\n $ aliveOrDead                       : chr [1:450099] \"alive\" \"alive\" \"alive\" \"alive\" ...\n $ instance                          : num [1:450099] NA NA NA NA NA NA NA NA NA NA ...\n $ quarter                           : num [1:450099] NA NA NA NA NA NA NA NA NA NA ...\n $ leftOrRight                       : chr [1:450099] NA NA NA NA ...\n $ habitat                           : chr [1:450099] NA NA NA NA ...\n $ cover                             : chr [1:450099] NA NA NA NA ...\n $ justification                     : chr [1:450099] NA NA NA NA ...\n $ sectionWQuarter                   : num [1:450099] NA NA NA NA NA NA NA NA NA NA ...\n $ j                                 : num [1:450099] NA NA NA NA NA NA NA NA NA NA ...\n $ date                              : Date[1:450099], format: \"2013-03-29\" \"2012-06-08\" ...\n $ dummy                             : num [1:450099] 1 1 1 1 1 1 1 1 1 1 ...\n $ sectionOriginal                   : chr [1:450099] \"40\" \"25\" \"3\" \"24\" ...\n $ inside                            : logi [1:450099] TRUE TRUE TRUE TRUE TRUE TRUE ...\n $ yday                              : num [1:450099] 88 160 260 87 265 347 170 264 347 84 ...\n $ ageInSamples                      : num [1:450099] 3 4 1 3 1 2 4 1 2 3 ...\n $ isYOY                             : logi [1:450099] TRUE FALSE TRUE TRUE TRUE TRUE ...\n $ lagSection                        : num [1:450099] 44 32 3 24 6 6 37 5 5 5 ...\n $ distMoved                         : num [1:450099] -4 -7 0 0 2 0 23 0 0 0 ...\n $ lagObservedWeight                 : num [1:450099] 41.3 18.3 4.8 38.8 2.4 2.3 22.8 4.9 6.3 18.2 ...\n $ lagObservedLength                 : num [1:450099] 154 120 74 150 63 67 130 80 86 117 ...\n $ lagSampleNumber                   : num [1:450099] 74 71 80 74 72 73 79 72 73 74 ...\n $ sampleNumberDiff                  : num [1:450099] 1 1 1 1 1 1 1 1 1 1 ...\n $ grWeight                          : num [1:450099] 0.01346 0.0015 0.00421 0.0138 0 ...\n $ grLength                          : num [1:450099] 0.5102 0.0631 0.0533 0.5188 0.0244 ...\n $ minSample                         : num [1:450099] 73 70 79 71 71 71 78 71 71 71 ...\n $ maxSample                         : num [1:450099] 74 73 80 74 73 73 79 74 74 74 ...\n $ minYear                           : num [1:450099] 1997 1997 1997 1997 1997 ...\n $ moveDir                           : num [1:450099] -1 -1 0 0 1 0 1 0 0 0 ...\n $ sampleInterval                    : num [1:450099] 88.2 110.9 75 81 82 ...\n $ drainage                          : chr [1:450099] \"west\" \"west\" \"west\" \"west\" ...\n $ quarter_length                    : num [1:450099] 5.03 4.75 4.95 5.28 5.25 ...\n $ river_meter                       : num [1:450099] 5208 4903 5164 4883 5272 ...\n $ confluence_river_meter            : num [1:450099] 0 0 5114 0 5114 ...\n $ riverMeter                        : num [1:450099] 5208 4903 5164 4883 5272 ...\n $ nPasses                           : num [1:450099] 1 2 1 1 1 1 2 1 1 1 ...\n $ wGR_Slope                         : num [1:450099] -0.367 -0.278 -0.347 -0.369 -0.347 ...\n $ grWeightS                         : num [1:450099] 0.004307 0.000683 0.002583 0.004426 0 ...\n $ lw_intercept                      : num [1:450099] -5.1 -5.02 -5.1 -5.02 -5.1 ...\n $ lw_slope                          : num [1:450099] 3.06 3.03 3.06 3.03 3.06 ...\n $ cf                                : num [1:450099] 0.0973 0.1074 0.102 0.1008 0.1057 ...\n $ relCF                             : num [1:450099] 0.0724 0.0933 0.0781 0.0877 0.0816 ...\n $ nPerInd                           : int [1:450099] 1 1 1 1 2 2 1 3 3 3 ...\n $ meanTemperatureScaledBySeason     : num [1:450099] 0.2894 0.7778 0.2953 -0.0353 -0.2434 ...\n $ meanFlowScaledBySeason            : num [1:450099] 0.621 -0.646 -0.401 0.711 -0.477 ...\n $ meanFlowByRiverScaledBySeason     : num [1:450099] 1.17 -0.16 -1.1 1.2 -1.1 ...\n $ meanFlowByAreaScaledBySeason      : num [1:450099] 0.853 -0.461 -0.823 0.919 -0.829 ...\n $ meanTemperatureScaledBySeasonRiver: num [1:450099] 0.2615 0.8071 0.374 -0.0572 -0.0622 ...\n $ meanFlowScaledBySeasonRiver       : num [1:450099] 0.607 -0.6 -0.631 0.697 -0.693 ...\n $ meanFlowByRiverScaledBySeasonRiver: num [1:450099] 0.999 -0.48 -0.522 1.04 -0.531 ...\n $ meanFlowByAreaScaledBySeasonRiver : num [1:450099] 0.607 -0.6 -0.631 0.697 -0.693 ...\n\n\n\n\n\n\n\n\n\n\nCode\nallOJS = transpose(allOJS0)\n\ntags = tidy(allOJS, groupBy(\"tag\", [summarize({ n: n() })]), arrange([desc(\"n\")]))\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\nviewof selectTag = Inputs.select(\n  tags.map((d) => d.tag),\n  {\n    //value: \"1bf20ebcae\",\n    label: \"Tags:\",\n    multiple: true\n  }\n)\n\n\n\n\n\n\n\nFacet by river, symbol identifies survey type\n\n\nCode\ntagsToPlot = allOJS.filter((d) => selectTag.includes(d.tag))\n\n\ntagsOverTime = Plot.plot({\n  marks: [\n    Plot.dot(tagsToPlot, { x: \"detectionDate\", y: \"section\", stroke: \"tag\", symbol: \"survey\" }),\n    Plot.line(tagsToPlot, { x: \"detectionDate\", y: \"section\", stroke: \"tag\" })\n  ],\n  facet: {\n    data: tagsToPlot, x: \"river\"\n  },\n  // Include a legend for the color channel \n  color: {\n    legend: true,\n  },\n  symbol: {\n    legend: true\n  }\n})\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOne panel, symbol identifies river\n\n\nCode\ntagsOverTimeRiver = Plot.plot({\n  marks: [\n    Plot.dot(tagsToPlot, {\n      x: \"detectionDate\",\n      y: \"section\",\n      stroke: \"tag\",\n      symbol: \"river\"\n    }),\n    Plot.line(tagsToPlot, { x: \"detectionDate\", y: \"section\", stroke: \"tag\" })\n  ],\n  // Include a legend for the color channel\n  color: {\n    legend: true\n  },\n    symbol: {\n    legend: true\n  }\n})\n\n\n\n\n\n\n\n\n\nCode\nselectTag\n\n\n\n\n\n\n\n\n\nCode\ntagsToPlot\n\n\n\n\n\n\n\n\n\nCode\nallOJS\n\n\n\n\n\n\n\n\n\n\n\nCode\nimport {tidy, max, nDistinct, groupBy, mutate, filter, summarize, first, last, distinct, count, n, arrange, mutateWithSummary, desc, debug, sum, slice, mean, deviation, variance, meanRate, median, min, total, sliceMax, innerJoin, leftJoin, pivotLonger, pivotWider, select, rename, complete, contains, when} from \"@pbeshai/tidyjs\""
  },
  {
    "objectID": "modelYOY.html#raw-data-for-yoy-model",
    "href": "modelYOY.html#raw-data-for-yoy-model",
    "title": "9  Young-of-year size model",
    "section": "9.1 Raw data for YOY model",
    "text": "9.1 Raw data for YOY model\n\nEnvironmental data (flow, temperature) are from 1, 3, or 5 months prior to date of individual capture. Also can used fixed dates: assumed spawning dates, assumed emergence dates and actual observation (sample) dates.\nAll fish data are from age-0 in autumn.\nAbundance data."
  },
  {
    "objectID": "modelYOY.html#get-data-from-targets",
    "href": "modelYOY.html#get-data-from-targets",
    "title": "9  Young-of-year size model",
    "section": "9.2 Get data from targets",
    "text": "9.2 Get data from targets\nWest Brook environmental data (flow and temperature) and electrofishing data\n\n\nCode\nlibrary(targets)\nenvDataWB <- tar_read(envDataWB_target)\ncdWB_electro <- tar_read(cdWB_electro_target)"
  },
  {
    "objectID": "modelYOY.html#get-first-observations",
    "href": "modelYOY.html#get-first-observations",
    "title": "9  Young-of-year size model",
    "section": "9.3 Get first observations",
    "text": "9.3 Get first observations\n\nFilter cdWB_electro for first observations in the autumn for age-0 fish (ageInsamples == 1). Including both tagged and untagged fish.\n\n\n\nCode\nfirstObs_noTag <- tar_read(firstObs_noTag_target)\nfirstObs_tag <- tar_read(firstObs_tag_target)\nfirstObs0 <- tar_read(firstObs0_target)\n\n\nFor each date in firstObs0 that at least one fish was captured, calculate summary stats for flow and temperature for different time periods:\n1. Assumed spawning to capture\n2. Assumed spawning to assumed emergence\n3. Assumed emergence to capture\n4. One month preceding capture\n5. Three months preceding capture\n5. Five months preceding capture\nThen merge results with firstObs0 to create firstObs.\n\n\nCode\nfirstObsDates <- tar_read(firstObsDates_target) \n    \nfirstObs_Env <- tar_read(firstObs_Env_target)\n# merge env data into firstObs0\nfirstObs <- tar_read(firstObs_target)\n\n\nUnnest firstObs so environmental summary stats are available as data frame with the name of the time interval as the prefix to the statisticVariable name\n\n\nCode\nfirstObsUnnested <- tar_read(firstObsUnnested_target)\n\n\n\n\nCode\nggplot(firstObsUnnested, aes(oneMonth_sumTScaled, fiveMonth_sumTScaled)) +\n geom_point() +\n facet_wrap(~river)\n\n\n\n\n\n\n9.3.1 Counts of captured fish\nMin and max years (inclusive) for standardizing counts This is in targets, not sure if needed here\n\n\nCode\nminYear <- 2000\nmaxYear <- 2015\n\n\nCounts by river and species\n\n\nCode\ncountsRSY <- tar_read(countsRSY_target)\n\n\n\n\nCode\nggplot(countsRSY, aes(year, countRS_Scaled, color = species)) +\n  geom_point() +\n  geom_line() +\n  facet_wrap(~ river)\n\n\n\n\n\nCounts by river\n\n\nCode\ncountsRY <- tar_read(countsRY_target)\n\n\n\n\nCode\nggplot(countsRY, aes(year, countR_Scaled, color = river)) +\n  geom_point() +\n  geom_line()\n\n\n\n\n\nCounts for the metaPopulation (WB, Jimmy, Mitchell)\nUse these for modelling.\n\n\nCode\ncountsMetaY <- tar_read(countsMetaY_target)\n\n\n\n\nCode\nggplot(countsMetaY, aes(year, count_Scaled)) +\n  geom_point() +\n  geom_line()\n\n\n\n\n\nMerge metapopulation scaled counts into firstObsUnnested\n\n\nCode\nfirstObsUnnested <- tar_read(firstObsUnnested_target)\nfirstObsUnnestedWB <- tar_read(firstObsUnnestedWB_target)"
  },
  {
    "objectID": "modelYOY.html#raw-data-plots",
    "href": "modelYOY.html#raw-data-plots",
    "title": "9  Young-of-year size model",
    "section": "9.4 Raw data plots",
    "text": "9.4 Raw data plots\n\n9.4.1 Frequency plots by species and river\n\n\n9.4.2 Brook Trout, West brook\n\n\nCode\n  #cd1 <- cdWB_electro %>% filter(ageInSamples == 1, species != 'ats')\n\n  plotSppRiv = function(s, r) { \n    ggplot(firstObs %>% filter(species == s, river == r), aes(observedLength, color = is.na(tag))) +\n      geom_freqpoly() +\n      geom_vline(xintercept = 60) +\n      ggtitle(paste(s, r, sep = ', ')) +\n      xlim(c(30,125)) +\n      facet_wrap(~ year, scales = \"free_y\")\n  }\n  \n  species = 'bkt'\n  riverOrdered = \"west brook\"\n\n  plotSppRiv(species, riverOrdered)\n\n\n\n\n\n\n\n9.4.3 Brook Trout, wb jimmy\n\n\n\n\n\n\n\n9.4.4 Brook Trout, wb mitchell\n\n\n\n\n\n\n\n9.4.5 Brook Trout, wb obear\n\n\n\n\n\n\n\n9.4.6 Brown Trout, West brook\n\n\n\n\n\n\n\n9.4.7 Brown Trout, wb jimmy\n\n\n\n\n\n\n\n9.4.8 Brown Trout, wb mitchell\n\n\n\n\n\n\n\n9.4.9 Brown Trout, wb obear - there are no Brown trout in O’Bear\n\n\n9.4.10 Trout, in the WB mainstem only\n\n\nCode\n  ggplot(firstObs %>% filter(species != \"ats\"), aes(observedLength)) +\n    geom_freqpoly() +\n    geom_vline(xintercept = 60, color = 'orange') +\n    facet_grid(species ~ year)\n\n\n\n\n\nCode\n  ggplot(firstObs %>% filter(species != \"ats\"), aes(observedLength, color = is.na(tag))) +\n    geom_freqpoly() +\n    geom_vline(xintercept = 60, color = 'orange') +\n    facet_grid(species ~ year)\n\n\n\n\n\n\n\n9.4.11 Why are there untagged fish bigger than 60mm?\nCheck 2002/bkt/WB, as an example Answer: because they are outside the study area (area = ‘above’ or ‘below’) or were tagging mortalities\n\n\nCode\n  firstObs2002BKT <- firstObs %>% filter(year == 2002, species == \"bkt\")\n  table(is.na(firstObs2002BKT$tag))\n\n\n\nFALSE  TRUE \n  295   253 \n\n\nCode\n  ggplot(firstObs2002BKT, aes(observedLength, color = is.na(tag))) +\n    geom_freqpoly() +\n    geom_vline(xintercept = 60)\n\n\n\n\n\nCode\n  # looks like untagged area=inside fish wee morts, the rest were above or below\n  ggplot(firstObs2002BKT, aes(observedLength, color = is.na(tag))) +\n    geom_freqpoly() +\n    geom_vline(xintercept = 60) +\n    facet_grid(~area)\n\n\n\n\n\nCode\n  # check 2003\n  ggplot(firstObs %>% filter(year == 2003, species == \"bkt\"), aes(observedLength, color = is.na(tag))) +\n    geom_freqpoly() +\n    geom_vline(xintercept = 60) +\n    facet_grid(~area)\n\n\n\n\n\nCode\n  # same story as 2002"
  },
  {
    "objectID": "modelYOY.html#models-based-on-yearly-means",
    "href": "modelYOY.html#models-based-on-yearly-means",
    "title": "9  Young-of-year size model",
    "section": "9.5 Models based on yearly means",
    "text": "9.5 Models based on yearly means\nFilter firstObsUnnestedWB for bkt, bnt and min/maxYear\n\n\nCode\nd_WB_BKT_BNT <- firstObsUnnestedWB %>% filter(species != \"ats\", year %in% minYear:maxYear) %>%\n  mutate(species01 = ifelse(species == \"bkt\", 1, 0))\n\nhist(d_WB_BKT_BNT$detectionDate, breaks = 250)\n\n\n\n\n\nCode\nd_BKT_BNT <- firstObsUnnested %>% filter(species != \"ats\", year %in% minYear:maxYear) %>%\n  mutate(species01 = ifelse(species == \"bkt\", 1, 0))\n\n\nMean model functions\n\n\nCode\ngetMeansData <- function(d, t, f) {\n  means <- d %>% \n    group_by(species, year) %>% \n    summarize(meanLength = mean(observedLength, na.rm = TRUE), \n              meanEmerge_detect_sumTScaled = mean(emerge_detect_sumTScaled, na.rm = TRUE),\n              meanEmerge_detect_sumFScaled = mean(emerge_detect_sumTScaled, na.rm = TRUE),\n              meanTTime_sumTScaled = mean(get(t), na.rm = TRUE),\n              meanFTime_sumFScaled = mean(get(f), na.rm = TRUE),\n              meanYdayScaled = mean(ydayScaled, na.rm = TRUE),\n              meanCount_Scaled = mean(count_Scaled, na.rm = TRUE)\n              )\n  return(means)\n}\n\ngetMeansDataByRiver <- function(d, t, f) {\n  means <- d %>% \n    group_by(species, year, river) %>% \n    summarize(meanLength = mean(observedLength, na.rm = TRUE), \n              meanEmerge_detect_sumTScaled = mean(emerge_detect_sumTScaled, na.rm = TRUE),\n              meanEmerge_detect_sumFScaled = mean(emerge_detect_sumTScaled, na.rm = TRUE),\n              meanTTime_sumTScaled = mean(get(t), na.rm = TRUE),\n              meanFTime_sumFScaled = mean(get(f), na.rm = TRUE),\n              meanYdayScaled = mean(ydayScaled, na.rm = TRUE),\n              meanCount_Scaled = mean(count_Scaled, na.rm = TRUE)\n              )\n  return(means)\n}\n\nplotMeans <- function(means){\n  out <- list()\n  out[[1]] <- ggplot(means, aes(meanTTime_sumTScaled, meanLength, color = species)) +\n    geom_point() + \n    geom_smooth(method = \"lm\", se = FALSE)\n  \n  out[[2]] <- ggplot(means, aes(meanFTime_sumFScaled, meanLength, color = species)) +\n    geom_point() + \n    geom_smooth(method = \"lm\", se = FALSE)\n  \n  out[[3]] <- ggplot(means, aes(meanTTime_sumTScaled, meanFTime_sumFScaled, color = species)) +\n    geom_point() + \n    geom_smooth(method = \"lm\", se = FALSE)\n  return(out)\n}\n\nrunMeanModels <- function(means) {\n  modLMMeans1 <- lm(meanLength ~ (factor(species) + meanFTime_sumFScaled + meanTTime_sumTScaled + meanYdayScaled + meanCount_Scaled), data = means)\n  modLMMeans2 <- lm(meanLength ~ (factor(species) + meanFTime_sumFScaled + meanTTime_sumTScaled + meanYdayScaled + meanCount_Scaled)^2, data = means)\n  modLMMeans3 <- lm(meanLength ~ (factor(species) + meanFTime_sumFScaled + meanTTime_sumTScaled + meanYdayScaled + meanCount_Scaled)^3, data = means)\n  return(list(modLMMeans1, modLMMeans2, modLMMeans3))\n}\n\n\nMean lengths by river. This is information only. Using the WB data only shown here and in the next graph for the models.\n\n\n\n\n\nMean lengths for the mean length model.\n\n\n\n\n\nGraphs for variables that do not depend on number of months\n\n\n\n\n\n\n\n\n\n9.5.0.1 Models with flow and temperature from previous one month\n\n\n[[1]]\n\n\n\n\n\n\n[[2]]\n\n\n\n\n\n\n[[3]]\n\n\n\n\n\n          df      AIC\nmod1[[2]] 17 176.2075\nmod1[[3]] 27 181.7035\nmod1[[1]]  7 181.8187\n\n\n\nCall:\nlm(formula = meanLength ~ (factor(species) + meanFTime_sumFScaled + \n    meanTTime_sumTScaled + meanYdayScaled + meanCount_Scaled), \n    data = means)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-6.2779 -1.9839 -0.8754  1.0981 10.5908 \n\nCoefficients:\n                     Estimate Std. Error t value Pr(>|t|)    \n(Intercept)           72.4359     1.0722  67.558  < 2e-16 ***\nfactor(species)bnt     0.6550     1.3128   0.499 0.622039    \nmeanFTime_sumFScaled   1.6769     0.3849   4.356 0.000184 ***\nmeanTTime_sumTScaled -10.3842     2.3734  -4.375 0.000175 ***\nmeanYdayScaled        -3.4856     1.7314  -2.013 0.054554 .  \nmeanCount_Scaled      -2.5187     0.7068  -3.564 0.001443 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 3.695 on 26 degrees of freedom\nMultiple R-squared:  0.6966,    Adjusted R-squared:  0.6383 \nF-statistic: 11.94 on 5 and 26 DF,  p-value: 4.544e-06\n\n\nRelative importance for main effects model\n\n\n     factor(species) meanFTime_sumFScaled meanTTime_sumTScaled \n          0.00395522           0.24940595           0.19990058 \n      meanYdayScaled     meanCount_Scaled \n          0.06280977           0.18053989 \n\n\n\n\n9.5.0.2 Models with flow and temperature from previous three months\n\n\n[[1]]\n\n\n\n\n\n\n[[2]]\n\n\n\n\n\n\n[[3]]\n\n\n\n\n\n          df      AIC\nmod3[[3]] 27 177.0683\nmod3[[2]] 17 181.7547\nmod3[[1]]  7 187.3979\n\n\n\nCall:\nlm(formula = meanLength ~ (factor(species) + meanFTime_sumFScaled + \n    meanTTime_sumTScaled + meanYdayScaled + meanCount_Scaled), \n    data = means)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-6.3569 -2.8523  0.3445  1.8018  9.2951 \n\nCoefficients:\n                     Estimate Std. Error t value Pr(>|t|)    \n(Intercept)           73.4882     1.8809  39.070  < 2e-16 ***\nfactor(species)bnt     0.8334     1.4312   0.582 0.565351    \nmeanFTime_sumFScaled   2.2450     0.5866   3.827 0.000732 ***\nmeanTTime_sumTScaled  -8.8499     3.6769  -2.407 0.023489 *  \nmeanYdayScaled         0.7120     1.4287   0.498 0.622411    \nmeanCount_Scaled      -3.1604     0.7937  -3.982 0.000490 ***\n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.032 on 26 degrees of freedom\nMultiple R-squared:  0.6388,    Adjusted R-squared:  0.5694 \nF-statistic: 9.197 on 5 and 26 DF,  p-value: 3.902e-05\n\n\nRelative importance for main effects model\n\n\n     factor(species) meanFTime_sumFScaled meanTTime_sumTScaled \n         0.004325792          0.281631981          0.060776249 \n      meanYdayScaled     meanCount_Scaled \n         0.066333713          0.225756051 \n\n\n\n\n9.5.0.3 Models with flow and temperature from previous five months\n\n\n[[1]]\n\n\n\n\n\n\n[[2]]\n\n\n\n\n\n\n[[3]]\n\n\n\n\n\n          df      AIC\nmod5[[3]] 27 167.4034\nmod5[[1]]  7 193.2144\nmod5[[2]] 17 208.3847\n\n\n\nCall:\nlm(formula = meanLength ~ (factor(species) + meanFTime_sumFScaled + \n    meanTTime_sumTScaled + meanYdayScaled + meanCount_Scaled), \n    data = means)\n\nResiduals:\n    Min      1Q  Median      3Q     Max \n-5.9186 -3.3732  0.3856  2.4470 11.8564 \n\nCoefficients:\n                     Estimate Std. Error t value Pr(>|t|)    \n(Intercept)           71.1144     1.9342  36.767  < 2e-16 ***\nfactor(species)bnt     0.8911     1.5671   0.569  0.57450    \nmeanFTime_sumFScaled   2.6934     0.8705   3.094  0.00468 ** \nmeanTTime_sumTScaled  -3.5748     2.9746  -1.202  0.24029    \nmeanYdayScaled         3.2403     1.5506   2.090  0.04657 *  \nmeanCount_Scaled      -2.8957     0.8613  -3.362  0.00240 ** \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 4.415 on 26 degrees of freedom\nMultiple R-squared:  0.5668,    Adjusted R-squared:  0.4835 \nF-statistic: 6.805 on 5 and 26 DF,  p-value: 0.0003537\n\n\nRelative importance for main effects model\n\n\n     factor(species) meanFTime_sumFScaled meanTTime_sumTScaled \n         0.004330339          0.226812955          0.017322018 \n      meanYdayScaled     meanCount_Scaled \n         0.107186866          0.211177826 \n\n\nr-squared values and AICs for 1st, 2nd (2-way interactions) and 3rd (3-way interactions) order models\n\n\n\n\n \n  \n    Order \n    r2 \n    numMonths \n  \n \n\n  \n    1 \n    0.697 \n    1 \n  \n  \n    2 \n    0.864 \n    1 \n  \n  \n    3 \n    0.913 \n    1 \n  \n\n\n\n\n\n\n\n \n  \n    Order \n    r2 \n    numMonths \n  \n \n\n  \n    1 \n    0.639 \n    3 \n  \n  \n    2 \n    0.838 \n    3 \n  \n  \n    3 \n    0.925 \n    3 \n  \n\n\n\n\n\n\n\n \n  \n    Order \n    r2 \n    numMonths \n  \n \n\n  \n    1 \n    0.567 \n    5 \n  \n  \n    2 \n    0.628 \n    5 \n  \n  \n    3 \n    0.945 \n    5 \n  \n\n\n\n\n\n\n\n \n  \n      \n    df \n    AIC \n    numMonths \n  \n \n\n  \n    mod1[[2]] \n    17 \n    176.207 \n    1 \n  \n  \n    mod1[[3]] \n    27 \n    181.703 \n    1 \n  \n  \n    mod1[[1]] \n    7 \n    181.819 \n    1 \n  \n\n\n\n\n\n\n\n \n  \n      \n    df \n    AIC \n    numMonths \n  \n \n\n  \n    mod3[[3]] \n    27 \n    177.068 \n    3 \n  \n  \n    mod3[[2]] \n    17 \n    181.755 \n    3 \n  \n  \n    mod3[[1]] \n    7 \n    187.398 \n    3 \n  \n\n\n\n\n\n\n\n \n  \n      \n    df \n    AIC \n    numMonths \n  \n \n\n  \n    mod5[[3]] \n    27 \n    167.403 \n    5 \n  \n  \n    mod5[[1]] \n    7 \n    193.214 \n    5 \n  \n  \n    mod5[[2]] \n    17 \n    208.385 \n    5 \n  \n\n\n\n\n\nRelative importance of main effects models (repeat of above, but all in one place here)\n\n\n\n\n \n  \n    var \n    relImp \n    numMonths \n  \n \n\n  \n    factor(species) \n    0.004 \n    1 \n  \n  \n    meanFTime_sumFScaled \n    0.249 \n    1 \n  \n  \n    meanTTime_sumTScaled \n    0.200 \n    1 \n  \n  \n    meanYdayScaled \n    0.063 \n    1 \n  \n  \n    meanCount_Scaled \n    0.181 \n    1 \n  \n\n\n\n\n\n\n\n \n  \n    var \n    relImp \n    numMonths \n  \n \n\n  \n    factor(species) \n    0.004 \n    3 \n  \n  \n    meanFTime_sumFScaled \n    0.282 \n    3 \n  \n  \n    meanTTime_sumTScaled \n    0.061 \n    3 \n  \n  \n    meanYdayScaled \n    0.066 \n    3 \n  \n  \n    meanCount_Scaled \n    0.226 \n    3 \n  \n\n\n\n\n\n\n\n \n  \n    var \n    relImp \n    numMonths \n  \n \n\n  \n    factor(species) \n    0.004 \n    5 \n  \n  \n    meanFTime_sumFScaled \n    0.227 \n    5 \n  \n  \n    meanTTime_sumTScaled \n    0.017 \n    5 \n  \n  \n    meanYdayScaled \n    0.107 \n    5 \n  \n  \n    meanCount_Scaled \n    0.211 \n    5 \n  \n\n\n\n\n\n\n\n9.5.1 Models with extreme flow events (droughts)\nWe get negative cumulFlows because we have some negative flows from the flow extension model\n\n\nCode\n# put some of these calculations into envDataWB\nenvDataWBFlow = tar_read(envDataWBFlow_target)\n\n\n\n\nCode\nfirstObsYears <- firstObs %>%\n    filter(year %in% minYear:maxYear, \n           yday > 100, yday < 300)\n\n\n\n\nCode\nggplot(envDataWBFlow, aes(yday, flow)) +\n  geom_point(aes(yday, observedLength/20), size = 0.75, alpha = 0.2, color = 'lightblue', data = firstObsYears) +\n  geom_point(size = 0.5) +\n  scale_x_continuous(breaks = seq(0,300, 30)) +\n  facet_wrap(~year)\n\n\n\n\n\nCode\nggplot(envDataWBFlow, aes(yday, cumulFlow / 10)) +\n  geom_point(aes(yday, observedLength / 20), size = 0.75, alpha = 0.2, color = 'lightblue', data = firstObsYears) +\n  geom_point(size = 0.5, color = 'darkgrey') +\n  geom_point(aes(yday, cumulTemp / 800), size = 0.5, color = \"orange\", data = envDataWBFlow) +\n  geom_point(aes(yday, flow), size = 0.5, data = envDataWBFlow) +\n  scale_x_continuous(breaks = seq(0, 300, 30)) +\n  #theme_publication() +\n  facet_wrap(~year)\n\n\n\n\n\nCode\nggplot(envDataWBFlow, aes(yday, cumulFlow, color = (year))) +\n  geom_point() +\n  scale_x_continuous(breaks = seq(0, 300, 30)) \n\n\n\n\n\nCode\nggplot(envDataWBFlow, aes(yday, cumulTemp, color = (year))) +\n  geom_point() +\n  #geom_point(aes(yday, cumulTemp / 800, color = factor(year)), data = tmp) +\n  scale_x_continuous(breaks = seq(0, 300, 30))\n\n\n\n\n\nIs there a sampling section effect?\nNote: there are fish in sections > 50 for years 2002 and 2003, need to filter out early\n\n\nCode\nggplot(d_WB_BKT_BNT %>% filter( section <= 47), aes(factor(section), observedLength)) +\n  geom_boxplot() +\n  geom_smooth() +\n  facet_wrap(~year)\n\n\n\n\n\nCode\nggplot(d_WB_BKT_BNT %>% filter( section <= 47), aes(factor(year), observedLength)) +\n  geom_boxplot() +\n  geom_smooth() +\n  facet_wrap(~section)"
  },
  {
    "objectID": "modelFlow.html",
    "href": "modelFlow.html",
    "title": "10  Flow model",
    "section": "",
    "text": "Code\ndataFlow <- tar_read(dataFlow_target)\ndFlow <- tar_read(dFlow_target)\ndFlowWide <- tar_read(dFlowWide_target)\n\n\n\n\nCode\ntibble(dataFlow)\n\n\n# A tibble: 582,388 × 9\n   Station_No Site_Name   DateTi…¹ GageH…² Disch…³ Water…⁴ AirPr…⁵ AirTe…⁶ X    \n        <int> <chr>       <chr>      <dbl>   <dbl>   <dbl>   <dbl>   <dbl> <lgl>\n 1    1171000 Avery Brook 2/20/20…    4.17    5.37    32.0      NA      NA NA   \n 2    1171000 Avery Brook 2/20/20…    4.17    5.3     32.0      NA      NA NA   \n 3    1171000 Avery Brook 2/20/20…    4.16    5.17    32.0      NA      NA NA   \n 4    1171000 Avery Brook 2/20/20…    4.17    5.27    32.0      NA      NA NA   \n 5    1171000 Avery Brook 2/20/20…    4.17    5.3     32.0      NA      NA NA   \n 6    1171000 Avery Brook 2/20/20…    4.15    4.94    31.9      NA      NA NA   \n 7    1171000 Avery Brook 2/20/20…    4.13    4.56    31.9      NA      NA NA   \n 8    1171000 Avery Brook 2/20/20…    4.1     4.14    31.9      NA      NA NA   \n 9    1171000 Avery Brook 2/20/20…    4.08    3.84    31.9      NA      NA NA   \n10    1171000 Avery Brook 2/20/20…    4.09    4.02    31.9      NA      NA NA   \n# … with 582,378 more rows, and abbreviated variable names ¹​DateTime_EST,\n#   ²​GageHeight_Hobo_ft, ³​Discharge_Hobo_cfs, ⁴​WaterTemperature_HOBO_DegF,\n#   ⁵​AirPressure_PSI, ⁶​AirTemperature_HOBO_degF\n\n\nCode\ntable(dataFlow$Site_Name)\n\n\n\n         Avery Brook          Jimmy Brook       Mitchell Brook \n               56536                57849                56978 \n   Obear Brook Lower      Sanderson Brook         West Brook 0 \n               60392                55336                58548 \n    West Brook Lower West Brook Reservoir     West Brook Upper \n               61279                61059                57301 \n  West Whately Brook \n               57110 \n\n\nCode\n#check for real entries\ndFlow %>% filter(is.infinite(dischargeLog))\n\n\n [1] Station_No                 Site_Name                 \n [3] DateTime_EST               GageHeight_Hobo_ft        \n [5] Discharge_Hobo_cfs         WaterTemperature_HOBO_DegF\n [7] AirPressure_PSI            AirTemperature_HOBO_degF  \n [9] X                          date                      \n[11] site                       dischargeLog              \n<0 rows> (or 0-length row.names)\n\n\n\n\nCode\nggplot(dFlow, aes(date, dischargeLog, color = Site_Name)) +\n  geom_point(size = 0.02) +\n  facet_wrap(~Site_Name)\n\n\n\n\n\nCode\nggpairs(dFlowWide,\n          columns = 6:9,\n          mapping = ggplot2::aes(color = as.factor(year), alpha = 0.7),\n          #diag = list(continuous = myDens),\n          lower = list(continuous = wrap(\"points\", alpha = 0.3, size=0.1), \n                       combo = wrap(\"dot\", alpha = 0.4, size=0.2))\n        )\n\n\n\n\n\nCode\nggpairs(dFlowWide %>% filter(yday > 90, yday < 300),\n          columns = 6:9,\n          mapping = ggplot2::aes(color = as.factor(year)),\n          lower = list(continuous = wrap(\"points\", alpha = 0.3, size=0.1), \n                       combo = wrap(\"dot\", alpha = 0.4, size=0.2))\n        )\n\n\n\n\n\nCode\nggpairs(dFlowWide %>% filter(yday == 110),\n          columns = 8:11,\n          mapping = ggplot2::aes(color = as.factor(year)),\n          lower = list(continuous = wrap(\"points\", alpha = 0.3, size=0.2), \n                       combo = wrap(\"dot\", alpha = 0.4, size=0.2))\n        )"
  },
  {
    "objectID": "modelConditionFactor.html#get-data",
    "href": "modelConditionFactor.html#get-data",
    "title": "11  Condition factor",
    "section": "11.1 Get data",
    "text": "11.1 Get data\n\n11.1.1 Get electrofishing data\n\n\nCode\nlibrary(targets)\n\ncd <- tar_read(cdWB_electro_target) # raw data\ncd1 <- tar_read(cd1_target)\n\nrelCF_byYear <- tar_read(relCF_byYear_target)\nrelCF_byYearWide <- tar_read(relCF_byYearWide_target)\n\n\n\n\n11.1.2 Plot raw lengths/mass\n\n\nCode\nggplot(cd1, aes(observedLength, observedWeight, color = speciesGG)) +\n  geom_point(alpha = 0.1) +\n  guides(color = guide_legend(override.aes = list(alpha = 1))) +\n  scale_x_log10(\"Length (mm)\") +\n  scale_y_log10(\"Mass (g)\") +\n  scale_color_discrete() +\n  facet_wrap(~speciesGG) \n\n\n\n\n\nCode\nggplot(cd1, aes(observedLength, observedWeight, color = speciesGG)) +\n  geom_point(alpha = 0.05) +\n  geom_smooth(method = \"lm\") +\n  scale_x_log10(\"Length (mm)\") +\n  scale_y_log10(\"Mass (g)\") +\n  scale_color_discrete()\n\n\n\n\n\n\n\n11.1.3 Length/mass regression\nDoes species matter? Yes Differences appear very small on the graphs, but there are significant differences in slope between brook trout and the other two species (brown trout and Atlantic salmon).\nUse slopes for each species in relative condition factor calculation. Model code below is repeated in getDataElectro_targets.R in addCF() to add cf and relCF to cdWB_electro_target\n\n\nCode\nmod1 <- lm(log10(observedWeight) ~ log10(observedLength) * factor(species), data = cd1)\nmod2 <- lm(log10(observedWeight) ~ log10(observedLength) + factor(species), data = cd1)\nmod3 <- lm(log10(observedWeight) ~ log10(observedLength), data = cd1)\n\nAIC(mod1,mod2,mod3) |> arrange(AIC)\n\n\n     df       AIC\nmod1  7 -83918.12\nmod2  5 -83873.46\nmod3  3 -79430.81\n\n\nCode\nsummary(mod1)\n\n\n\nCall:\nlm(formula = log10(observedWeight) ~ log10(observedLength) * \n    factor(species), data = cd1)\n\nResiduals:\n     Min       1Q   Median       3Q      Max \n-0.72259 -0.02808  0.00011  0.02785  0.43945 \n\nCoefficients:\n                                          Estimate Std. Error  t value Pr(>|t|)\n(Intercept)                              -5.006985   0.007429 -673.955  < 2e-16\nlog10(observedLength)                     3.035531   0.003772  804.761  < 2e-16\nfactor(species)bkt                       -0.097179   0.010050   -9.669  < 2e-16\nfactor(species)bnt                       -0.007608   0.011159   -0.682    0.495\nlog10(observedLength):factor(species)bkt  0.027446   0.005083    5.399 6.76e-08\nlog10(observedLength):factor(species)bnt -0.006029   0.005541   -1.088    0.277\n                                            \n(Intercept)                              ***\nlog10(observedLength)                    ***\nfactor(species)bkt                       ***\nfactor(species)bnt                          \nlog10(observedLength):factor(species)bkt ***\nlog10(observedLength):factor(species)bnt    \n---\nSignif. codes:  0 '***' 0.001 '**' 0.01 '*' 0.05 '.' 0.1 ' ' 1\n\nResidual standard error: 0.04289 on 24249 degrees of freedom\n  (42 observations deleted due to missingness)\nMultiple R-squared:  0.9886,    Adjusted R-squared:  0.9886 \nF-statistic: 4.22e+05 on 5 and 24249 DF,  p-value: < 2.2e-16\n\n\nCode\n(CF_coefs <- tibble(\n  species = c(\"ats\", \"bkt\", \"bnt\"),\n  intercept = c(\n    coef(mod1)[[\"(Intercept)\"]],\n    coef(mod1)[[\"(Intercept)\"]] + coef(mod1)[[\"factor(species)bkt\"]],\n    coef(mod1)[[\"(Intercept)\"]] + coef(mod1)[[\"factor(species)bnt\"]]\n  ),\n  slope = c(\n    coef(mod1)[[\"log10(observedLength)\"]],\n    coef(mod1)[[\"log10(observedLength)\"]] + coef(mod1)[[\"log10(observedLength):factor(species)bkt\"]],\n    coef(mod1)[[\"log10(observedLength)\"]] + coef(mod1)[[\"log10(observedLength):factor(species)bnt\"]]\n  )\n))\n\n\n# A tibble: 3 × 3\n  species intercept slope\n  <chr>       <dbl> <dbl>\n1 ats         -5.01  3.04\n2 bkt         -5.10  3.06\n3 bnt         -5.01  3.03\n\n\n\n\n11.1.4 Relative condition factor by species\n\n\nCode\nggplot(cd1, aes(relCF, color = speciesGG)) +\n  geom_freqpoly(bins = 50) +\n  labs(x = \"Relative condition factor\", y = \"Frequency\") +\n  scale_color_discrete() +\n  facet_wrap(~seasonGG)\n\n\n\n\n\n\n\n11.1.5 Relative condition factor by species across years\n\n\nCode\nggplot(relCF_byYear, aes(year, mRCF, color = speciesGG)) +\n  geom_point() +\n  geom_line() +\n  scale_color_discrete() +\n  labs(x = \"Year\", y = \"Relative condition factor\") +\n  facet_grid(riverGG~seasonGG)\n\n\n\n\n\n\n\n11.1.6 Relative condition factor species comparison\nDo relative condition factors covary between species?\n\n\nCode\nggplot(relCF_byYearWide |> filter(riverGG != \"Isolated Small\"), aes(`Brook trout`, `Brown trout`)) +\n  geom_point(aes(color = factor(year))) +\n  geom_smooth(method = \"lm\", se = FALSE, color = 'darkgrey') +\n  scale_color_discrete() +\n  labs(x = \"Brook trout relative condition factor\", y = \"Brown trout relative condition factor\") +\n  facet_grid(riverGG~seasonGG)\n\n\n\n\n\nCode\nggplot(relCF_byYearWide |> filter(riverGG == \"West Brook\"), aes(`Brook trout`, `Atlantic salmon`)) +\n  geom_point(aes(color = factor(year))) +\n  geom_smooth(method = \"lm\", se = FALSE, color = 'darkgrey') +\n  scale_color_discrete() +\n  labs(x = \"Brook trout relative condition factor\", y = \"Atlantic salmon relative condition factor\") +\n  facet_wrap(~seasonGG)\n\n\n\n\n\nCode\nggplot(relCF_byYearWide |> filter(riverGG == \"West Brook\"), aes(`Brown trout`, `Atlantic salmon`)) +\n  geom_point(aes(color = factor(year))) +\n  geom_smooth(method = \"lm\", se = FALSE, color = 'darkgrey') +\n  scale_color_discrete() +\n  labs(x = \"Brown trout relative condition factor\", y = \"Atlantic salmon relative condition factor\") +\n  facet_wrap(~seasonGG)\n\n\n\n\n\n\n\n11.1.7 Seasonal comparison\nTO ADD"
  },
  {
    "objectID": "modelGrowthInMass.html#get-data",
    "href": "modelGrowthInMass.html#get-data",
    "title": "12  Growth in mass",
    "section": "12.1 Get data",
    "text": "12.1 Get data\n\n12.1.1 Get electrofishing data\n\n\nCode\nlibrary(targets)\ncd <- tar_read(cdWB_electro_target) # raw data\ncd1 <- tar_read(cd1_target) # from modelGrowthInMass_target\npropNegSRS <- tar_read(propNegSRS_target)\npropNegSRsN <- tar_read(propNegSRsN_target)\n\nindCountsBySpp <- tar_read(indCountsBySpp_target) \nindCounts <- tar_read(indCounts_target) \npropNegLabels <- tar_read(propNegLabels_target)\n\nnegGr_beforeLast <- tar_read(negGr_beforeLast_target)\n\nmeanNegSRsN <- tar_read(meanNegSRsN_target)\nmeanNegSRsNWide <- tar_read(meanNegSRsNWide_target)\n\n# df for pairs plots\ncd1Wide_grWeight <- tar_read(cd1Wide_grWeight_target)\ncd1Wide_observedWeight <- tar_read(cd1Wide_observedWeight_target)\n\ndGAM <- tar_read(dGAM_target) # from modelGrowthInMass_target\n\n\n\n\n12.1.2 Get environmental data\n\n\nCode\nlibrary(targets)\ndummy=0 # change to force cache update??\nenvIn <- tar_read(envIn_target)\nenvIn_propNeg <- tar_read(envIn_propNeg_target)"
  },
  {
    "objectID": "modelGrowthInMass.html#examine-raw-data",
    "href": "modelGrowthInMass.html#examine-raw-data",
    "title": "12  Growth in mass",
    "section": "12.2 Examine raw data",
    "text": "12.2 Examine raw data\n\n12.2.1 Limit data to consecutive sample captures (cd1)\nPrevious growth models with length used all possible observations for a fish and interpolated missing observations. Here, we are just looking at consecutive captures to estimate growth over just that interval.\n\n\nCode\n# table(as.numeric(cd$sampleNumber), as.numeric(cd$lagSampleNumber), cd$season, cd$year) |> \n#   data.frame() |> \n#   filter(Freq > 0) |> \n#   arrange(Var1, Var2) |> \n#   rename(firstCapt = Var1, secondCapt = Var2, season = Var3, year = Var4) |> \n#   filter(year == 2010)\n\n\n##### in targets\n# cd1 <- cd |> \n#   filter(sampleNumberDiff == 1,\n#          tag %notin% c('1bf20ff490', '1bf20ebe4e')) |> \n#   mutate(negGrowth = grWeight < 0,\n#          month = month(date),\n#          dummy = 1) # change to force cache update\n\n\n\n\n12.2.2 Find outlier growth rates\n\n12.2.2.1 Negative outlier growth\n1bf20ebe4e and 1bf20ff490 have incorrect weights leading to very negative growth rates.\nExclude these tags in cd1_target. The rest of the quite negative growth fish seem plausible (remember we can’t account for stomach contents or egg loss).\n\n\nCode\ncd |> \n  arrange(grWeightS) |> \n  dplyr::select(tag, species, season, sampleNumber, lagSampleNumber, observedWeight, lagObservedWeight, grWeightS)\n\n\n# A tibble: 24,304 × 8\n   tag        species season sampleNumber lagSampleNu…¹ obser…² lagOb…³ grWeig…⁴\n   <chr>      <chr>    <dbl>        <dbl>         <dbl>   <dbl>   <dbl>    <dbl>\n 1 1bf20ebe4e bnt          3           55            56    46.5     4.3 -0.0320 \n 2 257c67e414 bkt          3           59            60     7.3     4.4 -0.00414\n 3 1bf0fec291 bkt          3           27            28     2.7     1.6 -0.00409\n 4 1bf20ff490 bnt          2           54            55   167.     41.8 -0.00378\n 5 257c67b532 bnt          3           63            64    34      25.5 -0.00371\n 6 00088d1ad4 bnt          3           63            64     4.5     3.6 -0.00330\n 7 257c67db60 bnt          3           63            64    24.2    19.5 -0.00317\n 8 00088d0b59 bnt          3           63            64     3.7     3   -0.00314\n 9 414b684955 ats          3           15            16     5.7     4.3 -0.00289\n10 0009f6ec56 bkt          3           75            76     3.5     2.7 -0.00288\n# … with 24,294 more rows, and abbreviated variable names ¹​lagSampleNumber,\n#   ²​observedWeight, ³​lagObservedWeight, ⁴​grWeightS\n\n\n\n\n12.2.2.2 Positive outlier growth\nLots of very fast growth mostly in the spring. No clear way to exclude fish. 1c2c582218 is excluded in cd1_target because of very high growth in length.\n\n\nCode\ncd1 |> \n  arrange(desc(grWeightS)) |> \n  dplyr::select(tag, species, season, sampleNumber, lagSampleNumber, observedWeight, lagObservedWeight, grWeightS) |> \n  print(n = 10)\n\n\n# A tibble: 24,297 × 8\n   tag        species season sampleNumber lagSampleNum…¹ obser…² lagOb…³ grWei…⁴\n   <chr>      <chr>    <dbl>        <dbl>          <dbl>   <dbl>   <dbl>   <dbl>\n 1 1bf1020623 bkt          1           29             30     1.3    14.4  0.0199\n 2 0009f6eef4 bkt          1           77             78     2.3    10.3  0.0160\n 3 413f4b1845 ats          1           13             14     1.8     8.3  0.0152\n 4 1bf16366cf bnt          1           33             34     2      10.7  0.0142\n 5 410a015165 ats          1           13             14     2.1     9.3  0.0142\n 6 00088d2d2c bkt          1           73             74     1.8     9.2  0.0141\n 7 410a0f0653 ats          1           13             14     2.2    10.9  0.0138\n 8 1bf18b7637 bkt          1           33             34     2.5    13.2  0.0137\n 9 1bf20e4e30 bnt          1           53             54     2.3    12.1  0.0137\n10 1bf1930917 ats          1           37             38     1.9    11.7  0.0136\n# … with 24,287 more rows, and abbreviated variable names ¹​lagSampleNumber,\n#   ²​observedWeight, ³​lagObservedWeight, ⁴​grWeightS\n\n\n\n\n\n12.2.3 Raw length, weight data graphs\n\n12.2.3.1 Distribution of growth rates\n\n\nCode\nggplot(cd1, aes(grWeight, color = speciesGG)) +\n  geom_freqpoly(bins = 50) +\n  labs(x = \"Growth in mass (/d)\", y = \"Frequency\") +\n  scale_color_discrete() +\n  facet_wrap(~seasonGG)\n\n\n\n\n\nCode\nggplot(cd1, aes(grLength, color = speciesGG)) +\n  geom_freqpoly(bins = 50) +\n  labs(x = \"Growth in Length (mm/d)\", y = \"Frequency\") +\n  scale_color_discrete() +\n  facet_wrap(~seasonGG)\n\n\n\n\n\n\n\n\n12.2.4 Length vs weight by species\nVery few outliers\n\n\nCode\nplotLenW <- function(d, s){\n  ggplot(d |> filter(species == s), aes(observedLength, observedWeight)) +\n    geom_point(alpha = 0.5, size = 1) +\n    scale_x_log10() +\n    scale_y_log10() +\n    #ggtitle(s) +\n    labs(x = \"Length (mm)\", y = \"Mass (mg)\") +\n    scale_color_discrete() +\n    facet_grid(riverGG~year, scales = 'free')\n}\n\n\n\nBrook troutBrown troutAtlantic salmon\n\n\n\n\nCode\nplotLenW(cd1, \"bkt\")\n\n\n\n\n\n\n\n\n\nCode\nplotLenW(cd1, \"bnt\")\n\n\n\n\n\n\n\n\n\nCode\nplotLenW(cd1, \"ats\")\n\n\n\n\n\n\n\n\n\n\n12.2.5 Weight vs weight at next sample\n\n\nCode\nplotWW <- function(d, spp){\n  ggplot(d |> filter(species == spp), aes(observedWeight, lagObservedWeight, color = seasonGG)) +\n    geom_point(alpha = 0.15) +\n    guides(color = guide_legend(override.aes = list(alpha = 1))) +\n    labs(x = \"Mass (mg)\", y = \"Mass (mg) at next sample\") +\n    scale_color_discrete() +\n    facet_wrap(~riverGG, scales = 'free')\n}\n\n\n\nBrook troutBrown troutAtlantic salmon\n\n\n\n\nCode\nplotWW(cd1, \"bkt\")\n\n\n\n\n\n\n\n\n\nCode\nplotWW(cd1, \"bkt\")\n\n\n\n\n\n\n\n\n\nCode\nplotWW(cd1, \"ats\")\n\n\n\n\n\n\n\n\n\n\n12.2.6 Growth rate pairs plots\nBy species, all cohorts\nRow and column labels in the pairs plots are ‘age’_‘season’\n\n\nCode\nplotPairs <- function(d0, sppIn, cohortIn, firstSamp = 1, lastSamp = 9, upperBlank = FALSE){\n  d <- d0 |> \n    filter(speciesGG == sppIn, cohort %in% cohortIn) |> \n    select_if(~any(!is.na(.))) |>  # remove all-NA columns\n    filter(firstObserved != lastObserved - 1) # remove single obs fish\n  \n  lowerFn <- function(data, mapping, method = \"lm\", ...) {\n    ggplot(data = data, mapping = mapping) +\n      geom_vline(xintercept = 0, color = 'darkgrey') +\n      geom_hline(yintercept = 0, color = 'darkgrey') +\n      geom_abline(intercept = 0, slope = 1) +\n      geom_smooth(aes(color = factor(cohort)), method = method, se = FALSE, ...) +\n      geom_point(aes(color = factor(cohort))) +\n      geom_smooth(color = 'black', size = 1.1, method = method, se = FALSE, ...) \n  }\n\n  if(upperBlank) {\n    out <- ggpairs(\n      d |> \n        dplyr::select(-c(speciesGG, tag, firstObserved, lastObserved)),\n      columns = (firstSamp+1):(lastSamp+1), # +1 to skip cohort column\n      lower = list(continuous = wrap(lowerFn, method = \"lm\")),\n      upper = \"blank\"\n    ) \n  } else {\n    out <- ggpairs(\n      d |> \n        dplyr::select(-c(speciesGG, tag, firstObserved, lastObserved)),\n      columns = (firstSamp+1):(lastSamp+1), # +1 to skip cohort column\n      lower = list(continuous = wrap(lowerFn, method = \"lm\"))\n    )\n  }\n  return(out)\n}\n\n\n\nBrook troutBrown troutAtlantic salmon\n\n\n\n\nCode\nplotPairs(cd1Wide_grWeight, \"Brook trout\", 2000:2015, 1, 9)\n\n\n\n\n\nCode\n#plotPairs(cd1Wide_observedWeight, \"Brook trout\", 2000:2015)\n\n\n\n\n\n\nCode\nplotPairs(cd1Wide_grWeight, \"Brown trout\", 2000:2015, 1, 9)\n\n\n\n\n\nCode\n#plotPairs(cd1Wide_observedWeight, \"Brook trout\", 2000:2015)\n\n\n\n\n\n\nCode\nplotPairs(cd1Wide_grWeight, \"Atlantic salmon\", 2000:2015, 1, 8) # missing data in column 9\n\n\n\n\n\nCode\n#plotPairs(cd1Wide_observedWeight, \"Atlantic salmon\", 2000:2015)\n\n\n\n\n\n\n12.2.6.1 Brook trout by cohort\nRow and column labels are ‘age’_‘season’\nColor by river - make new function\n\n200020012002200320042005200620072008200920102011201220132014\n\n\n\n\nCode\nplotPairs(cd1Wide_grWeight, \"Brook trout\", 2000, 1, 8, upperBlank = TRUE)\n\n\n\n\n\n\n\n\n\nCode\nplotPairs(cd1Wide_grWeight, \"Brook trout\", 2001, upperBlank = TRUE)\n\n\n\n\n\n\n\n\n\nCode\nplotPairs(cd1Wide_grWeight, \"Brook trout\", 2002, 1, 9, upperBlank = TRUE)\n\n\n\n\n\n\n\n\n\nCode\nplotPairs(cd1Wide_grWeight, \"Brook trout\", 2003, upperBlank = TRUE)\n\n\n\n\n\n\n\n\n\nCode\nplotPairs(cd1Wide_grWeight, \"Brook trout\", 2004, upperBlank = TRUE)\n\n\n\n\n\n\n\n\n\nCode\nplotPairs(cd1Wide_grWeight, \"Brook trout\", 2005, upperBlank = TRUE)\n\n\n\n\n\n\n\n\n\nCode\nplotPairs(cd1Wide_grWeight, \"Brook trout\", 2006, upperBlank = TRUE)\n\n\n\n\n\n\n\n\n\nCode\nplotPairs(cd1Wide_grWeight, \"Brook trout\", 2007, upperBlank = TRUE)\n\n\n\n\n\n\n\n\n\nCode\nplotPairs(cd1Wide_grWeight, \"Brook trout\", 2008, upperBlank = TRUE)\n\n\n\n\n\n\n\n\n\nCode\nplotPairs(cd1Wide_grWeight, \"Brook trout\", 2009, upperBlank = TRUE)\n\n\n\n\n\n\n\n\n\nCode\nplotPairs(cd1Wide_grWeight, \"Brook trout\", 2010, 1, 8, upperBlank = TRUE)\n\n\n\n\n\n\n\n\n\nCode\nplotPairs(cd1Wide_grWeight, \"Brook trout\", 2011, 1, 7, upperBlank = TRUE)\n\n\n\n\n\n\n\n\n\nCode\nplotPairs(cd1Wide_grWeight, \"Brook trout\", 2012, upperBlank = TRUE)\n\n\n\n\n\n\n\n\n\nCode\nplotPairs(cd1Wide_grWeight, \"Brook trout\", 2013, upperBlank = TRUE)\n\n\n\n\n\n\n\n\n\nCode\nplotPairs(cd1Wide_grWeight, \"Brook trout\", 2014, 1, 5, upperBlank = TRUE)\n\n\n\n\n\n\n\n\n\n\n12.2.6.2 Consecutive season growth comparisons by age_season\nBrook trout\n\n\nCode\nggplot(cd1Wide_grWeight |> filter(speciesGG == \"Brook trout\", cohort %in% 2000:2014, `0_4` < 0.01), aes(`0_3`, `0_4`, color = factor(cohort))) +\n  geom_point() +\n  geom_vline(xintercept = 0, color = 'darkgrey') +\n  geom_hline(yintercept = 0, color = 'darkgrey') +\n  #geom_abline(intercept = 0, slope = 1) +\n  geom_smooth(method = \"lm\", se = FALSE, color = '#45454d') +\n  guides(colour = FALSE) +\n  facet_wrap(~cohort)\n\n\n\n\n\nCode\nggplot(cd1Wide_grWeight |> filter(speciesGG == \"Brook trout\", cohort %in% 2000:2014), aes(`0_4`, `1_1`, color = factor(cohort))) +\n  geom_point() +\n  geom_vline(xintercept = 0, color = 'darkgrey') +\n  geom_hline(yintercept = 0, color = 'darkgrey') +\n  #geom_abline(intercept = 0, slope = 1) +\n  geom_smooth(method = \"lm\", se = FALSE, color = '#45454d') +\n  guides(colour = FALSE) +\n  facet_wrap(~cohort)\n\n\n\n\n\nCode\nggplot(cd1Wide_grWeight |> filter(speciesGG == \"Brook trout\", cohort %in% 2000:2014), aes(`1_1`, `1_2`, color = factor(cohort))) +\n  geom_point() +\n  geom_vline(xintercept = 0, color = 'darkgrey') +\n  geom_hline(yintercept = 0, color = 'darkgrey') +\n  #geom_abline(intercept = 0, slope = 1) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  guides(colour = FALSE) +\n  facet_wrap(~cohort)\n\n\n\n\n\nCode\nggplot(cd1Wide_grWeight |> filter(speciesGG == \"Brook trout\", cohort %in% 2000:2014), aes(`1_2`, `1_3`, color = factor(cohort))) +\n  geom_point() +\n  geom_vline(xintercept = 0, color = 'darkgrey') +\n  geom_hline(yintercept = 0, color = 'darkgrey') +\n  #geom_abline(intercept = 0, slope = 1) +\n  geom_smooth(method = \"lm\", se = FALSE, color = '#45454d') +\n  guides(colour = FALSE) +\n  facet_wrap(~cohort)\n\n\n\n\n\nCode\nggplot(cd1Wide_grWeight |> filter(speciesGG == \"Brook trout\", cohort %in% 2000:2012), aes(`1_1`, `2_1`, color = factor(cohort))) +\n  geom_point() +\n  geom_vline(xintercept = 0, color = 'darkgrey') +\n  geom_hline(yintercept = 0, color = 'darkgrey') +\n  geom_abline(intercept = 0, slope = 1) +\n  geom_smooth(method = \"lm\", se = FALSE, color = '#45454d') +\n  guides(colour = FALSE) +\n  facet_wrap(~cohort)\n\n\n\n\n\n\n\n\n12.2.7 Growth rate in length vs growth rate in mass\n\n\nCode\nggplot(cd1, aes(grLength, grWeight)) +\n  geom_point(aes(size = observedWeight), alpha = 0.02) +\n  guides(size = guide_legend(override.aes = list(alpha = 1))) +\n  labs(x = \"Growth in length\", y = \"Growth in mass\") +\n  scale_color_discrete() +\n  facet_grid(seasonGG~speciesGG)\n\n\n\n\n\nCode\nplotGrLenMass <- function(d, s){\n  ggplot(cd1 |> filter(species==s), aes(grLength, grWeight, color = factor(year))) +\n    geom_point(alpha = 0.5) +\n    geom_smooth(method=\"lm\", se=FALSE) +\n    guides(size = guide_legend(override.aes = list(alpha = 1))) +\n    labs(x = \"Growth in length\", y = \"Growth in mass\") +\n    scale_color_discrete() +\n    facet_wrap(~seasonGG, scales = 'free')  \n}\n#  facet_wrap(~year)\n\n\n\nBrook troutBrown troutAtlantic salmon\n\n\n\n\nCode\nplotGrLenMass(cd1, \"bkt\")\n\n\n\n\n\n\n\n\n\nCode\nplotGrLenMass(cd1, \"bnt\")\n\n\n\n\n\n\n\n\n\nCode\nplotGrLenMass(cd1, \"ats\")\n\n\n\n\n\n\n\n\nNo relationship between means of neg and pos growth\n\n\nCode\nggplot(meanNegSRsN |> filter(speciesGG == \"Brook trout\"), aes(year, meanNegPos, color = negGrowth, group = negGrowth)) +\n  geom_point() +\n  geom_line() +\n  geom_hline(yintercept = 0) +\n  facet_grid(seasonGG~riverGG)\n\n\n\n\n\nCode\nggplot(meanNegSRsNWide, aes(`FALSE`, `TRUE`)) +\n  geom_point() +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  facet_grid(seasonGG~riverGG)"
  },
  {
    "objectID": "modelGrowthInMass.html#flow-and-temperature-growth-relationships",
    "href": "modelGrowthInMass.html#flow-and-temperature-growth-relationships",
    "title": "12  Growth in mass",
    "section": "12.3 Flow and temperature growth relationships",
    "text": "12.3 Flow and temperature growth relationships\n\n12.3.1 Mean flow effect on growth?\n\n\nCode\nplotFlowGR <- function(d, r){\nggplot(d |> filter(river == r), aes(meanFlowByRiver, grWeight, color = speciesGG)) +\n  geom_point(alpha = 0.05)  +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  geom_smooth(se = FALSE) +\n  geom_smooth(method = \"lm\", se =FALSE, formula = y~poly(x,2)) +\n  labs(x = \"Mean flow\", y = \"Growth in mass\") +\n  scale_color_discrete() +\n  #ggtitle(r) +\n  facet_grid(seasonGG~speciesGG)#, scales = 'free')\n}\n\n\n\nWest BrookOpen LargeOpen SmallIsolated small\n\n\n\n\nCode\nplotFlowGR(cd1, \"west brook\")\n\n\n\n\n\n\n\n\n\nCode\nplotFlowGR(cd1, \"wb jimmy\")\n\n\n\n\n\n\n\n\n\nCode\nplotFlowGR(cd1, \"wb mitchell\")\n\n\n\n\n\n\n\n\n\nCode\nplotFlowGR(cd1, \"wb obear\")\n\n\n\n\n\n\n\n\n\n\n12.3.2 Mean temperature effect on growth?\nMaybe in Jimmy for bnt, or for ats\n\n\nCode\nplotTempGR <- function(d, s){\n  ggplot(d |> filter(seasonGG == s), aes(meanTemperature, grWeight, color = speciesGG)) +\n    geom_point(alpha = 0.5)  +\n    geom_smooth(method = \"lm\", se = FALSE, color = 'darkgrey') +\n    geom_smooth(se = FALSE, color = 'darkgrey') +\n    geom_smooth(method = \"lm\", se =FALSE, formula = y~poly(x,2), color = 'darkgrey') +\n    labs(x = \"Mean temperature (c)\", y = \"Growth in mass\") +\n    scale_color_discrete() +\n   # ggtitle(s) +\n    facet_grid(speciesGG~riverGG)#, scales = 'free')\n}\n\n\n\nSpringSummerAutumnWinter\n\n\n\n\nCode\nplotTempGR(cd1, \"Spring\")\n\n\n\n\n\n\n\n\n\nCode\nplotTempGR(cd1, \"Summer\")\n\n\n\n\n\n\n\n\n\nCode\nplotTempGR(cd1, \"Autumn\")\n\n\n\n\n\n\n\n\n\nCode\nplotTempGR(cd1, \"Winter\")"
  },
  {
    "objectID": "modelGrowthInMass.html#proportion-of-fish-with-negative-growth",
    "href": "modelGrowthInMass.html#proportion-of-fish-with-negative-growth",
    "title": "12  Growth in mass",
    "section": "12.4 Proportion of fish with negative growth",
    "text": "12.4 Proportion of fish with negative growth\n\n12.4.1 Proportion of fish with negative growth by species/river/season\n\n\nCode\nggplot(cd1 |> filter(!is.na(negGrowth)), aes(negGrowth)) +\n  geom_bar() +\n  facet_grid(seasonGG~speciesGG+riverGG, scales = \"free\")\n\n\n\n\n\n\n\n12.4.2 Proportion of fish with negative growth by species/season\n\n\nCode\nggplot(propNegSRS |> filter(n > 50), aes(seasonGG, propNeg, color = riverGG, group = riverGG)) +\n  geom_point(aes(size = n)) +\n  geom_line() +\n  labs(x = \"Season\", y = \"Proportion of fish with negative growth in mass\") +\n  scale_color_discrete() +\n  facet_wrap(~speciesGG)\n\n\n\n\n\n\n\n12.4.3 Proportion of fish with negative growth by species/river/year\n\n\nCode\nplotPropNegByRiver <- function(d, spp){\n  ggplot(d |> filter(n > 10,  speciesGG == spp), \n         aes(year, propNeg, color = factor(seasonGG))) +\n    geom_point(aes(size = n)) +\n    geom_line() +\n    labs(x = \"Year\", y = \"Proportion of fish with negative growth in mass\") +\n    scale_color_discrete() +\n    facet_wrap(~riverGG)\n}\n\n\n\nBrook troutBrown troutAtlantic salmon\n\n\n\n\nCode\nplotPropNegByRiver(propNegSRsN, \"Brook trout\")\n\n\n\n\n\n\n\n\n\nCode\nplotPropNegByRiver(propNegSRsN |> filter(riverGG != \"Open Small\"), \"Brown trout\")\n\n\n\n\n\n\n\n\n\nCode\nplotPropNegByRiver(propNegSRsN, \"Atlantic salmon\")\n\n\n\n\n\n\n\n\n\n\n12.4.4 Proportion of fish with negative growth by species/river/year\nBreak down season by year, compare across rivers\n\n\nCode\nggplot(propNegSRsN |> filter(n > 10), aes(year, propNeg, color = riverGG)) +\n  geom_point(aes(size = n)) +\n  geom_line() +\n  labs(x = \"Year\", y = \"Proportion of fish with negative growth in mass\") +\n  scale_color_discrete() +\n  facet_grid(seasonGG~speciesGG)"
  },
  {
    "objectID": "modelGrowthInMass.html#environmental-effects-on-proportion-of-fish-with-negative-growth",
    "href": "modelGrowthInMass.html#environmental-effects-on-proportion-of-fish-with-negative-growth",
    "title": "12  Growth in mass",
    "section": "12.5 Environmental effects on proportion of fish with negative growth",
    "text": "12.5 Environmental effects on proportion of fish with negative growth\n\n12.5.1 Proportion of fish with negative growth by flow\n\n\nCode\nggplot(propNegSRsN |> filter(n > 10, riverGG == \"West Brook\"), aes(mF, propNeg, color = riverGG)) +\n  geom_point(aes(size = n)) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  scale_y_continuous(\"Proportion of fish with negative growth in mass\") +\n  scale_x_log10(\"Mean flow\") +\n  scale_color_discrete() +\n  ggtitle(\"West Brook\") +\n  facet_grid(seasonGG~speciesGG)\n\n\n\n\n\nCode\nggplot(propNegSRsN |> filter(n > 10, riverGG != \"West Brook\"), aes(mF, propNeg, color = riverGG)) +\n  geom_point(aes(size = n)) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  scale_y_continuous(\"Proportion of fish with negative growth in mass\") +\n  scale_x_log10(\"Mean flow\") +\n  scale_color_discrete() +\n  ggtitle(\"Tributaries\") +\n  facet_grid(seasonGG~speciesGG)\n\n\n\n\n\n\n\n12.5.2 Proportion of fish with negative growth by temperature\n\n\nCode\nplotNegGrowth_temp <- function(d, s){\n  ggplot(d |> filter(n > 10, seasonGG == s), aes(mT, propNeg, color = riverGG)) +\n    geom_point(aes(size = n)) +\n    geom_smooth(method = \"lm\", se = FALSE) +\n    scale_y_continuous(\"Proportion of fish with negative growth in mass\") +\n    scale_x_continuous(\"Mean temperature (C)\") +\n    scale_color_discrete() +\n    ggtitle(s) +\n    facet_grid(riverGG~speciesGG)\n}\n\n\n\nSpringSummerAutumnWinter\n\n\n\n\nCode\nplotNegGrowth_temp(propNegSRsN, \"Spring\")\n\n\n\n\n\n\n\n\n\nCode\nplotNegGrowth_temp(propNegSRsN, \"Summer\")\n\n\n\n\n\n\n\n\n\nCode\nplotNegGrowth_temp(propNegSRsN, \"Autumn\")\n\n\n\n\n\n\n\n\n\nCode\nplotNegGrowth_temp(propNegSRsN, \"Winter\")\n\n\n\n\n\n\n\n\n\n\n12.5.3 Proportion of fish with negative growth by 3 species fish counts\n\n\nCode\nggplot(propNegSRsN |> filter(n > 10, riverGG == \"West Brook\"), aes(nInd, propNeg, color = riverGG)) +\n  geom_point(aes(size = n)) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  scale_y_continuous(\"Proportion of fish with negative growth in mass\") +\n  scale_x_log10(\"3 species count\") +\n  scale_color_discrete() +\n  ggtitle(\"West Brook\") +\n  facet_grid(seasonGG~speciesGG)\n\n\n\n\n\nCode\nggplot(propNegSRsN |> filter(n > 10, riverGG != \"West Brook\"), aes(nInd, propNeg, color = riverGG)) +\n  geom_point(aes(size = n)) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  scale_y_continuous(\"Proportion of fish with negative growth in mass\") +\n  scale_x_log10(\"3 species count\") +\n  scale_color_discrete() +\n  ggtitle(\"Tributaries\") +\n  facet_grid(seasonGG~speciesGG)\n\n\n\n\n\n\n\n12.5.4 Proportion of fish with negative growth by conspecific fish counts\n\n\nCode\nggplot(propNegSRsN |> filter(n > 10, riverGG == \"West Brook\"), aes(nIndBySpp, propNeg, color = riverGG)) +\n  geom_point(aes(size = n)) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  scale_y_continuous(\"Proportion of fish with negative growth in mass\") +\n  scale_x_log10(\"conspecific count\") +\n  scale_color_discrete() +\n  ggtitle(\"West Brook\") +\n  facet_grid(seasonGG~speciesGG)\n\n\n\n\n\nCode\nggplot(propNegSRsN |> filter(n > 10, riverGG != \"West Brook\"), aes(nIndBySpp, propNeg, color = riverGG)) +\n  geom_point(aes(size = n)) +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  scale_y_continuous(\"Proportion of fish with negative growth in mass\") +\n  scale_x_log10(\"conspecific count\") +\n  scale_color_discrete() +\n  ggtitle(\"Tributaries\") +\n  facet_grid(seasonGG~speciesGG)"
  },
  {
    "objectID": "modelGrowthInMass.html#ft-cycle-graphs",
    "href": "modelGrowthInMass.html#ft-cycle-graphs",
    "title": "12  Growth in mass",
    "section": "12.6 F/T cycle graphs",
    "text": "12.6 F/T cycle graphs\n\n12.6.1 Mean flow and temperature\n\n\nCode\nplot_mT_mF <- function(d, s, plotText){\n  ggplot(d |> filter(n > 25, speciesGG == s), aes(mT, mF_log10, color = factor(seasonGG))) +\n    geom_point(aes(size = propNeg)) +\n    {if(plotText) geom_text(aes(label = year), vjust = 0, nudge_y = -0.075, check_overlap = FALSE, size = 3)} +\n    labs(x = \"Mean temperature (C)\", y = \"log10 of mean Flow\") +\n    scale_color_discrete() +\n    facet_wrap(~riverGG, scales = \"free\")\n}\n\n\n\nBrook troutBrown troutAtlantic salmon\n\n\n\n\nCode\nplot_mT_mF(propNegSRsN, \"Brook trout\", FALSE)\n\n\n\n\n\n\n\n\n\nCode\nplot_mT_mF(propNegSRsN, \"Brown trout\", FALSE)\n\n\n\n\n\n\n\n\n\nCode\nplot_mT_mF(propNegSRsN, \"Atlantic salmon\", FALSE)\n\n\n\n\n\n\n\n\n\n\n12.6.2 Mean flow and temperature with year labels\n\n12.6.2.1 panel-tabset\n\n\n\n12.6.3 Brook trout\n\n\nCode\nplot_mT_mF(propNegSRsN, \"Brook trout\", TRUE)\n\n\n\n\n\n\n12.6.3.1 Brown trout\n\n\nCode\nplot_mT_mF(propNegSRsN, \"Brown trout\", TRUE)\n\n\n\n\n\n\n\n12.6.3.2 Atlantic salmon\n\n\nCode\nplot_mT_mF(propNegSRsN, \"Atlantic salmon\", TRUE)\n\n\n\n\n\n:::\nMean flow and temperature values for each season and year for the West Brook\nNot very informative\n\n\nCode\nggplot(propNegSRsN |> filter(n > 10, riverGG == 'West Brook') |> arrange(riverGG, speciesGG, year, seasonGG), aes(mT, mF_log10)) +\n  geom_line() +\n  geom_point(aes(color = factor(seasonGG))) +\n  facet_wrap(~year)\n\n\n\n\n\n\n\n\n12.6.4 Yearly temperature/flow cycles of daily data\n\n\nCode\nplotMerged <- function(d, r, minYear = 2000, maxYear = 2017){\n  ggplot(d |> filter(riverGG == r, year %in% c(minYear:maxYear)), \n         aes(temperature, log10(flowByRiverm3s), color = seasonGG, group = seasonGG)) +\n    geom_point() +\n    geom_smooth(se = FALSE) +\n    #geom_line() +\n    labs(x = \"Temperature (C)\", y = \"log10 of Flow\") +\n    scale_color_discrete() +\n    ggtitle(r) +\n    facet_wrap(~year, scales = 'free')\n}\n# this plots f/t for all three species - good for filling in gaps\n\n\n\nWest BrookOpen LargeOpen SmallIsolated small\n\n\n\n\nCode\nplotMerged(envIn_propNeg, \"West Brook\", 2000, 2017)\n\n\n\n\n\n\n\n\n\nCode\nplotMerged(envIn_propNeg, \"Open Large\", 2002, 2017)\n\n\n\n\n\n\n\n\n\nCode\nplotMerged(envIn_propNeg, \"Open Small\", 2002, 2017)\n\n\n\n\n\n\n\n\n\nCode\nplotMerged(envIn_propNeg, \"Isolated Small\", 2002, 2017)\n\n\n\n\n\n\n\n\n\n\n12.6.5 Smooths of temperature/flow cycles of daily data by season\n\n\nCode\nplotMergedBySeason <- function(d, r, minYear = 2000, maxYear = 2017) {\n  ggplot(d |> filter(riverGG == r, year %in% c(minYear:maxYear), !is.na(seasonGG)), \n         aes(temperature, log10(flowByRiverm3s), \n             color = factor(year), group = year\n             )\n         ) +\n    #geom_point() +\n    geom_smooth(se = FALSE) +\n    labs(x = \"Temperature (C)\", y = \"log10 of Flow\") +\n    scale_color_discrete() +\n    ggtitle(r) +\n    facet_wrap(~seasonGG, scales = 'free')\n}\n\n\n\nWest BrookOpen LargeOpen SmallIsolated small\n\n\n\n\nCode\nplotMergedBySeason(envIn_propNeg, \"West Brook\", 2000, 2017)\n\n\n\n\n\n\n\n\n\nCode\nplotMergedBySeason(envIn_propNeg, \"Open Large\", 2002, 2017)\n\n\n\n\n\n\n\n\n\nCode\nplotMergedBySeason(envIn_propNeg, \"Open Small\", 2002, 2017)\n\n\n\n\n\n\n\n\n\nCode\nplotMergedBySeason(envIn_propNeg, \"Isolated Small\", 2002, 2017)\n\n\n\n\n\n\n\n\nTO ADD: low flow high density important? Look at interaction btw flow:density\n\n\n12.6.6 F/T cycles with labels\nPlot F/T cycles by river, season, species with label for propNeg and conspecific and all-species abundances\n\n\nCode\nplotMergedBySeasonByEverything <- function(d, d2, r, s, spp, minYear = 2000, maxYear = 2017){\n  ggplot(d |> \n           filter(riverGG == r,\n                  year %in% c(minYear:maxYear), \n                  !is.na(seasonGG), \n                  seasonGG == s, \n                  speciesGG == spp), \n         aes(temperature, log10(flowByRiverm3s))\n         ) +\n    geom_smooth(se = FALSE, color = \"darkgrey\") +\n    geom_point(aes(color = yday)) +\n    geom_text(aes(\n      x = minTemp + 3.0, \n      y = log10(minFlow) - 1, \n      label = paste(\"propNeg=\",round(propNeg, 2)) \n      #size = propNeg\n      ), \n        data = d2|> \n          filter(riverGG == r, \n                 year %in% c(minYear:maxYear),\n                 seasonGG == s, \n                 speciesGG == spp)\n        ) +\n    geom_text(aes(\n      x = minTemp + 3.0,\n      y = log10(minFlow) - 0.3,\n      label = paste(paste(\"nIndAllSpp=\", nInd), paste(\"nIndBySpp=\", nIndBySpp), sep = \"\\n\")\n      ),\n        data = d2|>\n          filter(riverGG == r,\n                 year %in% c(minYear:maxYear),\n                 seasonGG == s,\n                 speciesGG == spp)\n        ) +\n    labs(x = \"Temperature (c)\", y = \"log10 Flow\") +\n    ggtitle(paste(r, s, spp, sep = \", \")) +\n  facet_wrap(~year)\n}\n\n\n\n12.6.6.1 West Brook\n\nSpringSummerAutumnWinter\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"West Brook\", \"Spring\", \"Brook trout\", 2000, 2017)\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"West Brook\", \"Spring\", \"Brown trout\", 2000, 2017)\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"West Brook\", \"Spring\", \"Atlantic salmon\", 2000, 2017)\n\n\n\n\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"West Brook\", \"Summer\", \"Brook trout\", 2000, 2017)\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"West Brook\", \"Summer\", \"Brown trout\", 2000, 2017)\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"West Brook\", \"Summer\", \"Atlantic salmon\", 2000, 2017)\n\n\n\n\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"West Brook\", \"Autumn\", \"Brook trout\", 2000, 2017)\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"West Brook\", \"Autumn\", \"Brown trout\", 2000, 2017)\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"West Brook\", \"Autumn\", \"Atlantic salmon\", 2000, 2017)\n\n\n\n\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"West Brook\", \"Winter\", \"Brook trout\", 2000, 2017)\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"West Brook\", \"Winter\", \"Brown trout\", 2000, 2017)\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"West Brook\", \"Winter\", \"Atlantic salmon\", 2000, 2017)\n\n\n\n\n\n\n\n\n\n\n12.6.6.2 Open Large\n\nSpringSummerAutumnWinter\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"Open Large\", \"Spring\", \"Brook trout\", 2000, 2017)\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"Open Large\", \"Spring\", \"Brown trout\", 2000, 2017)\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"Open Large\", \"Spring\", \"Atlantic salmon\", 2000, 2017)\n\n\n\n\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"Open Large\", \"Summer\", \"Brook trout\", 2000, 2017)\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"Open Large\", \"Summer\", \"Brown trout\", 2000, 2017)\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"Open Large\", \"Summer\", \"Atlantic salmon\", 2000, 2017)\n\n\n\n\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"Open Large\", \"Autumn\", \"Brook trout\", 2000, 2017)\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"Open Large\", \"Autumn\", \"Brown trout\", 2000, 2017)\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"Open Large\", \"Autumn\", \"Atlantic salmon\", 2000, 2017)\n\n\n\n\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"Open Large\", \"Winter\", \"Brook trout\", 2000, 2017)\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"Open Large\", \"Winter\", \"Brown trout\", 2000, 2017)\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"Open Large\", \"Winter\", \"Atlantic salmon\", 2000, 2017)\n\n\n\n\n\n\n\n\n\n\n12.6.6.3 Open Small\n\nSpringSummerAutumnWinter\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"Open Small\", \"Spring\", \"Brook trout\", 2000, 2017)\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"Open Small\", \"Spring\", \"Brown trout\", 2000, 2017)\n\n\n\n\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"Open Small\", \"Summer\", \"Brook trout\", 2000, 2017)\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"Open Small\", \"Summer\", \"Brown trout\", 2000, 2017)\n\n\n\n\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"Open Small\", \"Autumn\", \"Brook trout\", 2000, 2017)\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"Open Small\", \"Autumn\", \"Brown trout\", 2000, 2017)\n\n\n\n\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"Open Small\", \"Winter\", \"Brook trout\", 2000, 2017)\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"Open Small\", \"Winter\", \"Brown trout\", 2000, 2017)\n\n\n\n\n\n\n\n\n\n\n12.6.6.4 Isolated Small\n\nSpringSummerAutumnWinter\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"Isolated Small\", \"Spring\", \"Brook trout\", 2000, 2017)\n\n\n\n\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"Isolated Small\", \"Summer\", \"Brook trout\", 2000, 2017)\n\n\n\n\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"Isolated Small\", \"Autumn\", \"Brook trout\", 2000, 2017)\n\n\n\n\n\n\n\n\n\nCode\nplotMergedBySeasonByEverything(envIn_propNeg, propNegLabels, \"Isolated Small\", \"Winter\", \"Brook trout\", 2000, 2017)"
  },
  {
    "objectID": "modelGrowthInMass.html#consequences-of-negative-growth",
    "href": "modelGrowthInMass.html#consequences-of-negative-growth",
    "title": "12  Growth in mass",
    "section": "12.7 Consequences of negative growth",
    "text": "12.7 Consequences of negative growth\n\n12.7.1 Growth and last observation\nRelationship between individual growth and length of subsequent observations (how many more observations before the last observatoin) for individual fish.\n\n\nCode\nplotGrowthSamplesLeft <- function(d, spp, r){\n  ggplot(d |> filter(speciesGG == spp, riverGG == r, year < 2011, samplesBeforeLast >= 0), aes(grWeight, samplesBeforeLast)) +\n    geom_point(alpha = 0.3) +\n    geom_smooth(method = \"lm\", se = FALSE) +\n    geom_vline(xintercept = 0) +\n    ggtitle(paste(spp, r, sep = \", \")) +\n    facet_grid(seasonGG~year)\n}\n\nplotGrowthSamplesLeft(cd1, \"Brook trout\", \"West Brook\")\n\n\n\n\n\nCode\nplotGrowthSamplesLeft(cd1, \"Brook trout\", \"Open Large\")\n\n\n\n\n\nCode\nplotGrowthSamplesLeft(cd1, \"Brook trout\", \"Open Small\")\n\n\n\n\n\nCode\nplotGrowthSamplesLeft(cd1, \"Brook trout\", \"Isolated Small\")\n\n\n\n\n\nCode\nplotGrowthSamplesLeft(cd1, \"Brown trout\", \"West Brook\")\n\n\n\n\n\n\n\nCode\nplotGrowthSamplesLeftNoYear <- function(d, spp, r){\n  ggplot(d |> filter(speciesGG == spp, riverGG == r, year < 2011, samplesBeforeLast >= 0), aes(grWeight, samplesBeforeLast)) +\n    geom_point(alpha = 0.3) +\n    geom_smooth(method = \"lm\", se = FALSE) +\n    geom_vline(xintercept = 0) +\n    ggtitle(paste(spp, r, sep = \", \")) +\n    labs(x = \"Individual growth in mass\", y = \"Number of samples before last observation\") +\n    facet_wrap(~seasonGG)\n}\n\nplotGrowthSamplesLeftNoYear(cd1, \"Brook trout\", \"West Brook\")\n\n\n\n\n\nCode\nplotGrowthSamplesLeftNoYear(cd1, \"Brook trout\", \"Open Large\")\n\n\n\n\n\nCode\nplotGrowthSamplesLeftNoYear(cd1, \"Brook trout\", \"Open Small\")\n\n\n\n\n\nCode\nplotGrowthSamplesLeftNoYear(cd1, \"Brook trout\", \"Isolated Small\")\n\n\n\n\n\nCode\nplotGrowthSamplesLeftNoYear(cd1, \"Brown trout\", \"West Brook\")\n\n\n\n\n\nCode\nplotGrowthSamplesLeftNoYear(cd1, \"Atlantic salmon\", \"West Brook\")\n\n\n\n\n\n\n\nCode\nplotGR_sampsBL <- function(d, spp, r) {\n  ggplot(d |> filter(n > 5, speciesGG %in% spp, riverGG %in% r), aes(meanGR, samplesBeforeLast, color = negGrowth)) + \n    geom_point() +\n    geom_smooth(method = \"lm\", se = FALSE) +\n    ggtitle(paste(spp, r, sep = \", \")) +\n    labs(x = \"Individual growth in mass\", y = \"Number of samples before last observation\") +\n    facet_grid(speciesGG~seasonGG+riverGG, scales = \"free\")\n}\n\nplotGR_sampsBL(negGr_beforeLast, c(\"Brook trout\",\"Brown trout\", \"Atlantic salmon\"), c(\"West Brook\", \"Open Large\"))\n\n\n\n\n\nCode\nplotGR_sampsBL2 <- function(d, spp, r) {\n  ggplot(d |> filter(n > 5, speciesGG %in% spp, riverGG %in% r), aes(meanGR, samplesBeforeLast, color = speciesGG)) + \n    geom_point() +\n    geom_smooth(method = \"lm\", se = FALSE) +\n    scale_color_discrete() +\n    ggtitle(paste(spp, r, sep = \", \")) +\n    labs(x = \"Individual growth in mass\", y = \"Number of samples before last observation\") +\n    facet_grid(riverGG~negGrowth+seasonGG, scales = \"free\")\n}\n\nplotGR_sampsBL2(negGr_beforeLast, c(\"Brook trout\",\"Brown trout\", \"Atlantic salmon\"), c(\"West Brook\", \"Open Large\"))\n\n\n\n\n\nCode\nplotGR_sampsBL3 <- function(d, spp, r, ng) {\n  ggplot(d |> filter(n > 5, speciesGG %in% spp, riverGG %in% r, negGrowth %in% ng), aes(meanGR, samplesBeforeLast, color = speciesGG)) + \n    geom_point() +\n    geom_smooth(method = \"lm\", se = FALSE) +\n    scale_color_discrete() +\n    ggtitle(paste(spp, r, ng, sep = \", \")) +\n    labs(x = \"Individual growth in mass\", y = \"Number of samples before last observation\") +\n    facet_wrap(negGrowth~seasonGG, scales = \"free\")\n}\n\nplotGR_sampsBL3(negGr_beforeLast, c(\"Brook trout\",\"Brown trout\", \"Atlantic salmon\"), c(\"West Brook\"), FALSE)\n\n\n\n\n\nCode\nplotGR_sampsBL3(negGr_beforeLast, c(\"Brook trout\",\"Brown trout\", \"Atlantic salmon\"), c(\"West Brook\"), TRUE)\n\n\n\n\n\nTO ADD: mean samplesBeforeLast by negGR TO ADD: knownZ=0 vs knownZ==1, growth in previous interval\n\n\nCode\n# cd1_target |> \n#       group_by(speciesGG, riverGG, seasonGG, samplesBeforeLast, negGrowth) |> \n\n\n\n\n12.7.2 Growth and movement distance\nTO add: break avg move into negGR/not negGR\n\n\nCode\nplotGR_moveDist <- function(d, spp, r) {\n  ggplot(d |> filter(speciesGG %in% spp, riverGG %in% r), aes(grWeight, distMoved, color = speciesGG)) + \n    geom_point(alpha = 0.2) +\n    geom_smooth(method = \"lm\", se = FALSE, color = 'darkgrey') +\n    scale_color_discrete() +\n    ggtitle(paste(spp, r, sep = \", \")) +\n    labs(x = \"Individual growth in mass\", y = \"Movement distance\") +\n    facet_grid(speciesGG~seasonGG, scales = \"free\")\n}\n\nplotGR_moveDist(cd1, c(\"Brook trout\",\"Brown trout\",\"Atlantic salmon\"), c(\"West Brook\"))\n\n\n\n\n\n\n\nCode\nplotGR_moveDist2 <- function(d, spp, r) {\n  ggplot(d |> filter(speciesGG %in% spp, riverGG %in% r), aes(grWeight, distMoved, color = speciesGG)) + \n    geom_point(alpha = 0.2) +\n    geom_smooth(method = \"lm\", se = FALSE, color = 'darkgrey') +\n    scale_color_discrete() +\n    ggtitle(paste(spp, r, sep = \", \")) +\n    labs(x = \"Individual growth in mass\", y = \"Movement distance\") +\n    facet_grid(riverGG~seasonGG, scales = \"free\")\n}\n\nplotGR_moveDist2(cd1, c(\"Brook trout\"), c(\"West Brook\", \"Open Large\", \"Open Small\", \"Isolated Small\"))\n\n\n\n\n\nCode\nplotGR_moveDist2(cd1, c(\"Brown trout\"), c(\"West Brook\", \"Open Large\", \"Open Small\"))"
  },
  {
    "objectID": "modelGrowthInMass.html#machine-learning-models",
    "href": "modelGrowthInMass.html#machine-learning-models",
    "title": "12  Growth in mass",
    "section": "12.8 Machine Learning models",
    "text": "12.8 Machine Learning models\nUsing xgBoost to explore patterns in:\n- Binary, lose mass:gain mass\n- Regression, growth in mass\n\n12.8.1 Binary model with negative growth, yes:no\nNot yet in targets….\n\n\nCode\n# http://uc-r.github.io/gbm_regression\n\n\ndML <- cd1 |> \n  filter(speciesGG == \"Brook trout\", !is.na(grWeight)) |> \n  mutate(age = year - cohort) |> \n  dplyr::select(riverGG, seasonGG, observedWeight, cohort, age, meanTemperature, meanFlowByRiver, negGrowth) \n\n# variable names\nfeatures <- setdiff(names(dML), \"negGrowth\")\n\n# Create the treatment plan from the training data\ntreatplan <- vtreat::designTreatmentsZ(dML, features, verbose = FALSE)\n\n# Get the \"clean\" variable names from the scoreFrame\nnew_vars <- treatplan %>%\n  magrittr::use_series(scoreFrame) %>%        \n  dplyr::filter(code %in% c(\"clean\", \"lev\")) %>% \n  magrittr::use_series(varName)     \n\n# Prepare the training data\nfeatures_train <- vtreat::prepare(treatplan, dML, varRestriction = new_vars) %>% as.matrix()\nresponse_train <- dML$negGrowth\n\n# Prepare the test data\nfeatures_test <- vtreat::prepare(treatplan, dML, varRestriction = new_vars) %>% as.matrix()\nresponse_test <- dML$negGrowth\n\n# dimensions of one-hot encoded data\ndim(features_train)\n\n\n[1] 10089    13\n\n\nCode\ndim(features_test)\n\n\n[1] 10089    13\n\n\n\n12.8.1.1 Run first model\n\n\nCode\n# reproducibility\nset.seed(123)\n\nxgb.fit1 <- xgb.cv(\n  data = features_train,\n  label = response_train,\n  nrounds = 10000,\n  nfold = 5,\n  objective = \"binary:logistic\", #\"reg:linear\",  # for regression models\n  verbose = 0,               # silent,\n  early_stopping_rounds = 15 # stop if no improvement for 10 consecutive trees\n)\n\n# get number of trees that minimize error\nxgb.fit1$evaluation_log %>%\n  dplyr::summarise(\n    ntrees.train = which(train_logloss_mean == min(train_logloss_mean))[1],\n    logloss.train   = min(train_logloss_mean),\n    ntrees.test  = which(test_logloss_mean == min(test_logloss_mean))[1],\n    logloss.test   = min(test_logloss_mean),\n  )\n\n\n  ntrees.train logloss.train ntrees.test logloss.test\n1           44     0.1802105          29    0.2506292\n\n\nCode\n# plot error vs number trees\nggplot(xgb.fit1$evaluation_log) +\n  geom_line(aes(iter, train_logloss_mean), color = \"red\") +\n  geom_line(aes(iter, test_logloss_mean), color = \"blue\")\n\n\n\n\n\n\n\n12.8.1.2 Add early stopping\n\n\nCode\n## tune the model\n# create parameter list\nparams <- list(\n  eta = .1,\n  max_depth = 5,\n  min_child_weight = 2,\n  subsample = .8,\n  colsample_bytree = .9\n)\n\nxgb.fit2 <- xgb.cv(\n  params = params,\n  data = features_train,\n  label = response_train,\n  nrounds = 20000,\n  nfold = 5,\n  objective = \"binary:logistic\", #\"reg:linear\",  # for regression models\n  verbose = 0,               # silent,\n  early_stopping_rounds = 10 # stop if no improvement for 10 consecutive trees\n)\n\nxgb.fit2$evaluation_log %>%\n  dplyr::summarise(\n    ntrees.train = which(train_logloss_mean == min(train_logloss_mean))[1],\n    logloss.train   = min(train_logloss_mean),\n    ntrees.test  = which(test_logloss_mean == min(test_logloss_mean))[1],\n    logloss.test   = min(test_logloss_mean),\n  )\n\n\n  ntrees.train logloss.train ntrees.test logloss.test\n1          128      0.201228         118     0.247713\n\n\nCode\n# plot error vs number trees\nggplot(xgb.fit2$evaluation_log) +\n  geom_line(aes(iter, train_logloss_mean), color = \"red\") +\n  geom_line(aes(iter, test_logloss_mean), color = \"blue\")\n\n\n\n\n\n\n\n12.8.1.3 Hyperparameter search grid\n\n\nCode\n# create hyperparameter grid\nhyper_grid <- expand.grid(\n  eta = c(.01, .05, .1, .3),\n  max_depth = c(1, 3, 5, 7),\n  min_child_weight = c(1, 3, 5, 7),\n  subsample = c(.65, .8, 1), \n  colsample_bytree = c(.8, .9, 1),\n  optimal_trees = 0,               # a place to dump results\n  min_RMSE = 0                     # a place to dump results\n)\nnrow(hyper_grid)\n\n\n[1] 576\n\n\nCode\n# reproducibility\n  set.seed(123)\n#   \n# # grid search \n# for(i in 1:nrow(hyper_grid)) {\n#   print(i)\n#   # create parameter list\n#   params <- list(\n#     eta = hyper_grid$eta[i],\n#     max_depth = hyper_grid$max_depth[i],\n#     min_child_weight = hyper_grid$min_child_weight[i],\n#     subsample = hyper_grid$subsample[i],\n#     colsample_bytree = hyper_grid$colsample_bytree[i]\n#   )\n# \n#   \n#   # train model\n#   xgb.tune <- xgb.cv(\n#     params = params,\n#     data = features_train,\n#     label = response_train,\n#     nrounds = 5000,\n#     nfold = 5,\n#     objective = \"binary:logistic\", #\"reg:linear\",  # for regression models\n#     verbose = 0,               # silent,\n#     early_stopping_rounds = 20 # stop if no improvement for 10 consecutive trees\n#   )\n#   \n#   # add min training error and trees to grid\n#   hyper_grid$optimal_trees[i] <- which.min(xgb.tune$evaluation_log$test_logloss_mean)\n#   hyper_grid$min_RMSE[i] <- min(xgb.tune$evaluation_log$test_logloss_mean)\n# }\n# \n# hyper_grid %>%\n#   dplyr::arrange(min_RMSE) %>%\n#   head(15)\n  \n#       eta max_depth min_child_weight subsample colsample_bytree optimal_trees  min_RMSE\n# 1  0.01         5                1      0.80              0.8          1082 0.2464962\n# 2  0.01         5                1      0.65              0.8          1042 0.2466260\n# 3  0.01         5                1      0.80              0.9          1115 0.2467519\n# 4  0.01         7                1      0.80              0.8           676 0.2467640\n# 5  0.01         7                1      0.65              0.8           671 0.2468416\n# 6  0.05         5                1      0.65              0.9           217 0.2470321\n# 7  0.01         7                3      0.80              0.8           676 0.2470520\n# 8  0.01         5                3      0.80              0.8          1115 0.2470706\n# 9  0.01         5                3      0.80              0.9          1089 0.2470969\n# 10 0.10         5                3      1.00              0.9           158 0.2471294\n# 11 0.05         7                3      0.80              1.0           139 0.2471420\n# 12 0.01         5                1      0.65              0.9           960 0.2471568\n# 13 0.01         5                1      0.80              1.0          1023 0.2471608\n# 14 0.01         7                3      0.65              0.8           671 0.2472037\n# 15 0.10         5                1      0.80              0.8            95 0.2472090\n\n\n\n\n12.8.1.4 Fit the top model\n\n\nCode\n# parameter list - from the top model of the grid search above\nparams <- list(\n  eta = 0.01,\n  max_depth = 5,\n  min_child_weight = 1,\n  subsample = 0.8,\n  colsample_bytree = 0.8\n)\n\n# train final model\nxgb.fit.final <- xgboost(\n  params = params,\n  data = features_train,\n  label = response_train,\n  nrounds = 1082,\n  objective = \"binary:logistic\",\n  verbose = 0,\n  early_stopping_rounds = 25 # stop if no improvement for 10 consecutive trees\n)\n\n\n\n\n12.8.1.5 Variable importance plot\n\n\nCode\n# create importance matrix\nimportance_matrix <- xgb.importance(model = xgb.fit.final)\n\n# variable importance plot\nxgb.plot.importance(importance_matrix, top_n = 10, measure = \"Gain\")\n\n\n\n\n\n\n\n12.8.1.6 Partial dependence plots\n\n\nCode\npW <- xgb.fit.final %>%\n  pdp::partial(pred.var = \"observedWeight\", n.trees = 1082, grid.resolution = 100, train = features_train) %>%\n  autoplot(rug = TRUE, train = features_train) \n  #scale_y_discrete() +\n  #ggtitle(\"PDP\")\n\npFlow <- xgb.fit.final %>%\n  pdp::partial(pred.var = \"meanFlowByRiver\", n.trees = 1082, grid.resolution = 100, train = features_train) %>%\n  autoplot(rug = TRUE, train = features_train)\n\npTemp <- xgb.fit.final %>%\n  pdp::partial(pred.var = \"meanTemperature\", n.trees = 1082, grid.resolution = 100, train = features_train) %>%\n  autoplot(rug = TRUE, train = features_train)\n\npAge <- xgb.fit.final %>%\n  pdp::partial(pred.var = \"age\", n.trees = 1082, grid.resolution = 100, train = features_train) %>%\n  autoplot(rug = TRUE, train = features_train)\n\npCohort <- xgb.fit.final %>%\n  pdp::partial(pred.var = \"cohort\", n.trees = 1082, grid.resolution = 100, train = features_train) %>%\n  autoplot(rug = TRUE, train = features_train)\n\n\ngridExtra::grid.arrange(pW, pFlow, pTemp, pAge, pCohort, nrow = 3)\n\n\n\n\n\n\n\n12.8.1.7 Lime\n\n\nCode\n# get a few observations to perform local interpretation on\nlocal_obs <- dML[1:3, ]\n\n# one-hot encode the local observations to be assessed.\nlocal_obs_onehot <- vtreat::prepare(treatplan, local_obs, varRestriction = new_vars)\n\n# apply LIME\nexplainer <- lime(data.frame(features_train), xgb.fit.final, quantile_bins = FALSE)\nexplanation <- lime::explain(local_obs_onehot, explainer, n_features = 5, n_labels = 2)\nplot_features(explanation)\n\n\n\n\n\n\n\n\n12.8.2 Growth model, continuous growth\ncan we add season, river interactions? or do separate analyses?\n\n\nCode\nlibrary(targets)\ndML_W <- tar_read(dML_W_target)\ntreatplan_W <- tar_read(treatplan_W_target)\nfeatures_train_W <- tar_read(features_train_W_target)\nnew_vars_W <- tar_read(new_vars_W_target)\n\n# dimensions of one-hot encoded data\nfeatures_train_W <- tar_read(features_train_W_target)\nfeatures_test_W <- tar_read(features_test_W_target)\n\nresponse_train_W <- tar_read(response_train_W_target)\nresponse_test_W <- tar_read(response_test_W_target)\n\n# run from targets\nhyper_grid_W <- tar_read(hyper_grid_W_target)\ntopModel_W <- tar_read(topModel_W_target)\n\n\nfinalModels_W <- tar_read(finalModels_W_target)\n\nmodelToUse <- 1\n\n\n\n12.8.2.1 Run first model\n\n\nCode\n# reproducibility\nset.seed(1234)\n\nxgb.fit1_W <- xgb.cv(\n  data = features_train_W,\n  label = response_train_W,\n  nrounds = 500,\n  nfold = 5,\n  objective = \"reg:squarederror\",  # for regression models\n  verbose = 0,               # silent,\n  early_stopping_rounds = 10\n)\n\n# get number of trees that minimize error\nxgb.fit1_W$evaluation_log %>%\n  dplyr::summarise(\n    ntrees.train = which(train_rmse_mean == min(train_rmse_mean))[1],\n    rmse.train   = min(train_rmse_mean),\n    ntrees.test  = which(test_rmse_mean == min(test_rmse_mean))[1],\n    rmse.test   = min(test_rmse_mean),\n  )\n\n\n  ntrees.train  rmse.train ntrees.test   rmse.test\n1           67 0.001534427          65 0.001884902\n\n\nCode\n# plot error vs number trees\nggplot(xgb.fit1_W$evaluation_log) +\n  geom_line(aes(iter, train_rmse_mean), color = \"red\") +\n  geom_line(aes(iter, test_rmse_mean), color = \"blue\")\n\n\n\n\n\n\n\n12.8.2.2 Hyperparameter search grid\n\n\nCode\n# create hyperparameter grid\n# original grid - using a smaller one in targets\n# hyper_grid_W0 <- expand.grid(\n#   eta = c(.01, .05, .1, .3),\n#   max_depth = c(1, 3, 5, 7),\n#   min_child_weight = c(1, 3, 5, 7),\n#   subsample = c(.65, .8, 1), \n#   colsample_bytree = c(.8, .9, 1),\n#   optimal_trees = 0,               # a place to dump results\n#   min_RMSE = 0                     # a place to dump results\n# )\n# nrow(hyper_grid_W0)\n\n\n\n# Original run using hyper_grid_W0 \n# eta max_depth min_child_weight\n# subsample colsample_bytree optimal_trees min_RMSE 1 0.01 7 5 0.65 0.8\n# 1376 0.001847600 2 0.05 7 3 0.80 0.9 292 0.001848465 3 0.01 7 7 0.80 0.9\n# 1382 0.001849086 4 0.01 5 1 0.80 0.8 2399 0.001849250 5 0.05 7 3 0.80\n# 0.8 281 0.001849258 6 0.01 5 3 0.65 0.8 2147 0.001849905 7 0.05 5 1 0.65\n# 0.8 459 0.001849931 8 0.01 5 5 0.80 0.9 2296 0.001850049 9 0.01 7 5 0.65\n# 0.9 1402 0.001850246 10 0.01 7 7 0.65 0.8 1382 0.001850544 11 0.01 7 3\n# 0.65 0.8 1384 0.001850704 12 0.05 3 3 0.80 0.8 1509 0.001850763 13 0.01\n# 7 7 0.80 0.8 1453 0.001850975 14 0.01 7 1 0.80 1.0 1281 0.001851069 15\n# 0.01 7 1 0.80 0.8 1473 0.001851078\n\n\n\n\n12.8.2.3 Variable importance plot\n\n\nCode\n#importance_matrix_W <- tar_read(importance_matrix_W_target)\n\n# variable importance plot\n\n\n\n\n12.8.2.4 Partial dependence plots\n\n\nCode\ncreate_xgb_plots <- function(d = finalModels_W, f = features_train_W, modelToUse = modelToUse) {\n  \n  imp <- xgb.ggplot.importance(d$importanceMatrix[[modelToUse]], top_n = 10, measure = \"Gain\") + \n    ggtitle(paste0(\"Model #\", modelToUse))\n\n  pW_W <- d$xgb[[modelToUse]] %>%\n    pdp::partial(pred.var = \"observedWeight\", n.trees = 1082, grid.resolution = 100, train = f) %>%\n    autoplot(rug = TRUE, train = f) \n  \n  pFlow_W <- d$xgb[[modelToUse]] %>%\n    pdp::partial(pred.var = \"meanFlowByRiver\", n.trees = 1082, grid.resolution = 100, train = f) %>%\n    autoplot(rug = TRUE, train = f)\n  \n  pTemp_W <- d$xgb[[modelToUse]] %>%\n    pdp::partial(pred.var = \"meanTemperature\", n.trees = 1082, grid.resolution = 100, train = f) %>%\n    autoplot(rug = TRUE, train = f)\n  \n  pAge_W <- d$xgb[[modelToUse]] %>%\n    pdp::partial(pred.var = \"age\", n.trees = 1082, grid.resolution = 100, train = f) %>%\n    autoplot(rug = TRUE, train = f)\n  \n  pCohort_W <- d$xgb[[modelToUse]] %>%\n    pdp::partial(pred.var = \"cohort\", n.trees = 1082, grid.resolution = 100, train = f) %>%\n    autoplot(rug = TRUE, train = f)\n\n\n  partials <- gridExtra::grid.arrange(pW_W, pFlow_W, pTemp_W, pAge_W, pCohort_W, nrow = 3, top=textGrob(paste0(\"Model #\", modelToUse)))\n  \n return(list(imp, partials)) \n}\n\ncreate_xgb_plots(finalModels_W, features_train_W, modelToUse = 1)\n\n\n\n\n\n[[1]]\n\n\n\n\n\n\n[[2]]\nTableGrob (4 x 2) \"arrange\": 6 grobs\n  z     cells    name                grob\n1 1 (2-2,1-1) arrange      gtable[layout]\n2 2 (2-2,2-2) arrange      gtable[layout]\n3 3 (3-3,1-1) arrange      gtable[layout]\n4 4 (3-3,2-2) arrange      gtable[layout]\n5 5 (4-4,1-1) arrange      gtable[layout]\n6 6 (1-1,1-2) arrange text[GRID.text.203]\n\n\nCode\ncreate_xgb_plots(finalModels_W, features_train_W, modelToUse = 2)\n\n\n\n\n\n[[1]]\n\n\n\n\n\n\n[[2]]\nTableGrob (4 x 2) \"arrange\": 6 grobs\n  z     cells    name                grob\n1 1 (2-2,1-1) arrange      gtable[layout]\n2 2 (2-2,2-2) arrange      gtable[layout]\n3 3 (3-3,1-1) arrange      gtable[layout]\n4 4 (3-3,2-2) arrange      gtable[layout]\n5 5 (4-4,1-1) arrange      gtable[layout]\n6 6 (1-1,1-2) arrange text[GRID.text.458]\n\n\nCode\ncreate_xgb_plots(finalModels_W, features_train_W, modelToUse = 3)\n\n\n\n\n\n[[1]]\n\n\n\n\n\n\n[[2]]\nTableGrob (4 x 2) \"arrange\": 6 grobs\n  z     cells    name                grob\n1 1 (2-2,1-1) arrange      gtable[layout]\n2 2 (2-2,2-2) arrange      gtable[layout]\n3 3 (3-3,1-1) arrange      gtable[layout]\n4 4 (3-3,2-2) arrange      gtable[layout]\n5 5 (4-4,1-1) arrange      gtable[layout]\n6 6 (1-1,1-2) arrange text[GRID.text.712]\n\n\nCode\ncreate_xgb_plots(finalModels_W, features_train_W, modelToUse = 4)\n\n\n\n\n\n[[1]]\n\n\n\n\n\n\n[[2]]\nTableGrob (4 x 2) \"arrange\": 6 grobs\n  z     cells    name                grob\n1 1 (2-2,1-1) arrange      gtable[layout]\n2 2 (2-2,2-2) arrange      gtable[layout]\n3 3 (3-3,1-1) arrange      gtable[layout]\n4 4 (3-3,2-2) arrange      gtable[layout]\n5 5 (4-4,1-1) arrange      gtable[layout]\n6 6 (1-1,1-2) arrange text[GRID.text.966]\n\n\nCode\ncreate_xgb_plots(finalModels_W, features_train_W, modelToUse = 5)\n\n\n\n\n\n[[1]]\n\n\n\n\n\n\n[[2]]\nTableGrob (4 x 2) \"arrange\": 6 grobs\n  z     cells    name                 grob\n1 1 (2-2,1-1) arrange       gtable[layout]\n2 2 (2-2,2-2) arrange       gtable[layout]\n3 3 (3-3,1-1) arrange       gtable[layout]\n4 4 (3-3,2-2) arrange       gtable[layout]\n5 5 (4-4,1-1) arrange       gtable[layout]\n6 6 (1-1,1-2) arrange text[GRID.text.1220]\n\n\nCode\ncreate_xgb_plots(finalModels_W, features_train_W, modelToUse = 15)\n\n\n\n\n\n[[1]]\n\n\n\n\n\n\n[[2]]\nTableGrob (4 x 2) \"arrange\": 6 grobs\n  z     cells    name                 grob\n1 1 (2-2,1-1) arrange       gtable[layout]\n2 2 (2-2,2-2) arrange       gtable[layout]\n3 3 (3-3,1-1) arrange       gtable[layout]\n4 4 (3-3,2-2) arrange       gtable[layout]\n5 5 (4-4,1-1) arrange       gtable[layout]\n6 6 (1-1,1-2) arrange text[GRID.text.1474]\n\n\n\n\n12.8.2.5 Lime\n\n\nCode\n# get a few observations to perform local interpretation on\nlocal_obs_W <- dML_W[1:3, ]\n\n# one-hot encode the local observations to be assessed.\nlocal_obs_onehot_W <- vtreat::prepare(treatplan_W, local_obs_W, varRestriction = new_vars_W)\n\n# apply LIME\nexplainer_W <- lime(data.frame(features_train_W), finalModels_W$xgb[[modelToUse]], quantile_bins = FALSE)\nexplanation_W <- lime::explain(local_obs_onehot_W, explainer_W, n_features = 5, n_labels = 2)\nplot_features(explanation_W)\n\n\n\n\n\n\n\n12.8.2.6 Predict\n\n\nCode\ncreatePredictions <- function(d = finalModels_W, f = features_test_W, r = response_test_W, modelToUse = modelToUse) {\n  \n  pred_W <- predict(d$xgb[[modelToUse]], f)\n  rmse <- caret::RMSE(pred_W, r)\n  r2 <- caret::R2(pred_W, r)\n  \n  obsPred_W <- bind_cols(obs = r, pred = pred_W, f)\n  \n  return(list(r2 = r2, rmse = rmse, obsPred_W = obsPred_W))\n}\n\n\n\n\nCode\npredsOP_W <- createPredictions(finalModels_W, features_test_W, response_test_W, modelToUse) \n\nggplot(predsOP_W$obsPred_W, aes(obs, pred)) +\n  geom_point(alpha = 0.2) +\n  labs(x = \"Observed growth rate\", y = \"Predicted growth rate\") +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  ggtitle(paste0(\"r2 = \", round(predsOP_W$r2, 2), \" RMSE = \", round(predsOP_W$rmse, 5)))\n\n\n\n\n\nCode\nggplot(predsOP_W$obsPred_W, aes(obs, pred)) +\n  geom_point(alpha = 0.2) +\n  labs(x = \"Observed growth rate\", y = \"Predicted growth rate\") +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  facet_wrap(~cohort)\n\n\n\n\n\n\n\nCode\nrenameLev <- function(d) {\n  d |>  \n    str_split(\"_lev_x_\") |> \n    map(~.x[2]) |> \n    unlist()\n}\n\ncreatePredictionsGrid <- function(d = finalModels_W, pg = gridPred, modelToUse = modelToUse){\n  #, f = features_test_W, r = response_test_W, nSeq = 5, modelToUse = modelToUse) {\n  \n  predGrid <- predict(d$xgb[[modelToUse]], pg)\n  gridPredOut <- bind_cols(pg, pred = predGrid) |> \n    rename_with(\n      renameLev,  \n      contains(\"_lev_x_\")\n    ) |>  \n    rowwise() |> \n    mutate(\n      sumRiver = sum(Isolated_Small + Open_Large + Open_Small + West_Brook),\n      sumSeason = sum(Autumn + Spring + Summer + Winter)\n    ) |>   \n    filter(\n      sumRiver == 1,\n      sumSeason == 1\n    ) |>   \n    mutate(\n      across(c('Isolated_Small':'Winter'), ~.x == 1)\n    )\n\n  return(gridPredOut)\n}\n\n\n\nnSeq <- 5\nxGrid <- expand_grid(\n    observedWeight = 40, #seq(min(f[,\"observedWeight\"]), max(f[,\"observedWeight\"]), length.out = nSeq),\n    cohort = 2010, #seq(min(f[,\"cohort\"]), max(f[,\"cohort\"]), length.out = nSeq),\n    age = 1, #seq(min(f[,\"age\"]), max(f[,\"age\"]), length.out = nSeq),\n    meanTemperature = seq(min(features_test_W[,\"meanTemperature\"]), max(features_test_W[,\"meanTemperature\"]), length.out = nSeq * 3),\n    meanFlowByRiver = seq(min(features_test_W[,\"meanFlowByRiver\"]), max(features_test_W[,\"meanFlowByRiver\"]), length.out = nSeq * 3),\n    riverGG_lev_x_Isolated_Small = c(0, 1),\n    riverGG_lev_x_Open_Large = c(0, 1),\n    riverGG_lev_x_Open_Small = c(0, 1),\n    riverGG_lev_x_West_Brook = c(0, 1),\n    seasonGG_lev_x_Autumn = c(0, 1),\n    seasonGG_lev_x_Spring = c(0, 1),\n    seasonGG_lev_x_Summer = c(0, 1),\n    seasonGG_lev_x_Winter = c(0, 1)\n  ) |> \n  as.matrix()\n\n\npreds_W <- createPredictionsGrid(\n  finalModels_W, \n  xGrid,\n  modelToUse\n) \n\n\nggplot(preds_W |> \n         filter(\n           #Isolated_Small, Open_Large, Open_Small, West_Brook, \n           #Autumn, Spring, Summer, Winter\n           ), \n       aes(meanFlowByRiver, pred, color = meanTemperature, group = meanTemperature)) +\n  geom_point(alpha = 0.2) +\n  labs(x = \"Stream flow\", y = \"Predicted growth rate\") +\n  geom_smooth(se = FALSE) +\n  geom_hline(yintercept = 0) +\n  facet_grid(Isolated_Small+Open_Large+Open_Small+West_Brook ~ Spring+Summer+Autumn+Winter)\n\n\n\n\n\nCode\n# use seasonal zScores for environmetnal data\n\n\n\n\n12.8.2.7 When and where do fish have predicted negative growth?\n\n\nCode\npredNeg <- preds_W |> filter(pred < 0.000)\npredNeg |> \n  count(Isolated_Small, Open_Large, Open_Small, West_Brook, Autumn, Spring, Summer, Winter) |> \n  arrange(desc(n))\n\n\n# A tibble: 12 × 9\n# Rowwise: \n   Isolated_Small Open_Large Open_Sm…¹ West_…² Autumn Spring Summer Winter     n\n   <lgl>          <lgl>      <lgl>     <lgl>   <lgl>  <lgl>  <lgl>  <lgl>  <int>\n 1 FALSE          FALSE      FALSE     TRUE    TRUE   FALSE  FALSE  FALSE     62\n 2 FALSE          TRUE       FALSE     FALSE   TRUE   FALSE  FALSE  FALSE     47\n 3 TRUE           FALSE      FALSE     FALSE   TRUE   FALSE  FALSE  FALSE     42\n 4 FALSE          FALSE      TRUE      FALSE   TRUE   FALSE  FALSE  FALSE     37\n 5 FALSE          FALSE      FALSE     TRUE    FALSE  FALSE  FALSE  TRUE      31\n 6 FALSE          FALSE      FALSE     TRUE    FALSE  FALSE  TRUE   FALSE     23\n 7 FALSE          TRUE       FALSE     FALSE   FALSE  FALSE  FALSE  TRUE      17\n 8 FALSE          TRUE       FALSE     FALSE   FALSE  FALSE  TRUE   FALSE     15\n 9 TRUE           FALSE      FALSE     FALSE   FALSE  FALSE  FALSE  TRUE      10\n10 TRUE           FALSE      FALSE     FALSE   FALSE  FALSE  TRUE   FALSE      9\n11 FALSE          FALSE      TRUE      FALSE   FALSE  FALSE  FALSE  TRUE       6\n12 FALSE          FALSE      TRUE      FALSE   FALSE  FALSE  TRUE   FALSE      6\n# … with abbreviated variable names ¹​Open_Small, ²​West_Brook\n\n\nCode\npredNeg |> \n  count(Autumn, Spring, Summer, Winter) |> \n  arrange(desc(n))\n\n\n# A tibble: 3 × 5\n# Rowwise: \n  Autumn Spring Summer Winter     n\n  <lgl>  <lgl>  <lgl>  <lgl>  <int>\n1 TRUE   FALSE  FALSE  FALSE    188\n2 FALSE  FALSE  FALSE  TRUE      64\n3 FALSE  FALSE  TRUE   FALSE     53\n\n\nCode\npredNeg |> \n  count(Isolated_Small, Open_Large, Open_Small, West_Brook) |> \n  arrange(desc(n))\n\n\n# A tibble: 4 × 5\n# Rowwise: \n  Isolated_Small Open_Large Open_Small West_Brook     n\n  <lgl>          <lgl>      <lgl>      <lgl>      <int>\n1 FALSE          FALSE      FALSE      TRUE         116\n2 FALSE          TRUE       FALSE      FALSE         79\n3 TRUE           FALSE      FALSE      FALSE         61\n4 FALSE          FALSE      TRUE       FALSE         49"
  },
  {
    "objectID": "modelGrowthInMass.html#gam-for-growth",
    "href": "modelGrowthInMass.html#gam-for-growth",
    "title": "12  Growth in mass",
    "section": "12.9 GAM for growth",
    "text": "12.9 GAM for growth\n\n\nCode\n#riverGG, seasonGG, observedWeight, cohort, age, meanTemperature, meanFlowByRiver, negGrowth\n\n\nkValue <- 4 \n\nggplot(dGAM |> filter(speciesGG != \"Atlantic salmon\"), aes(flowByRiverS, grWeight, group = speciesGG, color = speciesGG)) +\n  geom_point(alpha = 0.2) +\n  geom_smooth(method = \"gam\", \n              formula = y ~ s(x, bs = \"cs\", fx = TRUE, k = kValue), \n              se = FALSE) +\n  facet_grid(seasonGG~riverGG)\n\n\n\n\n\nCode\nggplot(dGAM |> filter(speciesGG != \"Atlantic salmon\"), aes(flowByRiverSR, grWeight, group = speciesGG, color = speciesGG)) +\n  geom_point(alpha = 0.1) +\n  geom_hline(yintercept = 0) +\n  geom_smooth(method = \"gam\", \n              formula = y ~ s(x, bs = \"cs\", fx = TRUE, k = kValue), \n              se = FALSE) +\n  scale_color_discrete() +\n  facet_grid(seasonGG~riverGG, scales = \"free\")\n\n\n\n\n\nCode\nggplot(dGAM |> filter(speciesGG != \"Atlantic salmon\"), aes(tempSR, grWeight, group = speciesGG, color = speciesGG)) +\n  geom_point(alpha = 0.1) +\n  geom_hline(yintercept = 0) +\n  geom_smooth(method = \"gam\", \n              formula = y ~ s(x, bs = \"cs\", fx = TRUE, k = kValue), \n              se = FALSE) +\n  scale_color_discrete() +\n  facet_grid(seasonGG~riverGG, scales = \"free\")\n\n\n\n\n\n\n12.9.1 Linear models for growth\nInitial test of model structure for GAMs\n\n\nCode\nrunLinearModels <- function(d, speciesIn) {\n  models =\n    tibble(model = \n      c(\n          'grWeight ~ (riverGG * seasonGG * tempSR * flowByRiverSR * observedWeight + cohortF * ageF)',\n          'grWeight ~ (riverGG * seasonGG * tempSR * flowByRiverSR * observedWeight + cohortF)',\n          'grWeight ~ (riverGG * seasonGG * tempSR * flowByRiverSR + cohortF * ageF)',\n          'grWeight ~ (riverGG * seasonGG * tempSR * flowByRiverSR + cohortF)',\n          'grWeight ~ (riverGG * seasonGG + tempSR * flowByRiverSR + cohortF * ageF)',\n          'grWeight ~ (riverGG * seasonGG + tempSR + flowByRiverSR + cohortF * ageF)'\n       )\n    ) |>\n    mutate(\n      fit = map(model, ~lm(.x, data = d |> filter(speciesGG == speciesIn))),\n      glanced = map(fit, broom::glance),\n      tidied = map(fit, broom::tidy)\n    )\n  return(models)\n}\n\n\n\n12.9.1.1 Brook trout\nMost complex model has lowest AIC\n\n\nCode\nspeciesIn <- \"Brook trout\"\nmodLinearBKT <- runLinearModels(dGAM, speciesIn)\n\nmodLinearBKT |> \n    unnest(glanced) |>\n    arrange(AIC) |>\n    dplyr::select(model, AIC, df.residual, fit, tidied)\n\n\n# A tibble: 6 × 5\n  model                                               AIC df.re…¹ fit   tidied  \n  <chr>                                             <dbl>   <int> <lis> <list>  \n1 grWeight ~ (riverGG * seasonGG * tempSR * flow… -94804.    9893 <lm>  <tibble>\n2 grWeight ~ (riverGG * seasonGG * tempSR * flow… -93869.    9942 <lm>  <tibble>\n3 grWeight ~ (riverGG * seasonGG * tempSR * flow… -92949.    9957 <lm>  <tibble>\n4 grWeight ~ (riverGG * seasonGG + tempSR * flow… -91705.   10002 <lm>  <tibble>\n5 grWeight ~ (riverGG * seasonGG + tempSR + flow… -91644.   10003 <lm>  <tibble>\n6 grWeight ~ (riverGG * seasonGG * tempSR * flow… -90174.   10006 <lm>  <tibble>\n# … with abbreviated variable name ¹​df.residual\n\n\n\n\n12.9.1.2 Brown trout\nMost complex model has lowest AIC\n\n\nCode\nspeciesIn <- \"Brown trout\"\nmodLinearBNT <- runLinearModels(dGAM, speciesIn)\n\nmodLinearBNT |> \n    unnest(glanced) |>\n    arrange(AIC) |>\n    dplyr::select(model, AIC, df.residual, fit, tidied)\n\n\n# A tibble: 6 × 5\n  model                                               AIC df.re…¹ fit   tidied  \n  <chr>                                             <dbl>   <int> <lis> <list>  \n1 grWeight ~ (riverGG * seasonGG * tempSR * flow… -45804.    4491 <lm>  <tibble>\n2 grWeight ~ (riverGG * seasonGG * tempSR * flow… -44981.    4543 <lm>  <tibble>\n3 grWeight ~ (riverGG * seasonGG * tempSR * flow… -44366.    4539 <lm>  <tibble>\n4 grWeight ~ (riverGG * seasonGG + tempSR * flow… -43749.    4572 <lm>  <tibble>\n5 grWeight ~ (riverGG * seasonGG + tempSR + flow… -43743.    4573 <lm>  <tibble>\n6 grWeight ~ (riverGG * seasonGG * tempSR * flow… -42537.    4591 <lm>  <tibble>\n# … with abbreviated variable name ¹​df.residual\n\n\nThese linear models suggest that we need significant complexity in GAM models\n\n\n\n12.9.2 GAM models for growth\nThis modeling approach map() (which I would like to use), throws an error using bam(). Use gamX model approach below.\n\n\nCode\nrunGAMModels <- function(d, speciesIn, kIn) {\n  models =\n    tibble(model = \n      c(\n            'grWeight ~ riverGG * seasonGG * observedWeight + cohortF * ageF +             \n               s(flowByRiverSR, bs = \"cr\", k = kIn, by = riverGG) +\n               s(flowByRiverSR, bs = \"cr\", k = kIn, by = seasonGG) +\n               s(tempSR, bs = \"cr\", k = kIn, by = riverGG) +\n               s(tempSR, bs = \"cr\", k = kIn, by = seasonGG)',\n            \n            'grWeight ~ riverGG * seasonGG * observedWeight * tempSR * flowByRiverSR + cohortF * ageF +             \n               s(flowByRiverSR, bs = \"cr\", k = kIn, by = riverGG) +\n               s(flowByRiverSR, bs = \"cr\", k = kIn, by = seasonGG) +\n               s(tempSR, bs = \"cr\", k = kIn, by = riverGG) +\n               s(tempSR, bs = \"cr\", k = kIn, by = seasonGG)'\n       )\n    ) |>\n    mutate(\n      fit = map(model, ~ bam(.x, method = \"REML\", data = d |> filter(speciesGG == speciesIn, cohort %in% 2000:2013)))\n  #    glanced = map(fit, broom::glance),\n  #    tidied = map(fit, broom::tidy)\n    )\n  return(models)\n}\n\n\n# \n# speciesIn <- \"Brook trout\"\n# modLinearBKT <- runGAMModels(dGAM, speciesIn, kValue)\n# \n# modLinearBKT |> \n#     unnest(glanced) |>\n#     arrange(AIC) |>\n#     dplyr::select(model, AIC, df.residual, fit, tidied)\n\n\n\n12.9.2.1 Brook trout - flow by river\n\n\nCode\nspeciesIn <- \"Brook trout\"\nkIn <- 4\n\ngam0 <- bam(grWeight ~ (riverGG + seasonGG + observedWeight + tempSR + flowSR)^2 + cohortF * ageF +             \n               s(flowSR, bs = \"cr\", k = kIn, by = riverGG) +\n               s(flowSR, bs = \"cr\", k = kIn, by = seasonGG) +\n               s(tempSR, bs = \"cr\", k = kIn, by = riverGG) +\n               s(tempSR, bs = \"cr\", k = kIn, by = seasonGG),\n             data = dGAM |> filter(speciesGG == speciesIn, cohort %in% 2000:2013), method = \"REML\")\n######\n\ngam0ByRiver <- bam(grWeight ~ (riverGG + seasonGG + observedWeight + tempSR + flowByRiverSR)^2 + cohortF * ageF +             \n               s(flowByRiverSR, bs = \"cr\", k = kIn, by = riverGG) +\n               s(flowByRiverSR, bs = \"cr\", k = kIn, by = seasonGG) +\n               s(tempSR, bs = \"cr\", k = kIn, by = riverGG) +\n               s(tempSR, bs = \"cr\", k = kIn, by = seasonGG),\n             data = dGAM |> filter(speciesGG == speciesIn, cohort %in% 2000:2013), method = \"REML\")\n\ngam1ByRiver <- bam(grWeight ~ (riverGG + seasonGG + observedWeight + tempSR + flowByRiverSR)^2 + cohortF +             \n               s(flowByRiverSR, bs = \"cr\", k = kIn, by = riverGG) +\n               s(flowByRiverSR, bs = \"cr\", k = kIn, by = seasonGG) +\n               s(tempSR, bs = \"cr\", k = kIn, by = riverGG) +\n               s(tempSR, bs = \"cr\", k = kIn, by = seasonGG),\n             data = dGAM |> filter(speciesGG == speciesIn, cohort %in% 2000:2013), method = \"REML\")\n\n# age matters, what about taking out length?\ngam2ByRiver <- bam(grWeight ~ (riverGG + seasonGG  + tempSR + flowByRiverSR)^2 + cohortF * ageF +             \n               s(flowByRiverSR, bs = \"cr\", k = kIn, by = riverGG) +\n               s(flowByRiverSR, bs = \"cr\", k = kIn, by = seasonGG) +\n               s(tempSR, bs = \"cr\", k = kIn, by = riverGG) +\n               s(tempSR, bs = \"cr\", k = kIn, by = seasonGG),\n             data = dGAM |> filter(speciesGG == speciesIn, cohort %in% 2000:2013), method = \"REML\")\n\n#nope, need to keep length\n#How about without the interactions?\ngam3ByRiver <- bam(grWeight ~ (riverGG + seasonGG + observedWeight + tempSR + flowByRiverSR) + cohortF * ageF +             \n               s(flowByRiverSR, bs = \"cr\", k = kIn, by = riverGG) +\n               s(flowByRiverSR, bs = \"cr\", k = kIn, by = seasonGG) +\n               s(tempSR, bs = \"cr\", k = kIn, by = riverGG) +\n               s(tempSR, bs = \"cr\", k = kIn, by = seasonGG),\n             data = dGAM |> filter(speciesGG == speciesIn, cohort %in% 2000:2013), method = \"REML\")\n#nope, need the interactions\n\nAIC(gam0ByRiver, gam1ByRiver, gam2ByRiver, gam3ByRiver) |> arrange(AIC)\n\n\n                   df       AIC\ngam0ByRiver 120.02873 -87218.68\ngam1ByRiver  71.79121 -86264.17\ngam2ByRiver 110.84119 -85736.95\ngam3ByRiver 102.51579 -85461.99\n\n\n\n\n12.9.2.2 Brook trout - compare flow and flow by river gams\n\n\nCode\npredictBKTgam <- function(dIn, modInFlowByRiver){\n\n  # predMat0 <- \n  #   expand.grid(\n  #     flowSR = seq(-1.5,1.5,0.25), \n  #     tempSR = seq(-1.5,1.5,0.25), \n  #     riverGG = unique(dIn$riverGG), \n  #     seasonGG= unique(dIn$seasonGG),\n  #     observedWeight = seq(2, max(dIn$observedWeight, na.rm = TRUE)/2, 20),\n  #     cohortF = 2000:2013,#uunique(dIn$cohortF),\n  #     ageF = 0:4,#unique(dIn$ageF),\n  #     byRiver = FALSE\n  # )\n  # predMat <- \n  #   add_column(\n  #     pred = predict.bam(modInFlow, predMat0),\n  #     predMat0\n  #   ) |> \n  #   rename(flow = flowSR, temp = tempSR)\n  \n  predMatByRiver0 <- \n    expand.grid(\n      flowByRiverSR = seq(-1.5,1.5,0.25), \n      tempSR = seq(-1.5,1.5,0.25), \n      riverGG = unique(dIn$riverGG), \n      seasonGG= unique(dIn$seasonGG),\n      observedWeight = seq(2, max(dIn$observedWeight, na.rm = TRUE)/2, 20),\n      cohortF = 2000:2013,#unique(dIn$cohortF),\n      ageF = 0:4,#unique(dIn$ageF),\n      byRiver = TRUE\n    ) \n  predMatByRiver <- \n    add_column(\n      pred = predict.bam(modInFlowByRiver, predMatByRiver0),\n      predMatByRiver0\n    ) |> \n    rename(flow = flowByRiverSR, temp = tempSR)\n\n  return(predMatByRiver)\n}\n\ngamBKTPredictions <- predictBKTgam(dGAM, gam0ByRiver)\n\n\n\n\n12.9.2.3 Graph predictions\n\n\nCode\nunique(gamBKTPredictions$observedWeight)\n\n\n [1]   2  22  42  62  82 102 122 142 162 182\n\n\nCode\nggplot(\n  gamBKTPredictions |> \n    filter(\n      observedWeight %in% c(22), \n      cohortF == 2012, \n      ageF == 0\n    ), \n  aes(temp, pred, color = (flow), group = (flow))) +\n  geom_point(alpha = 0.2) +\n  labs(x = \"Stream temperature\", y = \"Predicted growth rate\") +\n  #geom_smooth(se = FALSE) +\n  geom_hline(yintercept = 0) +\n  facet_grid(seasonGG~riverGG+byRiver, scales = 'free')"
  },
  {
    "objectID": "modelGrowthInMass.html#logistic-models-for-environmental-effects-on-propneg",
    "href": "modelGrowthInMass.html#logistic-models-for-environmental-effects-on-propneg",
    "title": "12  Growth in mass",
    "section": "12.10 Logistic models for environmental effects on propNeg",
    "text": "12.10 Logistic models for environmental effects on propNeg\n\n12.10.1 Standardize flow and temperature\n\n\nCode\n# getZ <- function(d){\n#   list(\n#     mean = mean(d, na.rm = TRUE),\n#     sd = sd(d, na.rm = TRUE)\n#   )\n# }\n# fZ <- getZ(cd1$meanFlowByRiver)\n# fT <- getZ(cd1$meanTemperature)\n\nz <- cd1 |> \n  group_by(season) |> \n  summarize(fZMean = mean(meanFlowByRiver, na.rm = TRUE),\n            fZSd = sd(meanFlowByRiver, na.rm = TRUE),\n            fTMean = mean(meanTemperature, na.rm = TRUE),\n            fTSd = sd(meanTemperature, na.rm = TRUE)\n            )\n\ncd1 <- cd1 |> \n  left_join(z) |> \n  mutate(meanFlowByRiverZ = (meanFlowByRiver - fZMean)/fZSd,\n         meanTempZ = (meanTemperature - fTMean)/fTSd)\n\n\n\n\n12.10.2 Raw data with logistic fit for flow effect\n\n\nCode\nggplot(cd1 |> filter(!is.na(negGrowth)), aes(meanFlowByRiverZ, negGrowth * 1, color = river)) +\n  geom_point(alpha = 0.1) +\n  geom_smooth(method = \"glm\", \n              method.args = list(family = \"binomial\"),\n              se = FALSE) +\n  labs(y = \"Probability of negative growth in mass\", x = \"Mean flow\") +\n  facet_grid(season~species)\n\n\n\n\n\nCode\nggplot(cd1 |> filter(!is.na(negGrowth)), aes(meanFlowByRiverZ, negGrowth * 1, color = river)) +\n  geom_point(alpha = 0.1) +\n  geom_smooth(method = \"glm\", \n              method.args = list(family = \"binomial\"),\n              se = FALSE) +\n  labs(y = \"Probability of negative growth in mass\", x = \"Mean flow\") +\n  facet_grid(season~species+river)\n\n\n\n\n\n\n\n12.10.3 Raw data with logistic fit for temperature effect\n\n\nCode\nggplot(cd1 |> filter(!is.na(negGrowth), meanTempZ > -4), aes(meanTempZ, negGrowth * 1, color = river)) +\n  geom_point(alpha = 0.1) +\n  geom_smooth(method = \"glm\", \n              method.args = list(family = \"binomial\"),\n              se = FALSE) +\n  labs(y = \"Probability of negative growth in mass\", x = \"Mean temperature\") +\n  facet_grid(season~species)"
  },
  {
    "objectID": "modelGrowthInMass.html#logistic-model-for-flow-and-temperature-one-species-at-a-time",
    "href": "modelGrowthInMass.html#logistic-model-for-flow-and-temperature-one-species-at-a-time",
    "title": "12  Growth in mass",
    "section": "12.11 Logistic model for flow and temperature, one species at a time",
    "text": "12.11 Logistic model for flow and temperature, one species at a time\nSpecies occupy different rivers, so an all-species model will have unequal river representation across species and don’t need to predict where species are not.\nNeed to think through whether these models make sense…\n\n\nCode\nrunSppModels <- function(d, speciesIn) {\n  models =\n    tibble(model = \n      c(\n          'negGrowth ~ meanFlowByRiverZ * meanTempZ * river',\n          'negGrowth ~ meanFlowByRiverZ * meanTempZ + river',\n          'negGrowth ~ meanFlowByRiverZ + meanTempZ + river', \n          \n          'negGrowth ~ meanFlowByRiverZ * meanTempZ' , \n          \n          'negGrowth ~ meanFlowByRiverZ * meanTempZ * river * factor(season)',\n          \n          'negGrowth ~ meanFlowByRiverZ + meanTempZ * river * factor(season)', \n          \n          'negGrowth ~ meanFlowByRiverZ * meanTempZ * river * factor(season) * observedWeight' \n        )\n    ) |>\n    mutate(\n      fit = map(model, ~glm(.x, family = \"binomial\", data = d |> filter(species == speciesIn))),\n      glanced = map(fit, broom::glance),\n      tidied = map(fit, broom::tidy)\n    )\n  return(models)\n}\n\n\n\n12.11.1 Predict p(neg growth in mass)\n\n\nCode\npredictSpp <- function(dIn, modIn, speciesIn){\n  d <- dIn |> filter(species == speciesIn)\n  \n  byAIC = modIn |> \n    unnest(glanced) |>\n    arrange(AIC) |>\n    dplyr::select(model, AIC, df.residual, fit, tidied)\n  \n  predDSpp <- expand.grid(\n    meanFlowByRiverZ = seq(-1.5,1.5,0.25), \n    meanTempZ = seq(-1.5,1.5,0.25), \n    river = unique(d$river), \n    season = unique(d$season),\n    observedWeight = seq(min(d$observedWeight, na.rm = TRUE), max(d$observedWeight, na.rm = TRUE), 40)\n    )\n  \n  \n  pred <- add_column(predDSpp, \n                        pred = predict.glm(byAIC[1,]$fit[[1]], predDSpp, type = \"response\")) |> \n             mutate(groupT = paste(river, season, meanTempZ, sep = \"_\"),\n                    groupF = paste(river, season, meanFlowByRiverZ, sep = \"_\"))\n  return(\n    list(\n      pred = pred,\n      byAIC = byAIC\n      )\n  )\n}   \n\n\n\n\n12.11.2 Brook trout\n\n\nCode\nspeciesIn <- \"bkt\"\nmodBKT <- runSppModels(cd1, speciesIn)\npredBKT <- predictSpp(cd1, modBKT, speciesIn)\n\n\nggplot(predBKT$pred |> filter(meanTempZ %in% c(-1.5,0,1.5), meanFlowByRiverZ %in% c(-1.5,0,1.5)), aes(observedWeight, pred, group = groupF)) +\n  geom_line(aes(color = factor(meanFlowByRiverZ))) +\n  labs(y = \"Probability of negative growth in mass\", x = \"Body mass (mg)\") +\n  facet_grid(season~river+meanTempZ)\n\n\n\n\n\n\n\n12.11.3 Brown trout\n\n\nCode\nspeciesIn <- \"bnt\"\n\nmodBNT <- runSppModels(cd1, speciesIn)\npredBNT <- predictSpp(cd1, modBNT, speciesIn)\n\n\nggplot(predBNT$pred |> filter(meanTempZ %in% c(-1.5,0,1.5), meanFlowByRiverZ %in% c(-1.5,0,1.5)), aes(observedWeight, pred, group = groupF)) +\n  geom_line(aes(color = factor(meanFlowByRiverZ))) +\n  labs(y = \"Probability of negative growth in mass\", x = \"Body mass (mg)\") +\n  facet_grid(season~river+meanTempZ)\n\n\n\n\n\n\n\n12.11.4 Atlantic salmon\n\n\nCode\nspeciesIn <- \"ats\"\n\nmodATS <- runSppModels(cd1, speciesIn)\npredATS <- predictSpp(cd1, modATS, speciesIn)\n\n\nggplot(predATS$pred |> filter(meanTempZ %in% c(-1.5,0,1.5), meanFlowByRiverZ %in% c(-1.5,0,1.5)), aes(observedWeight, pred, group = groupF)) +\n  geom_line(aes(color = factor(meanFlowByRiverZ))) +\n  labs(y = \"Probability of negative growth in mass\", x = \"Body mass (mg)\") +\n  facet_grid(season~river+meanTempZ)"
  },
  {
    "objectID": "modelGrowthInMass.html#two-growth-models",
    "href": "modelGrowthInMass.html#two-growth-models",
    "title": "12  Growth in mass",
    "section": "12.12 Two growth models",
    "text": "12.12 Two growth models\n\n12.12.1 Size-adjusted growth model\n\n12.12.1.1 Get l-w relationships for size-adjusted growth model\nHere, we will explore size-independent growth in mass, see Sigourney, D. B., B H Letcher, M. Obedzinski, and R. A. Cunjak. “Size-Independent Growth in Fishes: Patterns, Models and Metrics.” Journal of Fish Biology 72, no. 10 (2008): 2435–55. https://doi.org/10.1111/j.1095-8649.2008.01830.x. Size-independent growth (grWeightS) is calculated in getDataElectro_targets.R file using addSizeIndGrowthWeight().\ngrWeightS uses the slope of log(observedWeight) ~ log(grWeight) for each river and season and species to adjust growth.\nA simple linear models shows we need to get separate slopes for each river and season and species.\n\n\nCode\nggplot(cd1 |> filter(grWeight > 0), \n       aes(log(observedWeight), log(grWeight), color = riverGG)) +\n  geom_point(alpha = 0.05)  +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  labs(y = \"Log of mass (mg)\", x = \"Log of growth in mass\") +\n  scale_color_discrete() +\n  facet_grid(seasonGG~speciesGG)\n\n\n\n\n\nCode\nmod0 <- lm(log(grWeight) ~ log(observedWeight), data = cd1 |> filter(grWeight > 0))\nmod1 <- lm(log(grWeight) ~ log(observedWeight) * river, data = cd1 |> filter(grWeight > 0))\nmod2 <- lm(log(grWeight) ~ log(observedWeight) * river * factor(season), data = cd1 |> filter(grWeight > 0))\nmod3 <- lm(log(grWeight) ~ log(observedWeight) * factor(season), data = cd1 |> filter(grWeight > 0))\nmod4 <- lm(log(grWeight) ~ log(observedWeight) * river * factor(season) * species, data = cd1 |> filter(grWeight > 0))\n\nAIC(mod0,mod1,mod2,mod3,mod4) |> arrange(AIC)\n\n\n     df      AIC\nmod4 73 43925.12\nmod2 33 47539.49\nmod3  9 48036.13\nmod1  9 64659.88\nmod0  3 64744.59\n\n\n\n\n\n12.12.2 Compare size-adjusted and instantaneous growth\nDifferences don’t seem big enough to warrant the extra complexity from the s-adjusted growth metric\n\n\nCode\nggplot(cd1, aes(grWeight, grWeightS, color = riverGG)) +\n  geom_point(alpha = 0.05)  +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  geom_abline(intercept = 0, slope = 1) +\n  labs(y = \"Gowth in mass\", x = \"Size-adjusted growth in mass\") +\n  scale_color_discrete() +\n  facet_grid(seasonGG~speciesGG)\n\n\n\n\n\nCode\nggplot(cd1 |> \n         dplyr::select(observedWeight, grWeight, grWeightS, seasonGG, speciesGG) |> \n         pivot_longer(cols = c(grWeight, grWeightS)),\n       \n       aes(log(observedWeight), value, color = name)) +\n  geom_point(alpha = 0.05 )  +\n  geom_smooth(method = \"lm\", se = FALSE) +\n  labs(y = \"Log of mass (mg)\", x = \"Growth in mass\") +\n  scale_color_discrete() +\n  facet_grid(seasonGG~speciesGG)"
  },
  {
    "objectID": "modelGrowthInMass.html#compare-growth-in-length-and-mass",
    "href": "modelGrowthInMass.html#compare-growth-in-length-and-mass",
    "title": "12  Growth in mass",
    "section": "12.13 Compare growth in length and mass",
    "text": "12.13 Compare growth in length and mass\n\n12.13.1 Growth rate in length vs size-independent growth rate in mass\n\n\nCode\nggplot(cd1, aes(grLength, grWeightS)) +\n  geom_point(aes(size = observedWeight), alpha = 0.02) +\n  guides(size = guide_legend(override.aes = list(alpha = 1))) +\n  labs(x = \"Growth in length\", y = \"Size-adjusted growth in mass\") +\n  scale_color_discrete() +\n  facet_grid(seasonGG~speciesGG)"
  },
  {
    "objectID": "modelGrowthInMass.html#deprecated-logistic-models-below",
    "href": "modelGrowthInMass.html#deprecated-logistic-models-below",
    "title": "12  Growth in mass",
    "section": "12.14 Deprecated logistic models below",
    "text": "12.14 Deprecated logistic models below\n\n12.14.1 Logistic model for flow and temperature, all species\n\n\n12.14.2 Model selection\n\n\nCode\nmodSpecies <- c(\"bkt\", \"ats\", \"bnt\")\ncd1Mod <- cd1 |> filter(species == modSpecies)\n\nmodFT0 <- glm(negGrowth ~ meanFlowByRiverZ * meanTempZ * river * species, family = \"binomial\", data = cd1Mod)\nmodFT1 <- glm(negGrowth ~ meanFlowByRiverZ * meanTempZ * river + species, family = \"binomial\", data = cd1Mod)\nmodFT2 <- glm(negGrowth ~ meanFlowByRiverZ * meanTempZ + river + species, family = \"binomial\", data = cd1Mod)\nmodFT3 <- glm(negGrowth ~ meanFlowByRiverZ + meanTempZ + river + species, family = \"binomial\", data = cd1Mod)\nmodFT4 <- glm(negGrowth ~ meanFlowByRiverZ * meanTempZ + river , family = \"binomial\", data = cd1Mod)\nmodFT5 <- glm(negGrowth ~ meanFlowByRiverZ * meanTempZ + river , family = \"binomial\", data = cd1Mod)\nmodFT6 <- glm(negGrowth ~ meanFlowByRiverZ * meanTempZ + species , family = \"binomial\", data = cd1Mod)\nmodFT7 <- glm(negGrowth ~ meanFlowByRiverZ * meanTempZ, family = \"binomial\", data = cd1Mod)\n\n\nmodFT8 <- glm(negGrowth ~ meanFlowByRiverZ * meanTempZ * river * factor(season) + species, family = \"binomial\", data = cd1Mod)\nmodFT9 <- glm(negGrowth ~ meanFlowByRiverZ * meanTempZ * river * factor(season) * species, family = \"binomial\", data = cd1Mod)\nmodFT10 <- glm(negGrowth ~ meanFlowByRiverZ + meanTempZ * river * factor(season) * species, family = \"binomial\", data = cd1Mod)\n\nmodFT11 <- glm(negGrowth ~ meanFlowByRiverZ * meanTempZ * river * factor(season) * observedWeight + species, family = \"binomial\", data = cd1Mod)\nmodFT12 <- glm(negGrowth ~ meanFlowByRiverZ * meanTempZ * river * factor(season) * species * observedWeight, family = \"binomial\", data = cd1Mod)\n\nAIC(modFT0, modFT1,modFT2, modFT3,modFT4,modFT5, modFT6,modFT7,modFT8,modFT9,modFT10, modFT11, modFT12) |> arrange(AIC)\n\n\n         df        AIC\nmodFT8   66   5227.562\nmodFT1   18   6284.942\nmodFT0   36   6301.485\nmodFT2    9   6335.388\nmodFT3    8   6357.873\nmodFT6    6   6430.260\nmodFT4    7   6563.756\nmodFT5    7   6563.756\nmodFT7    4   6741.248\nmodFT12 261  89838.173\nmodFT11 130  92820.102\nmodFT9  137 109414.182\nmodFT10  71 124492.604\n\n\n\n\n12.14.3 Model results for additive model (not very good)\n\n\nCode\n# https://www.statology.org/logistic-regression-in-r/\n#summary(modFT3)\n#anova(modFT3)\n\npscl::pR2(modFT3)[\"McFadden\"]\n\n\nfitting null model for pseudo-r2\n\n\n  McFadden \n0.06726277 \n\n\nCode\ncaret::varImp(modFT3) |> arrange(desc(Overall))\n\n\n                    Overall\nspeciesbnt       12.6585340\nmeanFlowByRiverZ 12.2576677\nriverwest brook   4.5864102\nspeciesbkt        4.2572209\nriverwb mitchell  4.1438695\nriverwb obear     3.3497197\nmeanTempZ         0.2562374\n\n\n\n\n12.14.4 Model results for full interactive model (best model)\n\n\nCode\n# https://www.statology.org/logistic-regression-in-r/\n#summary(modFT11)\n#anova(modFT11)\n\n# full interaction\npscl::pR2(modFT11)[\"McFadden\"]\n\n\nfitting null model for pseudo-r2\n\n\n McFadden \n-12.61337 \n\n\nCode\ncaret::varImp(modFT11) |> arrange(desc(Overall))\n\n\n                                                                              Overall\nspeciesbnt                                                                 1062734471\nspeciesbkt                                                                  290104887\nobservedWeight                                                              121701702\nfactor(season)3:observedWeight                                              121673397\nmeanFlowByRiverZ:observedWeight                                             120721958\nriverwest brook:observedWeight                                              120597554\nriverwest brook:factor(season)3:observedWeight                              118826359\nmeanFlowByRiverZ:riverwest brook:observedWeight                             118561009\nmeanFlowByRiverZ:factor(season)3:observedWeight                             117793666\nfactor(season)2:observedWeight                                              115204393\nmeanFlowByRiverZ:riverwest brook:factor(season)3:observedWeight             114770462\nriverwest brook:factor(season)2:observedWeight                              112763409\nmeanFlowByRiverZ:factor(season)2:observedWeight                             108818541\nmeanFlowByRiverZ:riverwest brook:factor(season)2:observedWeight             107236636\nfactor(season)4:observedWeight                                               90833626\nriverwest brook:factor(season)4:observedWeight                               85813387\nmeanFlowByRiverZ:riverwb mitchell:factor(season)2:observedWeight             76804632\nmeanFlowByRiverZ:factor(season)4:observedWeight                              75011164\nriverwb mitchell:factor(season)2:observedWeight                              74927810\nmeanFlowByRiverZ:riverwest brook:factor(season)4:observedWeight              72359155\nmeanFlowByRiverZ:riverwb mitchell:observedWeight                             70463657\nriverwb mitchell:observedWeight                                              68589652\nmeanFlowByRiverZ:riverwb mitchell:factor(season)3:observedWeight             67014267\nriverwb mitchell:factor(season)3:observedWeight                              65230894\nmeanTempZ:factor(season)4:observedWeight                                     64191266\nmeanTempZ:riverwest brook:factor(season)4:observedWeight                     63102612\nmeanTempZ:observedWeight                                                     57451124\nmeanTempZ:factor(season)3:observedWeight                                     56538767\nmeanTempZ:riverwest brook:observedWeight                                     56008860\nmeanTempZ:riverwest brook:factor(season)2:observedWeight                     55882978\nmeanTempZ:factor(season)2:observedWeight                                     55520059\nmeanFlowByRiverZ:riverwb obear:factor(season)2:observedWeight                53016866\nmeanFlowByRiverZ:riverwb obear:factor(season)2                               52925342\nmeanFlowByRiverZ:meanTempZ:riverwest brook:factor(season)4:observedWeight    52612283\nriverwest brook                                                              52589753\nmeanTempZ:riverwest brook:factor(season)3:observedWeight                     52557912\nmeanTempZ:riverwb obear:factor(season)2                                      52109976\nmeanFlowByRiverZ:meanTempZ:riverwb obear:factor(season)2                     51237151\nmeanFlowByRiverZ:meanTempZ:factor(season)4:observedWeight                    50758977\nriverwb mitchell:factor(season)4:observedWeight                              49899714\nriverwest brook:factor(season)2                                              49566663\nriverwb obear:factor(season)2:observedWeight                                 48575461\nriverwb obear:factor(season)2                                                48547149\nmeanFlowByRiverZ:meanTempZ:riverwb obear:factor(season)4:observedWeight      48147137\nmeanFlowByRiverZ                                                             46721852\nmeanFlowByRiverZ:riverwb mitchell:factor(season)4:observedWeight             44917079\nmeanTempZ:riverwb obear:factor(season)4:observedWeight                       43958036\nmeanFlowByRiverZ:meanTempZ:observedWeight                                    43939613\nmeanFlowByRiverZ:riverwb obear:factor(season)4:observedWeight                43696764\nriverwest brook:factor(season)3                                              43603188\nriverwb obear:factor(season)4:observedWeight                                 43355643\nmeanFlowByRiverZ:riverwb obear:factor(season)3:observedWeight                43246382\nriverwb obear:factor(season)4                                                42643452\nmeanFlowByRiverZ:riverwb obear:factor(season)4                               42587980\nmeanFlowByRiverZ:meanTempZ:factor(season)3:observedWeight                    42415908\nmeanFlowByRiverZ:riverwest brook                                             42412010\nmeanFlowByRiverZ:meanTempZ:riverwest brook:observedWeight                    42361609\nmeanFlowByRiverZ:meanTempZ:riverwest brook:factor(season)3:observedWeight    41383847\nmeanFlowByRiverZ:factor(season)3                                             40738421\nfactor(season)2                                                              39977026\nriverwb mitchell                                                             39349493\nmeanFlowByRiverZ:meanTempZ:factor(season)2:observedWeight                    38941617\nmeanFlowByRiverZ:riverwb mitchell                                            38887554\nmeanFlowByRiverZ:factor(season)2                                             38764715\nfactor(season)3                                                              38160491\nmeanFlowByRiverZ:meanTempZ:riverwest brook:factor(season)2:observedWeight    35053623\nriverwb obear:factor(season)3:observedWeight                                 34398379\nmeanFlowByRiverZ:riverwest brook:factor(season)3                             33762024\nriverwb mitchell:factor(season)2                                             33233009\nmeanFlowByRiverZ:riverwb obear                                               33030373\nmeanFlowByRiverZ:riverwb mitchell:factor(season)3                            32472421\nmeanFlowByRiverZ:riverwb mitchell:factor(season)2                            32037957\nmeanFlowByRiverZ:riverwest brook:factor(season)2                             31927161\nmeanFlowByRiverZ:meanTempZ:riverwb mitchell:factor(season)2                  31388754\nriverwb obear                                                                31051009\nriverwb mitchell:factor(season)3                                             30450183\nmeanFlowByRiverZ:meanTempZ:riverwb mitchell:factor(season)3:observedWeight   30259197\nmeanTempZ:riverwb mitchell:factor(season)3:observedWeight                    28909235\nmeanFlowByRiverZ:meanTempZ                                                   27344404\nmeanFlowByRiverZ:riverwb obear:observedWeight                                25646211\nmeanTempZ:riverwb mitchell:factor(season)2                                   24328335\nriverwb obear:observedWeight                                                 24230440\nmeanFlowByRiverZ:meanTempZ:riverwb obear                                     24227846\nmeanTempZ:riverwb obear                                                      23869234\nmeanTempZ:riverwb mitchell:observedWeight                                    23058226\nmeanFlowByRiverZ:meanTempZ:riverwest brook                                   22575032\nmeanTempZ:riverwb obear:factor(season)3                                      21976316\nmeanFlowByRiverZ:meanTempZ:riverwb mitchell:observedWeight                   21623981\nriverwb obear:factor(season)3                                                21083300\nmeanTempZ:riverwb obear:factor(season)4                                      20944519\nmeanFlowByRiverZ:meanTempZ:factor(season)3                                   20925915\nmeanFlowByRiverZ:meanTempZ:riverwb obear:factor(season)3                     20867856\nmeanFlowByRiverZ:meanTempZ:riverwb obear:factor(season)3:observedWeight      20798072\nmeanFlowByRiverZ:meanTempZ:riverwb mitchell:factor(season)3                  20444579\nmeanTempZ:riverwb obear:factor(season)3:observedWeight                       20043925\nmeanFlowByRiverZ:meanTempZ:riverwb obear:factor(season)4                     19365372\nmeanTempZ:riverwest brook                                                    18123546\nmeanFlowByRiverZ:meanTempZ:factor(season)4                                   17644528\nriverwb mitchell:factor(season)4                                             17630252\nmeanTempZ:riverwb mitchell:factor(season)3                                   16872837\nmeanTempZ:riverwest brook:factor(season)2                                    16386347\nmeanTempZ:factor(season)2                                                    14982348\nmeanTempZ                                                                    14505567\nmeanFlowByRiverZ:meanTempZ:riverwest brook:factor(season)3                   14445313\nmeanTempZ:riverwb obear:observedWeight                                       14411990\nmeanTempZ:riverwest brook:factor(season)4                                    13997947\nmeanTempZ:riverwest brook:factor(season)3                                    13854898\nmeanFlowByRiverZ:riverwb obear:factor(season)3                               13571774\nmeanFlowByRiverZ:meanTempZ:riverwb obear:observedWeight                      13463642\nmeanFlowByRiverZ:meanTempZ:riverwest brook:factor(season)4                   13394093\nmeanTempZ:riverwb obear:factor(season)2:observedWeight                       12905565\nmeanFlowByRiverZ:riverwb mitchell:factor(season)4                            11918849\nmeanTempZ:factor(season)3                                                    11645332\nmeanTempZ:riverwb mitchell:factor(season)4:observedWeight                    11246380\nmeanTempZ:riverwb mitchell:factor(season)2:observedWeight                    10956644\nmeanTempZ:factor(season)4                                                    10649726\nmeanFlowByRiverZ:riverwest brook:factor(season)4                             10391015\nmeanFlowByRiverZ:meanTempZ:factor(season)2                                   10079875\nmeanFlowByRiverZ:meanTempZ:riverwb obear:factor(season)2:observedWeight       9777355\nmeanFlowByRiverZ:meanTempZ:riverwest brook:factor(season)2                    8683792\nriverwest brook:factor(season)4                                               8221508\nfactor(season)4                                                               7427579\nmeanTempZ:riverwb mitchell:factor(season)4                                    6658029\nmeanFlowByRiverZ:meanTempZ:riverwb mitchell:factor(season)4:observedWeight    5922389\nmeanFlowByRiverZ:meanTempZ:riverwb mitchell:factor(season)2:observedWeight    5755620\nmeanFlowByRiverZ:factor(season)4                                              4743223\nmeanTempZ:riverwb mitchell                                                    4676882\nmeanFlowByRiverZ:meanTempZ:riverwb mitchell:factor(season)4                   3073254\nmeanFlowByRiverZ:meanTempZ:riverwb mitchell                                    492597\n\n\n\n\n12.14.5 Precict p(neg growth in mass)\n\n\nCode\npredD <- expand.grid(\n  meanFlowByRiverZ = seq(-1.5,1.5,0.25), \n  meanTempZ = seq(-1.5,1.5,0.25), \n  river = unique(cd1$river), \n  species = unique(cd1$species), \n  season = unique(cd1$season),\n  observedWeight = seq(min(cd1$observedWeight, na.rm = TRUE), max(cd1$observedWeight, na.rm = TRUE), 40)\n  )\n\n\npred <- add_column(predD, \n                   pred = predict.glm(modFT11, predD, type = \"response\")) |> \n        mutate(groupT = paste(river, species, season, meanTempZ, sep = \"_\"),\n               groupF = paste(river, species, season, meanFlowByRiverZ, sep = \"_\"))\n\n\n\n\n12.14.6 Plot predictions\n\n\nCode\nggplot(pred |> filter(meanTempZ %in% c(-1.5,0,1.5), observedWeight == 161.3), aes(meanFlowByRiverZ, pred, group= groupT)) +\n  geom_line(aes(color = factor(meanTempZ))) +\n  labs(y = \"Probability of negative growth in mass\", x = \"Mean flow\") +\n  facet_grid(season~species+river)"
  },
  {
    "objectID": "modelGrowthFlowByRiver.html#raw-flow-data",
    "href": "modelGrowthFlowByRiver.html#raw-flow-data",
    "title": "13  Growth in mass by river/area",
    "section": "13.1 Raw flow data",
    "text": "13.1 Raw flow data\n\n13.1.1 Flow data types plotted against each other\n\n\nCode\nggplot(cd1, aes(meanFlow, meanFlowByRiver)) +\n  geom_point() +\n  geom_abline(slope = 1, intercept = 0) +\n  facet_grid(river~season, scales = 'free')\n\n\n\n\n\nStream flow (m3/s) for the West Brook against stream flow by river\n\n\n\n\n\n\nCode\nggplot(cd1, aes(meanFlow, meanFlowByArea)) +\n  geom_point() +\n  geom_abline(slope = 1, intercept = 0) +\n  facet_grid(river~season, scales = 'free')\n\n\n\n\n\nStream flow (m3/s) against stream flow by area\n\n\n\n\n\n\nCode\nggplot(cd1, aes(meanFlowByRiver, meanFlowByArea)) +\n  geom_point() +\n  geom_abline(slope = 1, intercept = 0) +\n  facet_grid(river~season, scales = 'free')\n\n\n\n\n\nStream flow by river (m3/s) against stream flow by area\n\n\n\n\n\n\n13.1.2 Frequency plots of flow data types\n\n\nCode\nggplot(cd1, aes(meanFlow)) +\n  #geom_density(color = viridis(10)[1], adjust = 2.5) +\n  geom_density(color = \"red3\", adjust = 2.5) +\n  geom_density(aes(meanFlowByRiver), color = \"blue3\", adjust = 2.5) +\n  geom_density(aes(meanFlowByArea), color = \"green4\", adjust = 2.5) +\n  labs(x = \"Flow type (red = flow, blue = flowByRiver, green = flowByArea)\") +\n  facet_grid(river~season, scales = 'free')\n\n\n\n\n\nStream flow distributions"
  },
  {
    "objectID": "modelGrowthFlowByRiver.html#scaled-raw-flow-data",
    "href": "modelGrowthFlowByRiver.html#scaled-raw-flow-data",
    "title": "13  Growth in mass by river/area",
    "section": "13.2 Scaled raw flow data",
    "text": "13.2 Scaled raw flow data\n\n13.2.1 Scaled by season\n\n\nCode\nggplot(cd1, aes(meanFlowByAreaScaledBySeason, meanFlowByRiverScaledBySeason, color = cohort)) +\n  geom_point() +\n  geom_abline(slope = 1, intercept = 0) +\n  facet_grid(river~season, scales = 'free')\n\n\n\n\n\nCode\nggplot(cd1, aes(meanFlowScaledBySeason)) +\n  geom_density(color = \"red3\", adjust = 2.5) +\n  geom_density(aes(meanFlowByRiverScaledBySeason), color = \"blue3\", adjust = 2.5) +\n  geom_density(aes(meanFlowByAreaScaledBySeason), color = \"green4\", adjust = 2.5) +\n  labs(x = \"Flow type (red = flow, blue = flowByRiver, green = flowByArea)\") +\n  facet_grid(river~season, scales = 'free')\n\n\n\n\n\nCode\nggplot(cd1, aes(meanTemperatureScaledBySeason)) +\n  geom_density(color = \"red3\", adjust = 2.5) +\n  #geom_density(aes(meanTemperatureByRiverScaledBySeason), color = \"blue3\", adjust = 2.5) +\n  facet_grid(river~season, scales = 'free')\n\n\n\n\n\n\n\n13.2.2 Scaled by season and river\n\n\nCode\nggplot(cd1, aes(meanFlowScaledBySeasonRiver, meanFlowByRiverScaledBySeasonRiver, color = cohort)) +\n  geom_point() +\n  geom_abline(slope = 1, intercept = 0) +\n  facet_grid(river~season, scales = 'free')\n\n\n\n\n\nCode\nggplot(cd1, aes(meanFlowScaledBySeasonRiver)) +\n  geom_density(color = \"red3\", adjust = 2.5, linewidth = 2) +\n  geom_density(aes(meanFlowByRiverScaledBySeasonRiver), color = \"blue3\", adjust = 2.5, linewidth = 1) +\n  geom_density(aes(meanFlowByAreaScaledBySeasonRiver), color = \"green4\", adjust = 2.5, linewidth = 0.75) +\n  labs(x = \"Flow type (red = flow, blue = flowByRiver, green = flowByArea)\") +\n  facet_grid(river~season)#, scales = 'free')\n\n\n\n\n\nNOTE: Ben got to here before AZ\nCheck cumulative flow\nStream power as flow metric??\n\n\n13.2.3 Flow standardized by season\n\n13.2.3.1 Brook trout - flow\n\n\nCode\ngamS0 <- bam(grWeight ~ (riverGG + seasonGG + observedWeight + tempS + flowS)^2 + cohortF * ageF +             \n               s(flowS, bs = \"cr\", k = kIn, by = riverGG) +\n               s(flowS, bs = \"cr\", k = kIn, by = seasonGG) +\n               s(tempS, bs = \"cr\", k = kIn, by = riverGG) +\n               s(tempS, bs = \"cr\", k = kIn, by = seasonGG),\n             data = dGAM |> filter(speciesGG == speciesIn, cohort %in% 2000:2013), method = \"REML\")\n\ngamS1 <- bam(grWeight ~ (riverGG + seasonGG + observedWeight + tempS + flowS)^2 + cohortF +             \n               s(flowS, bs = \"cr\", k = kIn, by = riverGG) +\n               s(flowS, bs = \"cr\", k = kIn, by = seasonGG) +\n               s(tempS, bs = \"cr\", k = kIn, by = riverGG) +\n               s(tempS, bs = \"cr\", k = kIn, by = seasonGG),\n             data = dGAM |> filter(speciesGG == speciesIn, cohort %in% 2000:2013), method = \"REML\")\n\n# age matters, what about taking out length?\ngamS2 <- bam(grWeight ~ (riverGG + seasonGG  + tempS + flowS)^2 + cohortF * ageF +             \n               s(flowS, bs = \"cr\", k = kIn, by = riverGG) +\n               s(flowS, bs = \"cr\", k = kIn, by = seasonGG) +\n               s(tempS, bs = \"cr\", k = kIn, by = riverGG) +\n               s(tempS, bs = \"cr\", k = kIn, by = seasonGG),\n             data = dGAM |> filter(speciesGG == speciesIn, cohort %in% 2000:2013), method = \"REML\")\n\n#nope, need to keep length\n#How about without the interactions?\ngamS3 <- bam(grWeight ~ (riverGG + seasonGG + observedWeight + tempS + flowS) + cohortF * ageF +             \n               s(flowS, bs = \"cr\", k = kIn, by = riverGG) +\n               s(flowS, bs = \"cr\", k = kIn, by = seasonGG) +\n               s(tempS, bs = \"cr\", k = kIn, by = riverGG) +\n               s(tempS, bs = \"cr\", k = kIn, by = seasonGG),\n             data = dGAM |> filter(speciesGG == speciesIn, cohort %in% 2000:2013), method = \"REML\")\n#nope, need the interactions\n\nAIC(gamS0, gamS1, gamS2, gamS3) |> arrange(AIC)\n\n\n             df       AIC\ngamS0 120.25157 -87397.15\ngamS1  71.97796 -86504.12\ngamS2 110.30837 -85848.19\ngamS3  97.07810 -85624.22\n\n\n\n\n13.2.3.2 Brook trout - flow by river\n\n\nCode\ngamS0ByRiver <- bam(grWeight ~ (riverGG + seasonGG + observedWeight + tempS + flowByRiverS)^2 + cohortF * ageF +             \n               s(flowByRiverS, bs = \"cr\", k = kIn, by = riverGG) +\n               s(flowByRiverS, bs = \"cr\", k = kIn, by = seasonGG) +\n               s(tempS, bs = \"cr\", k = kIn, by = riverGG) +\n               s(tempS, bs = \"cr\", k = kIn, by = seasonGG),\n             data = dGAM |> filter(speciesGG == speciesIn, cohort %in% 2000:2013), method = \"REML\")\n\ngamS1ByRiver <- bam(grWeight ~ (riverGG + seasonGG + observedWeight + tempS + flowByRiverS)^2 + cohortF +             \n               s(flowByRiverS, bs = \"cr\", k = kIn, by = riverGG) +\n               s(flowByRiverS, bs = \"cr\", k = kIn, by = seasonGG) +\n               s(tempS, bs = \"cr\", k = kIn, by = riverGG) +\n               s(tempS, bs = \"cr\", k = kIn, by = seasonGG),\n             data = dGAM |> filter(speciesGG == speciesIn, cohort %in% 2000:2013), method = \"REML\")\n\n# age matters, what about taking out length?\ngamS2ByRiver <- bam(grWeight ~ (riverGG + seasonGG  + tempS + flowByRiverS)^2 + cohortF * ageF +             \n               s(flowByRiverS, bs = \"cr\", k = kIn, by = riverGG) +\n               s(flowByRiverS, bs = \"cr\", k = kIn, by = seasonGG) +\n               s(tempS, bs = \"cr\", k = kIn, by = riverGG) +\n               s(tempS, bs = \"cr\", k = kIn, by = seasonGG),\n             data = dGAM |> filter(speciesGG == speciesIn, cohort %in% 2000:2013), method = \"REML\")\n\n#nope, need to keep length\n#How about without the interactions?\ngamS3ByRiver <- bam(grWeight ~ (riverGG + seasonGG + observedWeight + tempS + flowByRiverS) + cohortF * ageF +             \n               s(flowByRiverS, bs = \"cr\", k = kIn, by = riverGG) +\n               s(flowByRiverS, bs = \"cr\", k = kIn, by = seasonGG) +\n               s(tempS, bs = \"cr\", k = kIn, by = riverGG) +\n               s(tempS, bs = \"cr\", k = kIn, by = seasonGG),\n             data = dGAM |> filter(speciesGG == speciesIn, cohort %in% 2000:2013), method = \"REML\")\n#nope, need the interactions\n\nAIC(gamS0ByRiver, gamS1ByRiver, gamS2ByRiver, gamS3ByRiver) |> arrange(AIC)\n\n\n                    df       AIC\ngamS0ByRiver 116.10016 -87144.28\ngamS1ByRiver  69.02175 -86322.27\ngamS2ByRiver 106.16156 -85679.11\ngamS3ByRiver  97.54369 -85564.21\n\n\n\n\n\n13.2.4 Flow std by season/river\n\n13.2.4.1 Brook trout - flow\n\n\nCode\nkIn = 4\nspeciesIn <- \"Brook trout\"\n\ngam0 <- bam(grWeight ~ (riverGG + seasonGG + observedWeight + tempSR + flowSR)^2 + cohortF * ageF +             \n               s(flowSR, bs = \"cr\", k = kIn, by = riverGG) +\n               s(flowSR, bs = \"cr\", k = kIn, by = seasonGG) +\n               s(tempSR, bs = \"cr\", k = kIn, by = riverGG) +\n               s(tempSR, bs = \"cr\", k = kIn, by = seasonGG),\n             data = dGAM |> filter(speciesGG == speciesIn, cohort %in% 2000:2013), method = \"REML\")\n\ngam1 <- bam(grWeight ~ (riverGG + seasonGG + observedWeight + tempSR + flowSR)^2 + cohortF +             \n               s(flowSR, bs = \"cr\", k = kIn, by = riverGG) +\n               s(flowSR, bs = \"cr\", k = kIn, by = seasonGG) +\n               s(tempSR, bs = \"cr\", k = kIn, by = riverGG) +\n               s(tempSR, bs = \"cr\", k = kIn, by = seasonGG),\n             data = dGAM |> filter(speciesGG == speciesIn, cohort %in% 2000:2013), method = \"REML\")\n\n# age matters, what about taking out length?\ngam2 <- bam(grWeight ~ (riverGG + seasonGG  + tempSR + flowSR)^2 + cohortF * ageF +             \n               s(flowSR, bs = \"cr\", k = kIn, by = riverGG) +\n               s(flowSR, bs = \"cr\", k = kIn, by = seasonGG) +\n               s(tempSR, bs = \"cr\", k = kIn, by = riverGG) +\n               s(tempSR, bs = \"cr\", k = kIn, by = seasonGG),\n             data = dGAM |> filter(speciesGG == speciesIn, cohort %in% 2000:2013), method = \"REML\")\n\n#nope, need to keep length\n#How about without the interactions?\ngam3 <- bam(grWeight ~ (riverGG + seasonGG + observedWeight + tempSR + flowSR) + cohortF * ageF +             \n               s(flowSR, bs = \"cr\", k = kIn, by = riverGG) +\n               s(flowSR, bs = \"cr\", k = kIn, by = seasonGG) +\n               s(tempSR, bs = \"cr\", k = kIn, by = riverGG) +\n               s(tempSR, bs = \"cr\", k = kIn, by = seasonGG),\n             data = dGAM |> filter(speciesGG == speciesIn, cohort %in% 2000:2013), method = \"REML\")\n#nope, need the interactions\n\nAIC(gam0, gam1, gam2, gam3) |> arrange(AIC)\n\n\n            df       AIC\ngam0 118.69693 -87324.21\ngam1  68.72459 -86378.09\ngam2 109.59850 -85805.33\ngam3 102.43371 -85526.74\n\n\n\n\n13.2.4.2 Brook trout - flow by river\n\n\nCode\ngam0ByRiver <- bam(grWeight ~ (riverGG + seasonGG + observedWeight + tempSR + flowByRiverSR)^2 + cohortF * ageF +             \n               s(flowByRiverSR, bs = \"cr\", k = kIn, by = riverGG) +\n               s(flowByRiverSR, bs = \"cr\", k = kIn, by = seasonGG) +\n               s(tempSR, bs = \"cr\", k = kIn, by = riverGG) +\n               s(tempSR, bs = \"cr\", k = kIn, by = seasonGG),\n             data = dGAM |> filter(speciesGG == speciesIn, cohort %in% 2000:2013), method = \"REML\")\n\ngam1ByRiver <- bam(grWeight ~ (riverGG + seasonGG + observedWeight + tempSR + flowByRiverSR)^2 + cohortF +             \n               s(flowByRiverSR, bs = \"cr\", k = kIn, by = riverGG) +\n               s(flowByRiverSR, bs = \"cr\", k = kIn, by = seasonGG) +\n               s(tempSR, bs = \"cr\", k = kIn, by = riverGG) +\n               s(tempSR, bs = \"cr\", k = kIn, by = seasonGG),\n             data = dGAM |> filter(speciesGG == speciesIn, cohort %in% 2000:2013), method = \"REML\")\n\n# age matters, what about taking out length?\ngam2ByRiver <- bam(grWeight ~ (riverGG + seasonGG  + tempSR + flowByRiverSR)^2 + cohortF * ageF +             \n               s(flowByRiverSR, bs = \"cr\", k = kIn, by = riverGG) +\n               s(flowByRiverSR, bs = \"cr\", k = kIn, by = seasonGG) +\n               s(tempSR, bs = \"cr\", k = kIn, by = riverGG) +\n               s(tempSR, bs = \"cr\", k = kIn, by = seasonGG),\n             data = dGAM |> filter(speciesGG == speciesIn, cohort %in% 2000:2013), method = \"REML\")\n\n#nope, need to keep length\n#How about without the interactions?\ngam3ByRiver <- bam(grWeight ~ (riverGG + seasonGG + observedWeight + tempSR + flowByRiverSR) + cohortF * ageF +             \n               s(flowByRiverSR, bs = \"cr\", k = kIn, by = riverGG) +\n               s(flowByRiverSR, bs = \"cr\", k = kIn, by = seasonGG) +\n               s(tempSR, bs = \"cr\", k = kIn, by = riverGG) +\n               s(tempSR, bs = \"cr\", k = kIn, by = seasonGG),\n             data = dGAM |> filter(speciesGG == speciesIn, cohort %in% 2000:2013), method = \"REML\")\n#nope, need the interactions\n\nAIC(gam0ByRiver, gam1ByRiver, gam2ByRiver, gam3ByRiver) |> arrange(AIC)\n\n\n                   df       AIC\ngam0ByRiver 120.02873 -87218.68\ngam1ByRiver  71.79121 -86264.17\ngam2ByRiver 110.84119 -85736.95\ngam3ByRiver 102.51579 -85461.99\n\n\n\n\n13.2.4.3 Brook trout - compare flow and flow by river gams\n\n\nCode\npredictBKTgamS <- function(dIn, modInFlow, modInFlowByRiver){\n\n  predMat0 <- \n    expand.grid(\n      flowS = seq(-1.5,1.5,0.25), \n      tempS = seq(-1.5,1.5,0.25), \n      riverGG = unique(dIn$riverGG), \n      seasonGG= unique(dIn$seasonGG),\n      observedWeight = seq(2, max(dIn$observedWeight, na.rm = TRUE)/2, 20),\n      cohortF = 2000:2013,#uunique(dIn$cohortF),\n      ageF = 0:4,#unique(dIn$ageF),\n      byRiver = FALSE\n  )\n  predMat <- \n    add_column(\n      pred = predict.bam(modInFlow, predMat0),\n      predMat0\n    ) |> \n    rename(flow = flowS, temp = tempS)\n  \n  predMatByRiver0 <- \n    expand.grid(\n      flowByRiverS = seq(-1.5,1.5,0.25), \n      tempS = seq(-1.5,1.5,0.25), \n      riverGG = unique(dIn$riverGG), \n      seasonGG= unique(dIn$seasonGG),\n      observedWeight = seq(2, max(dIn$observedWeight, na.rm = TRUE)/2, 20),\n      cohortF = 2000:2013,#unique(dIn$cohortF),\n      ageF = 0:4,#unique(dIn$ageF),\n      byRiver = TRUE\n    ) \n  predMatByRiver <- \n    add_column(\n      pred = predict.bam(modInFlowByRiver, predMatByRiver0),\n      predMatByRiver0\n    ) |> \n    rename(flow = flowByRiverS, temp = tempS)\n\n  return(add_row(predMat, predMatByRiver))\n}\ngamSBKTPredictions <- predictBKTgamS(dGAM, gamS0, gamS0ByRiver)\n\npredictBKTgam <- function(dIn, modInFlow, modInFlowByRiver){\n\n  predMat0 <- \n    expand.grid(\n      flowSR = seq(-1.5,1.5,0.25), \n      tempSR = seq(-1.5,1.5,0.25), \n      riverGG = unique(dIn$riverGG), \n      seasonGG= unique(dIn$seasonGG),\n      observedWeight = seq(2, max(dIn$observedWeight, na.rm = TRUE)/2, 20),\n      cohortF = 2000:2013,#uunique(dIn$cohortF),\n      ageF = 0:4,#unique(dIn$ageF),\n      byRiver = FALSE\n  )\n  predMat <- \n    add_column(\n      pred = predict.bam(modInFlow, predMat0),\n      predMat0\n    ) |> \n    rename(flow = flowSR, temp = tempSR)\n  \n  predMatByRiver0 <- \n    expand.grid(\n      flowByRiverSR = seq(-1.5,1.5,0.25), \n      tempSR = seq(-1.5,1.5,0.25), \n      riverGG = unique(dIn$riverGG), \n      seasonGG= unique(dIn$seasonGG),\n      observedWeight = seq(2, max(dIn$observedWeight, na.rm = TRUE)/2, 20),\n      cohortF = 2000:2013,#unique(dIn$cohortF),\n      ageF = 0:4,#unique(dIn$ageF),\n      byRiver = TRUE\n    ) \n  predMatByRiver <- \n    add_column(\n      pred = predict.bam(modInFlowByRiver, predMatByRiver0),\n      predMatByRiver0\n    ) |> \n    rename(flow = flowByRiverSR, temp = tempSR)\n\n  return(add_row(predMat, predMatByRiver))\n}\n\ngamBKTPredictions <- predictBKTgam(dGAM, gam0, gam0ByRiver)\n\n\n\n\n13.2.4.4 Graph predictions\n\n\nCode\nunique(gamBKTPredictions$observedWeight)\n\n\n [1]   2  22  42  62  82 102 122 142 162 182\n\n\nCode\nggplot(\n  gamSBKTPredictions |> \n    filter(\n      observedWeight %in% c(22), \n      cohortF == 2012, \n      ageF == 0\n    ), \n  aes(temp, pred, color = (flow), group = (flow))) +\n  geom_point(alpha = 0.2) +\n  labs(x = \"Stream temperature\", y = \"Predicted growth rate\") +\n  ylim(-0.02, 0.015) +\n  #geom_smooth(se = FALSE) +\n  geom_hline(yintercept = 0) +\n  facet_grid(seasonGG~riverGG+byRiver, scales = 'free')\n\n\n\n\n\nCode\nggplot(\n  gamBKTPredictions |> \n    filter(\n      observedWeight %in% c(22), \n      cohortF == 2012, \n      ageF == 0\n    ), \n  aes(temp, pred, color = (flow), group = (flow))) +\n  geom_point(alpha = 0.2) +\n  labs(x = \"Stream temperature\", y = \"Predicted growth rate\") +\n  #geom_smooth(se = FALSE) +\n  geom_hline(yintercept = 0) +\n  facet_grid(seasonGG~riverGG+byRiver, scales = 'free')"
  },
  {
    "objectID": "modelsCMR_ft_cohort_Flow_OB.html",
    "href": "modelsCMR_ft_cohort_Flow_OB.html",
    "title": "14  Flow effects on survival (phi) models with cohort structure - O’Bear only",
    "section": "",
    "text": "Probability of survival (phi) model structure:\nlogit(phi[t,i]) <-\nbetaInt[ isYOY[i,t],season[t],cohort[i]] +\nbetaFlow[1,isYOY[i,t],season[t]] * flow[i,t] +\nbetaFlow[2,isYOY[i,t],season[t]] * temp[i,t] +\nbetaFlow[3,isYOY[i,t],season[t]] * temp[i,t] * flow[i,t]\nProbability of capture (p) model structure:\nlogit(p[t,i]) <- betaP[isYOY[i,t],season[t-1],cohort[i]]\nThe goal of this modelling exercise is to evaluate the effect of new tributary-specific stream flow estimates on survival of brook trout. Here, we compare survival within one tributary (O’Bear Brook) with flow input data as 1) single flow estimate for all locations (historical approach) and 2) hindcasted flows for each tributary based on new tributary-specific flows which are available since 2000.\nThe goal is to compare survival estimates with tributary-specific flow to estimates with common flow across locations.\nNote: a model without cohort structure is here modelsCMR_ft_Flow_OB.qmd but is not included because results are similar but without the cohort estimates.\nStructure options include [species, cohort, season, isYOY, flow, flow^2]\n\n\n\n\n14.0.1 Model with original flow data\nCohort-dependent estimates of phi and p with flow and temperature hierarchical effects\n\n14.0.1.1 Retrieve model results\nModel is run using targets in R/modelCMR_tt_ft_cohort_OB.R\n\n\nCode\n# Following https://oliviergimenez.github.io/bayesian-cr-workshop/worksheets/4_demo.html\n# \n  out_flow <- tar_read(tt_modelOut_ft_cohort_OB_flow )\n\n  MCMCplot(object = out_flow$mcmc)\n\n\n\n\n\nCode\n  summary_flow <- MCMCsummary(object = out_flow$mcmc, round = 3) %>%\n    mutate(flowData = \"flow\") %>%\n    rownames_to_column(var = \"var\")\n  \n  #summary_flow %>% filter(grepl(\"betaIntYOYSeason\", var))\n  #summary_flow %>% filter(grepl(\"betaPhiYOYSeason\", var))\n  #summary_flow %>% filter(grepl(\"betaFlow\", var))\n  #summary_flow %>% filter(grepl(\"betaInt\", var))\n  \n  \n  priors <- runif(out_flow$runData$nIter * out_flow$runData$nChains, 0, 1)\n  MCMCtrace(object = out_flow$mcmc,\n            #ISB = FALSE,\n            #exact = TRUE, \n            params = c(\n              \"betaIntYOYSeason\", \"betaPhiYOYSeason\",\"betaPYOYSeason\"\n            #  \"betaIntTop\", \"betaPhiTop\",\"betaFlowTop\",\"betaPTop\"  \n            #  \"betaInt\", \"betaPhi\",\"betaFlow\",\"betaP\",\n            #  \"betaIntOut\", \"betaPhiOut\",\"betaFlowOut\",\"betaPOut\"\n            ),\n            pdf = FALSE, \n            priors = priors)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n    MCMCtrace(object = out_flow$mcmc,\n            #ISB = FALSE,\n            #exact = TRUE, \n            params = c(\n              \"betaIntYOY\", \"betaPhiYOY\",\"betaFlowYOY\",\"betaPYOY\"  \n            #  \"betaInt\", \"betaPhi\",\"betaFlow\",\"betaP\",\n            #  \"betaIntOut\", \"betaPhiOut\",\"betaFlowOut\",\"betaPOut\"\n            ),\n            pdf = FALSE, \n            priors = priors)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n14.0.2 Model with flow data hindcast for each rvier\nCohort-dependent estimates of phi and p with flowByRiver hierarchical effects\n\n14.0.2.1 Retrieve model results\nModel is run using targets in R/modelCMR_tt_ft_cohort_OB\n\n\nCode\n# Following https://oliviergimenez.github.io/bayesian-cr-workshop/worksheets/4_demo.html\n# \n  out_flowByRiver <- tar_read(tt_modelOut_ft_cohort_OB_flowByRiver)\n\n  MCMCplot(object = out_flowByRiver$mcmc)\n\n\n\n\n\nCode\n  summary_flowByRiver <- MCMCsummary(object = out_flowByRiver$mcmc, round = 3) %>%\n    mutate(flowData = \"flowByRiver\") %>%\n    rownames_to_column(var = \"var\")\n  \n  #summary_flowByRiver %>% filter(grepl(\"betaIntYOYSeason\", var))\n  #summary_flowByRiver %>% filter(grepl(\"betaPhiYOYSeason\", var))\n  #summary_flowByRiver %>% filter(grepl(\"betaFlow\", var))\n  \n  \n  priors <- runif(out_flowByRiver$runData$nIter * out_flowByRiver$runData$nChains, 0, 1)\n  MCMCtrace(object = out_flowByRiver$mcmc,\n            #ISB = FALSE,\n            #exact = TRUE, \n            params = c( \"betaIntYOY\", \"betaPhiYOY\",\"betaFlowYOY\",\"betaPYOY\" ),\n            pdf = FALSE, \n            priors = priors)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n  # MCMCtrace(object = out_flowByRiver$mcmc,\n  #           #ISB = FALSE,\n  #           #exact = TRUE, \n  #           params = c(\"betaInt\"),\n  #           pdf = FALSE, \n  #           priors = priors)\n\n\n\n\n\n14.0.3 Compare parameter estimates of models with flow and flowByRiver\n\n\nCode\nboth <- bind_rows(summary_flow, summary_flowByRiver) %>%\n  rename(lo = '2.5%', hi = '97.5%')\n\nggplot(both %>% filter(grepl(\"betaFlowTop\", var)), aes(color = flowData)) +\n  geom_point(aes(var, mean), size = 2, position = position_dodge(width = 0.5)) +\n  geom_errorbar( aes(var, ymin = lo, ymax = hi), width = 0.4, position = position_dodge(width = 0.5)) \n\n\n\n\n\nCode\nggplot(both %>% filter(grepl(\"betaFlowYOY\", var)), aes(color = flowData)) +\n  geom_point(aes(var, mean), size = 2, position = position_dodge(width = 0.5)) +\n  geom_errorbar( aes(var, ymin = lo, ymax = hi), width = 0.4, position = position_dodge(width = 0.5)) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1))\n\n\n\n\n\nCode\nggplot(both %>% filter(grepl(\"betaIntYOY\", var)), aes(color = flowData)) +\n  geom_point(aes(var, mean), size = 2, position = position_dodge(width = 0.5)) +\n  geom_errorbar( aes(var, ymin = lo, ymax = hi), width = 0.4, position = position_dodge(width = 0.5)) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1))\n\n\n\n\n\nCode\nggplot(both %>% filter(grepl(\"betaIntYOYSeason\", var)), aes(color = flowData)) +\n  geom_point(aes(var, mean), size = 2, position = position_dodge(width = 0.5)) +\n  geom_errorbar( aes(var, ymin = lo, ymax = hi), width = 0.4, position = position_dodge(width = 0.5)) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1))\n\n\n\n\n\nCode\nggplot(both %>% filter(grepl(\"betaInt\\\\[\", var)), aes(color = flowData)) +\n  geom_point(aes(var, mean), size = 2, position = position_dodge(width = 0.5)) +\n  geom_errorbar( aes(var, ymin = lo, ymax = hi), width = 0.4, position = position_dodge(width = 0.5)) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1))\n\n\n\n\n\nCode\nggplot(both %>% filter(grepl(\"betaPYOY\", var)), aes(color = flowData)) +\n  geom_point(aes(var, mean), size = 2, position = position_dodge(width = 0.5)) +\n  geom_errorbar( aes(var, ymin = lo, ymax = hi), width = 0.4, position = position_dodge(width = 0.5)) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1))\n\n\n\n\n\nCode\n# ggplot(both %>% filter(grepl(\"betaPOut\", var)), aes(color = flowData)) +\n#   geom_point(aes(var, mean), size = 2, position = position_dodge(width = 0.5)) +\n#   geom_errorbar( aes(var, ymin = lo, ymax = hi), width = 0.4, position = position_dodge(width = 0.5)) +\n#   theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1))\n\n\n\n\n\n\n\n14.0.4 Survival comparisons\n\n\nCode\ngetBetas <- function(d) {\n  #betaFlow\n  betaFlow <- d %>% \n    filter(grepl(\"betaInt\\\\[\", var)) %>%\n    mutate(\n      flowData = \"flow\",\n      tmp = str_match(var, \"\\\\[([0-9]+), ([0-9]+), ([0-9]+)\\\\]\")[, 2:4] %>% as.data.frame(),\n      param = tmp$V1,\n      isYOY = tmp$V2,\n      season = tmp$V3\n    ) %>%\n    select(-tmp)\n  \n  betaFlowYOY <- d %>% \n    filter(grepl(\"betaFlowYOY\", var)) %>%\n    mutate(\n      flowData = \"flow\",\n      tmp = str_match(var, \"\\\\[([0-9]+), ([0-9]+)\\\\]\")[, 2:3] %>% as.data.frame(),\n      param = tmp$V1,\n      isYOY = tmp$V2,\n    ) %>%\n    select(-tmp)\n  \n  betaFlowTop <- d %>% \n    filter(grepl(\"betaFlowTop\", var)) %>%\n    mutate(\n      flowData = \"flow\",\n      tmp = str_match(var, \"\\\\[([0-9]+)\\\\]\") %>% as.data.frame(),\n      param = tmp$V2\n    ) %>%\n    select(-tmp)\n  \n  \n}\n\ngetBetaIntOuts <- function(d, dataType = \"flow\") {\n  #betaFlow\n  betaInt <- d %>% \n    filter(grepl(\"betaIntOut\\\\[\", var)) %>%\n    mutate(\n      flowData = dataType,\n      tmp = str_match(var, \"\\\\[([0-9]+), ([0-9]+), ([0-9]+)\\\\]\")[, 2:4] %>% as.data.frame(),\n      isYOY = tmp$V1,\n      season = tmp$V2,\n      cohort = tmp$V3,\n      varName = \"betaInt\"\n    ) %>%\n    select(-tmp) %>%\n    filter(!(season == 2 & isYOY == 1))\n    \n  betaIntYOY <- d %>% \n    filter(grepl(\"betaIntYOYOut\\\\[\", var)) %>%\n    mutate(\n      flowData = dataType,\n      tmp = str_match(var, \"\\\\[([0-9]+)\\\\]\") %>% as.data.frame(),\n      isYOY = tmp$V2,\n      varName = \"betaIntYOY\"\n    ) %>%\n    select(-tmp)\n  \n  betaIntYOYSeason <- d %>% \n    filter(grepl(\"betaIntYOYSeasonOut\\\\[\", var)) %>%\n    mutate(\n      flowData = dataType,\n      tmp = str_match(var, \"\\\\[([0-9]+), ([0-9]+)\\\\]\")[, 2:3] %>% as.data.frame(),\n      isYOY = tmp$V1,\n      season = tmp$V2,\n      varName = \"betaIntYOYSeason\"\n    ) %>%\n    select(-tmp) %>%\n    filter(!(season == 2 & isYOY == 1))\n\n  return(\n    bind_rows(betaInt, betaIntYOY, betaIntYOYSeason) %>%\n      mutate(cohort = as.numeric(cohort) + 2002 - 1)\n         )\n}\n\n\n\n14.0.4.1 Get betaIntOut estimates\n\n\nCode\nbetaIntFlow <- getBetaIntOuts(summary_flow, \"flow\")\nbetaIntFlowByRiver <- getBetaIntOuts(summary_flowByRiver, \"flowByRiver\")\n\nbetaInts <- bind_rows(betaIntFlow, betaIntFlowByRiver) %>%\n  rename(lo = '2.5%', hi = '97.5%', median = '50%')\n\n\n\n\nCode\n# Define the facet labeller function\nlabelsIntYOY <- c(\n  \"1\" = \"Growth year 1\",\n  \"2\" = \"Growth year 2\"\n)\n\nlabelsIntSeason <- c(\n  \"1\" = \"Spring\",\n  \"2\" = \"Summer\",\n  \"3\" = \"Autumn\",\n  \"4\" = \"Winter\"\n)\n\nglobal_labellerInt <- labeller(\n  isYOY = labelsIntYOY,\n  season = labelsIntSeason\n  #.default = label_both\n)\n\nggplot(betaInts %>% filter(varName == \"betaInt\"), aes(cohort, mean, color = flowData)) +\n  geom_point(size = 2, position = position_dodge(width = 0.5)) +\n  geom_errorbar(aes(cohort, ymin = lo, ymax = hi), width = 0.4, position = position_dodge(width = 0.5)) +\n  scale_x_continuous(\"Cohort\") +  \n  scale_y_continuous(\"Suvrival\") +\n  facet_grid(season~isYOY, labeller = global_labellerInt) +\n  guides(color = guide_legend(\n    title = \"Data source\"\n  ))\n\n\n\n\n\nCode\nglobal_labellerIntYOYSeason <- labeller(\n  isYOY = labelsIntYOY\n # season = labelsIntSeason\n  #.default = label_both\n)\n\nggplot(betaInts %>% filter(varName == \"betaIntYOYSeason\"), aes(season, mean, color = flowData)) +\n  geom_point(size = 2, position = position_dodge(width = 0.5)) +\n  geom_errorbar(aes(season, ymin = lo, ymax = hi), width = 0.4, position = position_dodge(width = 0.5)) +\n  scale_x_discrete(\"Season\") +  \n  scale_y_continuous(\"Suvrival\") +\n  facet_grid(~isYOY, labeller = global_labellerIntYOYSeason) +\n  guides(color = guide_legend(\n    title = \"Data source\"\n  ))\n\n\n\n\n\nCode\nggplot(betaInts %>% filter(varName == \"betaIntYOY\"), aes(isYOY, mean, color = flowData)) +\n  geom_point(size = 2, position = position_dodge(width = 0.5)) +\n  geom_errorbar(aes(isYOY, ymin = lo, ymax = hi), width = 0.4, position = position_dodge(width = 0.5))\n\n\n\n\n\n\n\n\n\n\n\n14.0.5 Flow effect predictions\n\n\nCode\ngetPredictions_FlowYOYSeasonCohort <- function(toSave, everyNIters = 10, flowStep = 0.5){\n  \n  mcmc <- toSave$mcmc\n  ## betaInt\n  predictorsBetaInt <- expand.grid(\n    iter = seq(1, dim(mcmc$chain1)[1], everyNIters),\n    isYOY = 1:2,\n    season = 1:toSave$myConstants$nSeasons,\n    cohort = 1:toSave$myConstants$nCohorts\n  )\n  \n  for(i in 1:nrow(predictorsBetaInt)){\n    predictorsBetaInt$betaInt[i] <- mcmc$chain1[[predictorsBetaInt[i, \"iter\"], \n                                                 paste0(\"betaInt[\", predictorsBetaInt[i, \"isYOY\"],\n                                                        \", \",       predictorsBetaInt[i, \"season\"],\n                                                        \", \",       predictorsBetaInt[i, \"cohort\"],\n                                                        \"]\")\n    ]]\n  }\n\n  # ## betaPhi\n  # predictorsBetaPhi <- expand.grid(\n  #   iter = seq(1, dim(mcmc$chain1)[1], everyNIters),\n  #   isYOY = 1:2,\n  #   season = 1:toSave$myConstants$nSeasons,\n  #   cohort = 1:toSave$myConstants$nCohorts\n  # )\n  # \n  # for(i in 1:nrow(predictorsBetaPhi)){\n  #   predictorsBetaPhi$betaPhi[i] <- mcmc$chain1[[predictorsBetaPhi[i, \"iter\"], \n  #                                                paste0(\"betaPhi[\", predictorsBetaPhi[i, \"isYOY\"],\n  #                                                       \", \",       predictorsBetaPhi[i, \"season\"],\n  #                                                       \", \",       predictorsBetaPhi[i, \"cohort\"],\n  #                                                       \"]\")\n  #   ]]\n  # }\n  \n  ## betaFlow\n  predictorsBetaFlow <- expand.grid(\n    iter = seq(1, dim(mcmc$chain1)[1], everyNIters),\n    isYOY = 1:2,\n    season = 1:toSave$myConstants$nSeasons\n  #  cohort = 1:toSave$myConstants$nCohorts\n  )\n  \n  for(i in 1:nrow(predictorsBetaFlow)){\n    predictorsBetaFlow$betaFlow1[i] <- mcmc$chain1[[predictorsBetaFlow[i, \"iter\"], \n                                                    paste0(\"betaFlow[1, \", predictorsBetaFlow[i, \"isYOY\"],\n                                                           \", \",           predictorsBetaFlow[i, \"season\"],\n                                                      #     \", \",           predictorsBetaFlow[i, \"cohort\"],\n                                                           \"]\")\n    ]]\n    predictorsBetaFlow$betaFlow2[i] <- mcmc$chain1[[predictorsBetaFlow[i, \"iter\"], \n                                                    paste0(\"betaFlow[2, \", predictorsBetaFlow[i, \"isYOY\"],\n                                                           \", \",           predictorsBetaFlow[i, \"season\"],\n                                                  #         \", \",           predictorsBetaFlow[i, \"cohort\"],\n                                                           \"]\")\n    ]]\n    \n    predictorsBetaFlow$betaFlow3[i] <- mcmc$chain1[[predictorsBetaFlow[i, \"iter\"], \n                                                    paste0(\"betaFlow[3, \", predictorsBetaFlow[i, \"isYOY\"],\n                                                           \", \",           predictorsBetaFlow[i, \"season\"],\n                                                  #         \", \",           predictorsBetaFlow[i, \"cohort\"],\n                                                           \"]\")\n    ]]\n  }\n  \n\n  predictorsAll <- expand.grid(\n    iter = seq(1, dim(mcmc$chain1)[1], everyNIters),\n    isYOY = 1:2,\n    cohort = 1:toSave$myConstants$nCohorts,\n    season = 1:toSave$myConstants$nSeasons,\n    flow = seq(-1.5, 1.5, flowStep),\n    temp = seq(-1.5, 1.5, flowStep)\n  )\n  \n  preds <- predictorsAll %>%\n    left_join(predictorsBetaInt) %>%\n    left_join(predictorsBetaFlow) %>%\n #   left_join(predictorsBetaPhi) %>%\n    mutate(predPhi = plogis(betaInt + betaFlow1 * flow + betaFlow2 * temp + betaFlow3 * flow * temp))\n  \n  return(preds)\n}\n\n\n\n\nCode\ngetPredictions_FlowYOYSeason <- function(toSave, everyNIters = 10, flowStep = 0.5){\n  \n  mcmc <- toSave$mcmc\n  ## betaInt\n  predictorsBetaInt <- expand.grid(\n    iter = seq(1, dim(mcmc$chain1)[1], everyNIters),\n    isYOY = 1:2,\n    season = 1:toSave$myConstants$nSeasons\n#    cohort = 1:toSave$myConstants$nCohorts\n  )\n  \n  for(i in 1:nrow(predictorsBetaInt)){\n    predictorsBetaInt$betaInt[i] <- mcmc$chain1[[predictorsBetaInt[i, \"iter\"], \n                                                 paste0(\"betaIntYOYSeason[\", predictorsBetaInt[i, \"isYOY\"],\n                                                        \", \",       predictorsBetaInt[i, \"season\"],\n                                                  #      \", \",       predictorsBetaInt[i, \"cohort\"],\n                                                        \"]\")\n    ]]\n  }\n\n#   ## betaPhi\n#   predictorsBetaPhi <- expand.grid(\n#     iter = seq(1, dim(mcmc$chain1)[1], everyNIters),\n#     isYOY = 1:2,\n#     season = 1:toSave$myConstants$nSeasons\n# #    cohort = 1:toSave$myConstants$nCohorts\n#   )\n#   \n#   for(i in 1:nrow(predictorsBetaPhi)){\n#     predictorsBetaPhi$betaPhi[i] <- mcmc$chain1[[predictorsBetaPhi[i, \"iter\"], \n#                                                  paste0(\"betaPhiYOYSeason[\", predictorsBetaPhi[i, \"isYOY\"],\n#                                                         \", \",       predictorsBetaPhi[i, \"season\"],\n#                                                   #      \", \",       predictorsBetaPhi[i, \"cohort\"],\n#                                                         \"]\")\n#     ]]\n#   }\n  \n  ## betaFlow\n  predictorsBetaFlow <- expand.grid(\n    iter = seq(1, dim(mcmc$chain1)[1], everyNIters),\n    isYOY = 1:2,\n    season = 1:toSave$myConstants$nSeasons\n  #  cohort = 1:toSave$myConstants$nCohorts\n  )\n  \n  for(i in 1:nrow(predictorsBetaFlow)){\n    predictorsBetaFlow$betaFlow1[i] <- mcmc$chain1[[predictorsBetaFlow[i, \"iter\"], \n                                                    paste0(\"betaFlow[1, \", predictorsBetaFlow[i, \"isYOY\"],\n                                                           \", \",           predictorsBetaFlow[i, \"season\"],\n                                                      #     \", \",           predictorsBetaFlow[i, \"cohort\"],\n                                                           \"]\")\n    ]]\n    predictorsBetaFlow$betaFlow2[i] <- mcmc$chain1[[predictorsBetaFlow[i, \"iter\"], \n                                                    paste0(\"betaFlow[2, \", predictorsBetaFlow[i, \"isYOY\"],\n                                                           \", \",           predictorsBetaFlow[i, \"season\"],\n                                                  #         \", \",           predictorsBetaFlow[i, \"cohort\"],\n                                                           \"]\")\n    ]]\n    \n    predictorsBetaFlow$betaFlow3[i] <- mcmc$chain1[[predictorsBetaFlow[i, \"iter\"], \n                                                    paste0(\"betaFlow[3, \", predictorsBetaFlow[i, \"isYOY\"],\n                                                           \", \",           predictorsBetaFlow[i, \"season\"],\n                                                  #         \", \",           predictorsBetaFlow[i, \"cohort\"],\n                                                           \"]\")\n    ]]\n  }\n  \n\n  predictorsAll <- expand.grid(\n    iter = seq(1, dim(mcmc$chain1)[1], everyNIters),\n    isYOY = 1:2,\n   # cohort = 1:toSave$myConstants$nCohorts,\n    season = 1:toSave$myConstants$nSeasons,\n    flow = seq(-1.5, 1.5, flowStep),\n    temp = seq(-1.5, 1.5, flowStep)\n  )\n  \n  preds <- predictorsAll %>%\n    left_join(predictorsBetaInt) %>%\n    left_join(predictorsBetaFlow) %>%\n  #  left_join(predictorsBetaPhi) %>%\n    mutate(predPhi = plogis(betaInt + betaFlow1 * flow + betaFlow2 * temp + betaFlow3 * flow * temp))\n  \n  return(preds)\n}\n\n\n\n\nCode\npredFlowYOYSeason <- getPredictions_FlowYOYSeason(out_flow, everyNIters = 5) %>%\n    mutate(flowData = \"flow\") \n\npredFlowByRiverYOYSeason <- getPredictions_FlowYOYSeason(out_flowByRiver, everyNIters = 5) %>%\n    mutate(flowData = \"flowByRiver\")\n\npredBoth <- bind_rows(predFlowYOYSeason, predFlowByRiverYOYSeason)\n\n\n\n14.0.5.1 Graph effect flow predictions\nPredictions based on flow from the flow extension curve - original approach\n\n\nCode\ncolors <- c(\"blue\", \"green\", \"red\")\n\nggplot(predFlowYOYSeason %>% filter(temp %in% c(-1,0,1)), aes(flow, predPhi, group = ((paste0(iter,temp, sep = \"_\"))))) +\n  geom_line(aes(color = factor(temp)), alpha = 0.05) +\n  scale_color_manual(values = colors) +\n  guides(colour = guide_legend(override.aes = list(alpha = 1))) +\n  facet_grid(season ~ isYOY)\n\n\n\n\n\nPredictions based on flow from flowByRiver\n\n\nCode\nggplot(predFlowByRiverYOYSeason %>% filter(temp %in% c(-1,0,1)), aes(flow, predPhi, group = ((paste0(iter,temp, sep = \"_\"))))) +\n  geom_line(aes(color = factor(temp)), alpha = 0.05) +\n  scale_color_manual(values = colors) +\n  guides(colour = guide_legend(override.aes = list(alpha = 1))) +\n  facet_grid(season ~ isYOY)\n\n\n\n\n\nSimilar format to to the 2015 paper\n\n\nCode\ncolors <- c(\"red\", \"green\", \"blue\")\n\nggplot(predFlowYOYSeason %>% filter(flow %in% c(-1,0,1)), aes(temp, predPhi, group = ((paste0(iter,flow, sep = \"_\"))))) +\n  geom_line(aes(color = factor(flow)), alpha = 0.05) +\n  scale_color_manual(values = colors) +\n  guides(colour = guide_legend(override.aes = list(alpha = 1))) +\n  facet_grid(season ~ isYOY)\n\n\n\n\n\n\n\n\n\n\n\n14.0.6 Flow effect predictions by cohort\n\n\nCode\npredFlowYOYSeasonCohort <- getPredictions_FlowYOYSeasonCohort(out_flow, everyNIters = 5) %>%\n    mutate(flowData = \"flow\") \n\npredFlowByRiverYOYSeasonCohort <- getPredictions_FlowYOYSeasonCohort(out_flowByRiver, everyNIters = 5) %>%\n    mutate(flowData = \"flowByRiver\")\n\npredBothCohort <- bind_rows(predFlowYOYSeasonCohort, predFlowByRiverYOYSeasonCohort)\n\n\n\n14.0.6.1 Graph flow predictions\nPredictions based on flow from the flow extension curve - original approach\n\n\nCode\ncolors <- c(\"blue\", \"green\", \"red\")\n\nggplot(predFlowYOYSeasonCohort %>% filter(temp %in% c(-1,0,1)), aes(flow, predPhi, group = ((paste0(iter,temp,cohort, sep = \"_\"))))) +\n  geom_line(aes(color = factor(temp)), alpha = 0.05) +\n  scale_color_manual(values = colors) +\n  facet_grid(season ~ isYOY + cohort)\n\n\n\n\n\nPredictions based on flow from flowByRiver\n\n\nCode\nggplot(predFlowByRiverYOYSeasonCohort %>% filter(temp %in% c(-1,0,1)), aes(flow, predPhi, group = ((paste0(iter,temp,cohort, sep = \"_\"))))) +\n  geom_line(aes(color = factor(temp)), alpha = 0.05) +\n  scale_color_manual(values = colors) +\n  facet_grid(season ~ isYOY + cohort)\n\n\n\n\n\nSimilar format to to the 2015 paper\n\n\nCode\nggplot(predFlowYOYSeasonCohort %>% filter(flow %in% c(-1,0,1)), aes(temp, predPhi, group = ((paste0(iter,flow,cohort, sep = \"_\"))))) +\n  geom_line(aes(color = factor(flow)), alpha = 0.05) +\n  scale_color_manual(values = colors) +\n  facet_grid(season ~ isYOY)\n\n\n\n\n\n\n\n\n\n\n\n14.0.7 Relate flow/temp to survival\nGet flow average flow and temp data for each occasion (cohort/season)\nFlow data pathway -\n| Raw data in envDataWB_target from getDataEnv_targets.R\n| Data added to cdWB_CMR0_target using addEnvironmental() in getDataCMR_targets.R\n| Data scaled using scaleEnvData() in getDataCMR_targets.R\n| meanFlowScaled\n| meanFlowByRiverScaled\n| meanTemperatureScaled\n| cdWB_CMR0_target feeds into getEH_AIS() to create eh_WB_2002_2014_target\n| eh_WB_2002_2014_target\\(data contains filtered data that created the components of eh_WB_2002_2014_target that are used for CMR analysis. We can use `eh_WB_2002_2014_target`\\)data to get summary flow and temp data\n\n\nCode\neh_OB_2002_2014_target = tar_read(eh_OB_2002_2014_target)\n\nmFlowTemp <- eh_OB_2002_2014_target$data %>%\n  group_by(cohort, season) %>%\n  summarize(mFlow = mean(meanFlowScaled),\n            mFlowByRiver = mean(meanFlowByRiverScaled),\n            mTemp = mean(meanTemperatureScaled),\n            n = n()) %>%\n  mutate(season = as.character(season))\n\nbetaIntsFT <- betaInts %>% \n  left_join(mFlowTemp)\n\n\nHow do the flow metrics (river, byRiver) compare to each other?\n\n\nCode\nggplot(betaIntsFT %>% filter(varName == \"betaInt\"), aes(mFlow, mFlowByRiver, color = as.factor(cohort))) +\n  geom_point() +\n  geom_abline(intercept = 0, slope = 1) +\n  facet_wrap(~ season)\n\n\n\n\n\nHow do flow/flowByRiver compare to temperature?\n\n\nCode\nggplot(betaIntsFT %>% filter(varName == \"betaInt\"), aes(mFlow, mTemp)) +\n  geom_smooth(se = FALSE, color = \"#303140\", method = lm) +\n  geom_point(aes(color = as.factor(cohort))) +\n  geom_abline(intercept = 0, slope = 1) +\n  facet_wrap(~ season)\n\n\n\n\n\nCode\nggplot(betaIntsFT %>% filter(varName == \"betaInt\"), aes(mFlowByRiver, mTemp)) +\n  geom_smooth(se = FALSE, color = \"#303140\", method = lm) +\n  geom_point(aes(color = as.factor(cohort))) +\n  geom_abline(intercept = 0, slope = 1) +\n  facet_wrap(~ season)\n\n\n\n\n\nHow do the flow metrics (river, byRiver) compare to survival estimates?\n\n\nCode\nggplot(betaIntsFT %>% filter(varName == \"betaInt\"), aes(mFlow, mean)) +\n  geom_smooth(se = FALSE, color = \"#303140\", method = lm) +\n  geom_smooth(se = FALSE, color = \"darkgrey\") +\n  geom_point(aes(color = as.factor(cohort))) +\n  facet_grid(season ~ isYOY)\n\n\n\n\n\nCode\nggplot(betaIntsFT %>% filter(varName == \"betaInt\"), aes(mFlowByRiver, mean)) +\n  geom_smooth(se = FALSE, color = \"#303140\", method = lm) +\n  geom_smooth(se = FALSE, color = \"darkgrey\") +\n  geom_point(aes(color = as.factor(cohort))) +\n  facet_grid(season ~ isYOY)\n\n\n\n\n\nCode\nggplot(betaIntsFT %>% filter(varName == \"betaInt\"), aes(mTemp, mean)) +\n  geom_smooth(se = FALSE, color = \"#303140\", method = lm) +\n  geom_smooth(se = FALSE, color = \"darkgrey\") +\n  geom_point(aes(color = as.factor(cohort))) +\n  facet_grid(season ~ isYOY)\n\n\n\n\n\nHow do mean survival estimates compare to flow and flowByriver on the same graph?\n\n\nCode\nggplot(betaIntsFT %>% filter(varName == \"betaInt\"), aes(mFlowByRiver, mean)) +\n  geom_smooth(se = FALSE, color = \"#303140\", method = lm) +\n  geom_point(color = \"#303140\") +\n  geom_smooth(aes(mFlow, mean), se = FALSE, color = \"#d46313\", method = lm) +\n  geom_point(aes(mFlow, mean), color = \"#d46313\") +\n  scale_x_continuous(\"Flow (orange) or flow by river (black)\") +\n  facet_grid(season ~ isYOY)\n\n\n\n\n\nCode\nggplot(betaIntsFT %>% filter(varName == \"betaInt\"), aes(mFlowByRiver, mean)) +\n  geom_smooth(se = FALSE, color = \"#303140\") +\n  geom_point(color = \"#303140\") +\n  geom_smooth(aes(mFlow, mean), se = FALSE, color = \"#d46313\") +\n  geom_point(aes(mFlow, mean), color = \"#d46313\") +\n  scale_x_continuous(\"Flow (orange) or flow by river (black)\") +\n  facet_grid(season ~ isYOY)"
  },
  {
    "objectID": "modelsCMR_ft_cohort_Flow_WB.html#nimble-models",
    "href": "modelsCMR_ft_cohort_Flow_WB.html#nimble-models",
    "title": "15  Flow effects on survival (phi) models with cohort structure - 4 rivers (WB)",
    "section": "15.1 Nimble models",
    "text": "15.1 Nimble models\n\n15.1.1 Model with original flow data\nCohort-dependent estimates of phi and p with flow and temperature hierarchical effects\n\n15.1.1.1 Retrieve model results\nModel is run using this file wbBook_quarto_targets/models/cmrFlowWB/modelCMR_ttt_ft_cohort_WB_makeFile.R\n\n\nCode\n# Following https://oliviergimenez.github.io/bayesian-cr-workshop/worksheets/4_demo.html\n# \n  #out_flow <- tar_read(toSave_ttt_WB_target)\n  # out_flow_target <- tar_read(toSave_ttt_WB_target)\n\n  load(paste0('./models/cmrFlowWB/runsOut/mod', 1, '/ttt_WB_mod', 1, '_mostRecent.RData'))\n  out_flow <- d\n  \n  \n  #out_flow <- read.csv( paste0('./models/cmrFlowWB/runsOut/mod', modelNum, '/ttt_WB_mcmc_mod', modelNum,'_chains12.csv'))\n  \n  MCMCplot(object = out_flow$mcmc)\n\n\n\n\n\nCode\n  summary_flow <- MCMCsummary(object = out_flow$mcmc, round = 3) %>%\n    mutate(flowData = \"flow\") %>%\n    rownames_to_column(var = \"var\")\n  \n  #summary_flow %>% filter(grepl(\"phi\", var))\n  #summary_flow %>% filter(grepl(\"betaPhiYOYSeason\", var))\n  #summary_flow %>% filter(grepl(\"betaFlow\", var))\n  #summary_flow %>% filter(grepl(\"betaInt\", var))\n  \n  \n  priors <- runif(out_flow$nIter * out_flow$nChains, 0, 1)\n  MCMCtrace(object = out_flow$mcmc,\n            #ISB = FALSE,\n            #exact = TRUE, \n            params = c(\n              \"betaIntRiverSeason\"#, \"betaPhiYOYSeason\",\"betaPYOYSeason\"\n            #  \"betaIntTop\", \"betaPhiTop\",\"betaFlowTop\",\"betaPTop\"  \n            #  \"betaInt\", \"betaPhi\",\"betaFlow\",\"betaP\",\n            #  \"betaIntOut\", \"betaPhiOut\",\"betaFlowOut\",\"betaPOut\"\n            ),\n            pdf = FALSE, \n            priors = priors)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n    MCMCtrace(object = out_flow$mcmc,\n            #ISB = FALSE,\n            #exact = TRUE, \n            params = c(\n              \"betaFlowRiver\"\n             # \"betaIntYOY\", \"betaPhiYOY\",\"betaFlowYOY\",\"betaPYOY\"  \n            #  \"betaInt\", \"betaPhi\",\"betaFlow\",\"betaP\",\n            #  \"betaIntOut\", \"betaPhiOut\",\"betaFlowOut\",\"betaPOut\"\n            ),\n            pdf = FALSE, \n            priors = priors)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n15.1.2 Model with flow data hindcast for each rvier\nCohort-dependent estimates of phi and p with flowByRiver hierarchical effects\n\n15.1.2.1 Retrieve model results\nModel is run using this file wbBook_quarto_targets/models/cmrFlowWB/modelCMR_ttt_ft_cohort_WB_makeFile.R\n\n\nCode\n# Following https://oliviergimenez.github.io/bayesian-cr-workshop/worksheets/4_demo.html\n# \n  #out_flowByRiver <- tar_read(mcmcOutMod2)\n\n  load(paste0('./models/cmrFlowWB/runsOut/mod', 2, '/ttt_WB_mod', 2, '_mostRecent.RData'))\n  out_flowByRiver <- d\n \n\n  MCMCplot(object = out_flowByRiver$mcmc)\n\n\n\n\n\nCode\n  summary_flowByRiver <- MCMCsummary(object = out_flowByRiver$mcmc, round = 3) %>%\n    mutate(flowData = \"flowByRiver\") %>%\n    rownames_to_column(var = \"var\")\n  \n  #summary_flowByRiver %>% filter(grepl(\"betaIntYOYSeason\", var))\n  #summary_flowByRiver %>% filter(grepl(\"betaPhiYOYSeason\", var))\n  #summary_flowByRiver %>% filter(grepl(\"betaFlow\", var))\n  \n  \n  priors <- runif(out_flowByRiver$nIter * out_flowByRiver$nChains, 0, 1)\n  MCMCtrace(object = out_flowByRiver$mcmc,\n            #ISB = FALSE,\n            #exact = TRUE, \n            params = c( \n              \"betaIntRiverSeason\"#, \"betaPhiYOY\",\"betaFlowYOY\",\"betaPYOY\" \n                        ),\n            pdf = FALSE, \n            priors = priors)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCode\n  # MCMCtrace(object = out_flowByRiver$mcmc,\n  #           #ISB = FALSE,\n  #           #exact = TRUE, \n  #           params = c(\"betaInt\"),\n  #           pdf = FALSE, \n  #           priors = priors)\n\n\n\n\n\n15.1.3 Compare parameter estimates of models with flow and flowByRiver\n\n\nCode\nboth <- bind_rows(summary_flow, summary_flowByRiver) %>%\n  rename(lo = '2.5%', hi = '97.5%', median = '50%') \n  # mutate(medianIlogit = ilogit(median),\n  #        loIlogit = ilogit(lo),\n  #        hiIlogit = ilogit(hi))\n  \n\nggplot(both %>% filter(grepl(\"betaFlowTop\", var)), aes(color = flowData)) +\n  geom_point(aes(var, median), size = 2, position = position_dodge(width = 0.5)) +\n  geom_errorbar( aes(var, ymin = lo, ymax = hi), width = 0.4, position = position_dodge(width = 0.5)) \n\n\n\n\n\nCode\nggplot(both %>% filter(grepl(\"betaFlowRiver\", var)), aes(color = flowData)) +\n  geom_point(aes(var, median), size = 2, position = position_dodge(width = 0.5)) +\n  geom_errorbar( aes(var, ymin = lo, ymax = hi), width = 0.4, position = position_dodge(width = 0.5)) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1))\n\n\n\n\n\nCode\nggplot(both %>% filter(grepl(\"betaFlow\", var)), aes(color = flowData)) +\n  geom_point(aes(var, median), size = 2, position = position_dodge(width = 0.5)) +\n  geom_errorbar( aes(var, ymin = lo, ymax = hi), width = 0.4, position = position_dodge(width = 0.5)) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1))\n\n\n\n\n\nCode\nggplot(both %>% filter(grepl(\"betaIntTop\", var)), aes(color = flowData)) +\n  geom_point(aes(var, median), size = 2, position = position_dodge(width = 0.5)) +\n  geom_errorbar( aes(var, ymin = lo, ymax = hi), width = 0.4, position = position_dodge(width = 0.5)) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1))\n\n\n\n\n\nCode\nggplot(both %>% filter(grepl(\"betaIntRiver\\\\[\", var)), aes(color = flowData)) +\n  geom_point(aes(var, median), size = 2, position = position_dodge(width = 0.5)) +\n  geom_errorbar( aes(var, ymin = lo, ymax = hi), width = 0.4, position = position_dodge(width = 0.5)) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1))\n\n\n\n\n\nCode\nggplot(both %>% filter(grepl(\"betaIntRiverSeason\", var)), aes(color = flowData)) +\n  geom_point(aes(var, median), size = 2, position = position_dodge(width = 0.5)) +\n  geom_errorbar( aes(var, ymin = lo, ymax = hi), width = 0.4, position = position_dodge(width = 0.5)) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1))\n\n\n\n\n\nCode\nggplot(both %>% filter(grepl(\"betaIntRiverYOYSeason\", var)), aes(color = flowData)) +\n  geom_point(aes(var, median), size = 2, position = position_dodge(width = 0.5)) +\n  geom_errorbar( aes(var, ymin = lo, ymax = hi), width = 0.4, position = position_dodge(width = 0.5)) +\n  theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1))\n\n\n\n\n\nCode\n# ggplot(both %>% filter(grepl(\"betaInt\\\\[\", var)), aes(color = flowData)) +\n#   geom_point(aes(var, median), size = 2, position = position_dodge(width = 0.5)) +\n#   geom_errorbar( aes(var, ymin = lo, ymax = hi), width = 0.4, position = position_dodge(width = 0.5)) +\n#   theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1))\n\n# ggplot(both %>% filter(grepl(\"betaP\", var)), aes(color = flowData)) +\n#   geom_point(aes(var, mean), size = 2, position = position_dodge(width = 0.5)) +\n#   geom_errorbar( aes(var, ymin = lo, ymax = hi), width = 0.4, position = position_dodge(width = 0.5)) +\n#   theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1))\n\n# ggplot(both %>% filter(grepl(\"betaPOut\", var)), aes(color = flowData)) +\n#   geom_point(aes(var, mean), size = 2, position = position_dodge(width = 0.5)) +\n#   geom_errorbar( aes(var, ymin = lo, ymax = hi), width = 0.4, position = position_dodge(width = 0.5)) +\n#   theme(axis.text.x = element_text(angle = 90, vjust = 1, hjust=1))\n\n\n\n\nCode\n# out_flow$mcmc$chain1 %>% \n#     filter(grepl(\"phi\\\\[\", var)) %>%\n#     mutate(\n#       flowData = \"flow\",\n#       tmp = str_match(var, \"\\\\[([0-9]+), ([0-9]+), ([0-9]+)\\\\]\")[, 2:4] %>% as.data.frame(),\n#       param = tmp$V1,\n#       isYOY = tmp$V2,\n#       season = tmp$V3\n#     ) %>%\n#     select(-tmp)\n\n\n\n\n\n\n\n15.1.4 Survival comparisons\n\n\nCode\ngetBetas <- function(d) {\n  #betaFlow\n  betaFlow <- d %>% \n    filter(grepl(\"betaInt\\\\[\", var)) %>%\n    mutate(\n      flowData = \"flow\",\n      tmp = str_match(var, \"\\\\[([0-9]+), ([0-9]+), ([0-9]+)\\\\]\")[, 2:4] %>% as.data.frame(),\n      param = tmp$V1,\n      isYOY = tmp$V2,\n      season = tmp$V3\n    ) %>%\n    select(-tmp)\n  \n  betaFlowYOY <- d %>% \n    filter(grepl(\"betaFlowYOY\", var)) %>%\n    mutate(\n      flowData = \"flow\",\n      tmp = str_match(var, \"\\\\[([0-9]+), ([0-9]+)\\\\]\")[, 2:3] %>% as.data.frame(),\n      param = tmp$V1,\n      isYOY = tmp$V2,\n    ) %>%\n    select(-tmp)\n  \n  betaFlowTop <- d %>% \n    filter(grepl(\"betaFlowTop\", var)) %>%\n    mutate(\n      flowData = \"flow\",\n      tmp = str_match(var, \"\\\\[([0-9]+)\\\\]\") %>% as.data.frame(),\n      param = tmp$V2\n    ) %>%\n    select(-tmp)\n  \n  \n}\n\ngetBetaIntOuts <- function(d, dataType = \"flow\") {\n  #betaFlow\n  betaInt <- d %>% \n    filter(grepl(\"betaInt\\\\[\", var)) %>%\n    mutate(\n      flowData = dataType,\n      tmp = str_match(var, \"\\\\[([0-9]+), ([0-9]+), ([0-9]+), ([0-9]+)\\\\]\")[, 2:5] %>% as.data.frame(),\n      river = tmp$V1,\n      isYOY = tmp$V2,\n      season = tmp$V3,\n      cohort = tmp$V4,\n      varName = \"betaInt\"\n    ) %>%\n    select(-tmp) %>%\n    filter(!(season == 2 & isYOY == 1))\n    \n  betaIntRiver <- d %>% \n    filter(grepl(\"betaIntRiver\\\\[\", var)) %>%\n    mutate(\n      flowData = dataType,\n      tmp = str_match(var, \"\\\\[([0-9]+)\\\\]\") %>% as.data.frame(),\n      river = tmp$V2,\n      varName = \"betaIntRiver\"\n    ) %>%\n    select(-tmp)\n  \n  betaIntRiverSeason <- d %>% \n    filter(grepl(\"betaIntRiverSeason\\\\[\", var)) %>%\n    mutate(\n      flowData = dataType,\n      tmp = str_match(var, \"\\\\[([0-9]+), ([0-9]+)\\\\]\")[, 2:3] %>% as.data.frame(),\n      river = tmp$V1,\n      season = tmp$V2,\n      varName = \"betaIntRiverSeason\"\n    ) %>%\n    select(-tmp) #%>%\n    #filter(!(season == 2 & isYOY == 1))\n  \n  betaIntRiverYOYSeason <- d %>% \n    filter(grepl(\"betaIntRiverYOYSeason\\\\[\", var)) %>%\n    mutate(\n      flowData = dataType,\n      tmp = str_match(var, \"\\\\[([0-9]+), ([0-9]+), ([0-9]+)\\\\]\")[, 2:4] %>% as.data.frame(),\n      river = tmp$V1,\n      isYOY = tmp$V2,\n      season = tmp$V3,\n      varName = \"betaIntRiverYOYSeason\"\n    ) %>%\n    select(-tmp) %>%\n    filter(!(season == 2 & isYOY == 1))\n\n  return(\n    bind_rows(betaInt, betaIntRiver, betaIntRiverSeason, betaIntRiverYOYSeason) %>%\n      mutate(\n        cohort = as.numeric(cohort) + 2002 - 1)\n      )\n}\n\n\n\n15.1.4.1 Get betaIntOut estimates\n\n\nCode\nbetaIntFlow <- getBetaIntOuts(summary_flow, \"flow\")\nbetaIntFlowByRiver <- getBetaIntOuts(summary_flowByRiver, \"flowByRiver\")\n\nbetaInts <- bind_rows(betaIntFlow, betaIntFlowByRiver) %>%\n  rename(lo = '2.5%', hi = '97.5%', median = '50%')\n\n\n\n\nCode\n# Define the facet labeller function\nlabelsIntYOY <- c(\n  \"1\" = \"Growth year 1\",\n  \"2\" = \"Growth year 2\"\n)\n\nlabelsIntSeason <- c(\n  \"1\" = \"Spring\",\n  \"2\" = \"Summer\",\n  \"3\" = \"Autumn\",\n  \"4\" = \"Winter\"\n)\n\nlabelsIntRiver <- c(\n  \"1\" = \"West brook\",\n  \"2\" = \"Open Large\",\n  \"3\" = \"Open small\",\n  \"4\" = \"Isolated small\"\n)\n\nglobal_labellerInt <- labeller(\n  isYOY = labelsIntYOY,\n  season = labelsIntSeason,\n  river = labelsIntRiver\n  #.default = label_both\n)\n\nggplot(betaInts %>% filter(varName == \"betaInt\"), aes(cohort, mean, color = flowData)) +\n  geom_point(size = 2, position = position_dodge(width = 0.5)) +\n  geom_errorbar(aes(cohort, ymin = lo, ymax = hi), width = 0.4, position = position_dodge(width = 0.5)) +\n  scale_x_continuous(\"Cohort\") +  \n  scale_y_continuous(\"Suvrival\") +\n  facet_grid(season~isYOY+river, labeller = global_labellerInt) +\n  guides(color = guide_legend(\n    title = \"Data source\"\n  ))\n\n\n\n\n\nCode\nglobal_labellerIntYOYSeason <- labeller(\n  isYOY = labelsIntYOY\n # season = labelsIntSeason\n  #.default = label_both\n)\n\nggplot(betaInts %>% filter(varName == \"betaIntRiverSeason\"), aes(season, mean, color = flowData)) +\n  geom_point(size = 2, position = position_dodge(width = 0.5)) +\n  geom_errorbar(aes(season, ymin = lo, ymax = hi), width = 0.4, position = position_dodge(width = 0.5)) +\n  scale_x_discrete(\"Season\") +  \n  scale_y_continuous(\"Suvrival\") +\n  facet_wrap(~river, labeller = global_labellerInt) +\n  guides(color = guide_legend(\n    title = \"Data source\"\n  ))\n\n\n\n\n\nCode\nggplot(betaInts %>% filter(varName == \"betaIntRiver\"), aes(isYOY, mean, color = flowData)) +\n  geom_point(size = 2, position = position_dodge(width = 0.5)) +\n  geom_errorbar(aes(isYOY, ymin = lo, ymax = hi), width = 0.4, position = position_dodge(width = 0.5)) +\n  facet_wrap(~river, labeller = global_labellerInt)\n\n\n\n\n\n\n\n\n\n\n\n15.1.5 Flow effect predictions\n\n\nCode\n#Has not been updated to new mcmc model\n\ngetPredictions_FlowYOYSeasonCohort <- function(toSave, everyNIters = 10, flowStep = 0.5){\n\n  mcmc <- toSave$mcmc\n  ## betaInt\n  predictorsBetaInt <- expand.grid(\n    iter = seq(1, dim(mcmc$chain1)[1], everyNIters),\n    isYOY = 1:2,\n    season = 1:toSave$myConstants$nSeasons,\n    cohort = 1:toSave$myConstants$nCohorts\n  )\n\n  for(i in 1:nrow(predictorsBetaInt)){\n    predictorsBetaInt$betaInt[i] <- mcmc$chain1[[predictorsBetaInt[i, \"iter\"],\n                                                 paste0(\"betaInt[\", predictorsBetaInt[i, \"isYOY\"],\n                                                        \", \",       predictorsBetaInt[i, \"season\"],\n                                                        \", \",       predictorsBetaInt[i, \"cohort\"],\n                                                        \"]\")\n    ]]\n  }\n\n  # ## betaPhi\n  # predictorsBetaPhi <- expand.grid(\n  #   iter = seq(1, dim(mcmc$chain1)[1], everyNIters),\n  #   isYOY = 1:2,\n  #   season = 1:toSave$myConstants$nSeasons,\n  #   cohort = 1:toSave$myConstants$nCohorts\n  # )\n  #\n  # for(i in 1:nrow(predictorsBetaPhi)){\n  #   predictorsBetaPhi$betaPhi[i] <- mcmc$chain1[[predictorsBetaPhi[i, \"iter\"],\n  #                                                paste0(\"betaPhi[\", predictorsBetaPhi[i, \"isYOY\"],\n  #                                                       \", \",       predictorsBetaPhi[i, \"season\"],\n  #                                                       \", \",       predictorsBetaPhi[i, \"cohort\"],\n  #                                                       \"]\")\n  #   ]]\n  # }\n\n  ## betaFlow\n  predictorsBetaFlow <- expand.grid(\n    iter = seq(1, dim(mcmc$chain1)[1], everyNIters),\n    isYOY = 1:2,\n    season = 1:toSave$myConstants$nSeasons\n  #  cohort = 1:toSave$myConstants$nCohorts\n  )\n\n  for(i in 1:nrow(predictorsBetaFlow)){\n    predictorsBetaFlow$betaFlow1[i] <- mcmc$chain1[[predictorsBetaFlow[i, \"iter\"],\n                                                    paste0(\"betaFlow[1, \", predictorsBetaFlow[i, \"isYOY\"],\n                                                           \", \",           predictorsBetaFlow[i, \"season\"],\n                                                      #     \", \",           predictorsBetaFlow[i, \"cohort\"],\n                                                           \"]\")\n    ]]\n    predictorsBetaFlow$betaFlow2[i] <- mcmc$chain1[[predictorsBetaFlow[i, \"iter\"],\n                                                    paste0(\"betaFlow[2, \", predictorsBetaFlow[i, \"isYOY\"],\n                                                           \", \",           predictorsBetaFlow[i, \"season\"],\n                                                  #         \", \",           predictorsBetaFlow[i, \"cohort\"],\n                                                           \"]\")\n    ]]\n\n    predictorsBetaFlow$betaFlow3[i] <- mcmc$chain1[[predictorsBetaFlow[i, \"iter\"],\n                                                    paste0(\"betaFlow[3, \", predictorsBetaFlow[i, \"isYOY\"],\n                                                           \", \",           predictorsBetaFlow[i, \"season\"],\n                                                  #         \", \",           predictorsBetaFlow[i, \"cohort\"],\n                                                           \"]\")\n    ]]\n  }\n\n\n  predictorsAll <- expand.grid(\n    iter = seq(1, dim(mcmc$chain1)[1], everyNIters),\n    isYOY = 1:2,\n    cohort = 1:toSave$myConstants$nCohorts,\n    season = 1:toSave$myConstants$nSeasons,\n    flow = seq(-1.5, 1.5, flowStep),\n    temp = seq(-1.5, 1.5, flowStep)\n  )\n\n  preds <- predictorsAll %>%\n    left_join(predictorsBetaInt) %>%\n    left_join(predictorsBetaFlow) %>%\n #   left_join(predictorsBetaPhi) %>%\n    mutate(predPhi = plogis(betaInt + betaFlow1 * flow + betaFlow2 * temp + betaFlow3 * flow * temp))\n\n  return(preds)\n}\n\n\n\n\nCode\ngetPredictions_FlowRiverYOYSeason <- function(toSave, everyNIters = 10, flowStep = 0.5){\n\n  mcmc <- toSave$mcmc\n  ## betaInt\n  predictorsBetaInt <- expand.grid(\n    iter = seq(1, dim(mcmc$chain1)[1], everyNIters),\n    river = 1:toSave$myConstants$nRivers,\n    isYOY = 1:2,\n    season = 1:toSave$myConstants$nSeasons\n  )\n\n  for(i in 1:nrow(predictorsBetaInt)){\n    predictorsBetaInt$betaInt[i] <- \n      mcmc$chain1[[\n        predictorsBetaInt[i, \"iter\"],\n        paste0(\"betaIntRiverYOYSeason[\",\n               predictorsBetaInt[i, \"river\"],\n               \", \", \n               predictorsBetaInt[i, \"isYOY\"],\n               \", \",       \n               predictorsBetaInt[i, \"season\"],\n               \"]\")\n      ]]\n  }\n\n#   ## betaPhi\n#   predictorsBetaPhi <- expand.grid(\n#     iter = seq(1, dim(mcmc$chain1)[1], everyNIters),\n#     isYOY = 1:2,\n#     season = 1:toSave$myConstants$nSeasons\n# #    cohort = 1:toSave$myConstants$nCohorts\n#   )\n#\n#   for(i in 1:nrow(predictorsBetaPhi)){\n#     predictorsBetaPhi$betaPhi[i] <- mcmc$chain1[[predictorsBetaPhi[i, \"iter\"],\n#                                                  paste0(\"betaPhiYOYSeason[\", predictorsBetaPhi[i, \"isYOY\"],\n#                                                         \", \",       predictorsBetaPhi[i, \"season\"],\n#                                                   #      \", \",       predictorsBetaPhi[i, \"cohort\"],\n#                                                         \"]\")\n#     ]]\n#   }\n\n  ## betaFlow\n  predictorsBetaFlow <- expand.grid(\n    iter = seq(1, dim(mcmc$chain1)[1], everyNIters),\n    river = 1:toSave$myConstants$nRivers,\n    isYOY = 1:2,\n    season = 1:toSave$myConstants$nSeasons\n  )\n\n  for(i in 1:nrow(predictorsBetaFlow)){\n    predictorsBetaFlow$betaFlow1[i] <- \n      mcmc$chain1[[\n        predictorsBetaFlow[i, \"iter\"],\n        paste0(\"betaFlow[1, \", \n               predictorsBetaFlow[i, \"river\"],\n               \", \",\n               predictorsBetaFlow[i, \"isYOY\"],\n               \", \",           \n               predictorsBetaFlow[i, \"season\"],\n        \"]\") \n    ]]\n    \n    predictorsBetaFlow$betaFlow2[i] <- \n      mcmc$chain1[[\n        predictorsBetaFlow[i, \"iter\"],\n        paste0(\"betaFlow[2, \", \n               predictorsBetaFlow[i, \"river\"],\n               \", \",\n               predictorsBetaFlow[i, \"isYOY\"],\n               \", \",           \n               predictorsBetaFlow[i, \"season\"],\n        \"]\") \n    ]]\n    \n    predictorsBetaFlow$betaFlow3[i] <- \n      mcmc$chain1[[\n        predictorsBetaFlow[i, \"iter\"],\n        paste0(\"betaFlow[3, \", \n               predictorsBetaFlow[i, \"river\"],\n               \", \",\n               predictorsBetaFlow[i, \"isYOY\"],\n               \", \",           \n               predictorsBetaFlow[i, \"season\"],\n        \"]\") \n    ]]\n  }\n\n\n  predictorsAll <- expand.grid(\n    iter = seq(1, dim(mcmc$chain1)[1], everyNIters),\n    river = 1:toSave$myConstants$nRivers,\n    isYOY = 1:2,\n    season = 1:toSave$myConstants$nSeasons,\n    flow = seq(-1.5, 1.5, flowStep),\n    temp = seq(-1.5, 1.5, flowStep)\n  )\n\n  preds <- predictorsAll %>%\n    left_join(predictorsBetaInt) %>%\n    left_join(predictorsBetaFlow) %>%\n  #  left_join(predictorsBetaPhi) %>%\n    mutate(predPhi = plogis(betaInt + betaFlow1 * flow + betaFlow2 * temp + betaFlow3 * flow * temp))\n\n  return(preds)\n}\n\n\n\n\nCode\npredFlowRiverYOYSeason <- getPredictions_FlowRiverYOYSeason(out_flow, everyNIters = 2) %>%\n    mutate(flowData = \"flow\")\n\npredFlowByRiverRiverYOYSeason <- getPredictions_FlowRiverYOYSeason(out_flowByRiver, everyNIters = 2) %>%\n    mutate(flowData = \"flowByRiver\")\n\npredBoth <- bind_rows(predFlowRiverYOYSeason, predFlowByRiverRiverYOYSeason)\n\n\n\n15.1.5.1 Graph effect flow predictions\nPredictions based on flow from the flow extension curve - original approach\n\n\nCode\ncolors <- c(\"blue\", \"green\", \"red\")\n\nggplot(predFlowRiverYOYSeason %>% filter(temp %in% c(-1,0,1)), aes(flow, predPhi, group = ((paste0(iter,temp, sep = \"_\"))))) +\n  geom_line(aes(color = factor(temp)), alpha = 0.05) +\n  scale_color_manual(values = colors) +\n  guides(colour = guide_legend(override.aes = list(alpha = 1))) +\n  facet_grid(season ~ river+isYOY, labeller = global_labellerInt)\n\n\n\n\n\nPredictions based on flow from flowByRiver\n\n\nCode\nggplot(predFlowByRiverRiverYOYSeason %>% filter(temp %in% c(-1,0,1)), aes(flow, predPhi, group = ((paste0(iter,temp, sep = \"_\"))))) +\n  geom_line(aes(color = factor(temp)), alpha = 0.05) +\n  scale_color_manual(values = colors) +\n  guides(colour = guide_legend(override.aes = list(alpha = 1))) +\n  facet_grid(season ~ river+isYOY, labeller = global_labellerInt)\n\n\n\n\n\nSimilar format to to the 2015 paper\n\n\nCode\ncolors2 <- c(\"red\", \"green\", \"blue\")\n\nggplot(predFlowRiverYOYSeason %>% filter(flow %in% c(-1,0,1)), aes(temp, predPhi, group = ((paste0(iter,flow, sep = \"_\"))))) +\n  geom_line(aes(color = factor(flow)), alpha = 0.05) +\n  scale_color_manual(values = colors2) +\n  guides(colour = guide_legend(override.aes = list(alpha = 1))) +\n  facet_grid(season ~ river+isYOY, labeller = global_labellerInt)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n15.1.6 Relate flow/temp to survival\nGet flow average flow and temp data for each occasion (cohort/season)\nFlow data pathway - | Raw data in envDataWB_target from getDataEnv_targets.R | Data added to cdWB_CMR0_target using addEnvironmental() in getDataCMR_targets.R | Data scaled using scaleEnvData() in getDataCMR_targets.R | meanFlowScaled | meanFlowByRiverScaled | meanTemperatureScaled | cdWB_CMR0_target feeds into getEH_AIS() to create eh_WB_2002_2014_target | eh_WB_2002_2014_target\\(data contains filtered data that created the components of eh_WB_2002_2014_target that are used for CMR analysis. We can use `eh_WB_2002_2014_target`\\)data to get summary flow and temp data\n\n\nCode\neh_WB_2002_2014_target = tar_read(eh_WB_2002_2014_target)\n\nmFlowTemp <- eh_WB_2002_2014_target$data %>%\n  group_by(riverN, cohort, season) %>%\n  summarize(mFlow = mean(meanFlowScaled),\n            mFlowByRiver = mean(meanFlowByRiverScaled),\n            mTemp = mean(meanTemperatureScaled),\n            n = n()) %>%\n  rename(river = riverN) |> \n  mutate(season = as.character(season),\n         river = as.character(river)) \n \n\nbetaIntsFT <- betaInts %>%\n  left_join(mFlowTemp)\n\n\nHow do the flow metrics (river, byRiver) compare to each other?\n\n\nCode\nggplot(betaIntsFT %>% filter(varName == \"betaInt\"), aes(mFlow, mFlowByRiver, color = as.factor(cohort))) +\n  geom_point() +\n  geom_abline(intercept = 0, slope = 1) +\n  facet_grid(season ~ isYOY+river, labeller = global_labellerInt)\n\n\n\n\n\nHow do flow/flowByRiver compare to temperature?\n\n\nCode\nggplot(betaIntsFT %>% filter(varName == \"betaInt\"), aes(mFlow, mTemp)) +\n  geom_smooth(se = FALSE, color = \"#303140\", method = lm) +\n  geom_point(aes(color = as.factor(cohort))) +\n  geom_abline(intercept = 0, slope = 1) +\n  facet_grid(season ~ isYOY+river, labeller = global_labellerInt)\n\n\n\n\n\nCode\nggplot(betaIntsFT %>% filter(varName == \"betaInt\"), aes(mFlowByRiver, mTemp)) +\n  geom_smooth(se = FALSE, color = \"#303140\", method = lm) +\n  geom_point(aes(color = as.factor(cohort))) +\n  geom_abline(intercept = 0, slope = 1) +\n  facet_grid(season ~ isYOY+river, labeller = global_labellerInt)\n\n\n\n\n\nHow do the flow metrics (river, byRiver) compare to survival estimates?\n\n\nCode\nggplot(betaIntsFT %>% filter(varName == \"betaInt\"), aes(mFlow, mean)) +\n  geom_smooth(se = FALSE, color = \"#303140\", method = lm) +\n  geom_smooth(se = FALSE, color = \"darkgrey\") +\n  geom_point(aes(color = as.factor(cohort))) +\n  facet_grid(season ~ isYOY+river, labeller = global_labellerInt)\n\n\n\n\n\nCode\nggplot(betaIntsFT %>% filter(varName == \"betaInt\"), aes(mFlowByRiver, mean)) +\n  geom_smooth(se = FALSE, color = \"#303140\", method = lm) +\n  geom_smooth(se = FALSE, color = \"darkgrey\") +\n  geom_point(aes(color = as.factor(cohort))) +\n  facet_grid(season ~ isYOY+river, labeller = global_labellerInt)\n\n\n\n\n\nCode\nggplot(betaIntsFT %>% filter(varName == \"betaInt\"), aes(mTemp, mean)) +\n  geom_smooth(se = FALSE, color = \"#303140\", method = lm) +\n  geom_smooth(se = FALSE, color = \"darkgrey\") +\n  geom_point(aes(color = as.factor(cohort))) +\n  facet_grid(season ~ isYOY+river, labeller = global_labellerInt)\n\n\n\n\n\nHow do mean survival estimates compare to flow and flowByriver on the same graph?\n\n\nCode\nggplot(betaIntsFT %>% filter(varName == \"betaInt\"), aes(mFlowByRiver, mean)) +\n  geom_smooth(se = FALSE, color = \"#303140\", method = lm) +\n  geom_point(color = \"#303140\") +\n  geom_smooth(aes(mFlow, mean), se = FALSE, color = \"#d46313\", method = lm) +\n  geom_point(aes(mFlow, mean), color = \"#d46313\") +\n  scale_x_continuous(\"Flow (orange) or flow by river (black)\") +\n  facet_grid(season ~ isYOY+river, labeller = global_labellerInt)\n\n\n\n\n\nCode\nggplot(betaIntsFT %>% filter(varName == \"betaInt\"), aes(mFlowByRiver, mean)) +\n  geom_smooth(se = FALSE, color = \"#303140\") +\n  geom_point(color = \"#303140\") +\n  geom_smooth(aes(mFlow, mean), se = FALSE, color = \"#d46313\") +\n  geom_point(aes(mFlow, mean), color = \"#d46313\") +\n  scale_x_continuous(\"Flow (orange) or flow by river (black)\") +\n  facet_grid(season ~ isYOY+river, labeller = global_labellerInt)"
  },
  {
    "objectID": "modelsCMR_ft_cohort_Flow_WB.html#aiml-models",
    "href": "modelsCMR_ft_cohort_Flow_WB.html#aiml-models",
    "title": "15  Flow effects on survival (phi) models with cohort structure - 4 rivers (WB)",
    "section": "15.2 AI/ML models",
    "text": "15.2 AI/ML models\nModel runs from Xiaowei\n\n\nCode\nnp <- import(\"numpy\")\n\nnpyGrowth <- np$load('./models/cmrFlowWB/xiaowei/USGS_0320/USGS_0320/growth.npy')\nnpyGrowthByRiver <- np$load('./models/cmrFlowWB/xiaowei/USGS_0320/USGS_0320/growth_byriver.npy')\n\nnpySurvival <- np$load('./models/cmrFlowWB/xiaowei/USGS_0320/USGS_0320/survival.npy')\nnpySurvivalByRiver <- np$load('./models/cmrFlowWB/xiaowei/USGS_0320/USGS_0320/survival_byriver.npy')"
  }
]